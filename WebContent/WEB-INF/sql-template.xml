<?xml version="1.0" encoding="Shift_JIS" ?>
<sql-templates xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="sql-template.xsd">

	<!-- サンプル（シンプル） -->
	<sql-template id="sample-simple">
		SELECT
		TBL1.COL_1 AS COL1
		, TBL1.COL_2 AS
		COL2
		, TBL1.COL_3 AS COL3
		FROM
		TABLE_1 AS TBL1
		ORDER BY
		TBL1.COL_1
	</sql-template>
	<!-- サンプル（if-equals） -->
	<sql-template id="sample-if-equals">
		SELECT
		TBL1.COL_1 AS COL1
		, TBL1.COL_2 AS COL2
		, TBL1.COL_3 AS COL3
		FROM
		TABLE_1 AS TBL1
		WHERE
		1 = 1
		<if-equals varName="col3" value="1">
			AND TBL1.COL_3 = ${col3}
		</if-equals>
		ORDER BY
		TBL1.COL_1
	</sql-template>

	<!-- サンプル（if-not-equals） -->
	<sql-template id="sample-if-not-equals">
		SELECT
		TBL1.COL_1 AS COL1
		, TBL1.COL_2 AS COL2
		, TBL1.COL_3 AS COL3
		FROM
		TABLE_1 AS TBL1
		WHERE
		1 = 1
		<if-not-equals varName="col3" value="1">
			AND TBL1.COL_3 !=
			${col3}
		</if-not-equals>
		ORDER BY
		TBL1.COL_1
	</sql-template>

	<!-- サンプル（if-null） -->
	<sql-template id="sample-if-null">
		SELECT
		TBL1.COL_1 AS COL1
		, TBL1.COL_2 AS COL2
		, TBL1.COL_3 AS COL3
		FROM
		TABLE_1 AS TBL1
		WHERE
		1 = 1
		<if-null varName="col3">
			AND TBL1.COL_3 IS NULL
		</if-null>
		ORDER BY
		TBL1.COL_1
	</sql-template>

	<!-- サンプル（if-null） -->
	<sql-template id="sample-if-not-null">
		SELECT
		TBL1.COL_1 AS COL1
		, TBL1.COL_2 AS COL2
		, TBL1.COL_3 AS COL3
		FROM
		TABLE_1 AS TBL1
		WHERE
		1 = 1
		<if-not-null varName="col3">
			AND TBL1.COL_3 = ${col3}
		</if-not-null>
		ORDER BY
		TBL1.COL_1
	</sql-template>

	<!-- サンプル（sql-ref） -->
	<sql-template id="sample-sql-ref">

		SELECT
		TBL2.COL_1 AS TBL2_COL1
		, TBL2.COL_2 AS TBL2_COL2
		, TBL2.COL_3 AS
		TBL2_COL3
		, TBL2.COL_4 AS TBL2_COL4
		, TBL1.COL_1 AS TBL1_COL1
		,
		TBL1.COL_2 AS TBL1_COL2
		, TBL1.COL_3 AS TBL1_COL3
		FROM
		TABLE_2 AS TBL2
		LEFT JOIN (
		<sql-ref refId="sample-if-not-null" />
		) AS TBL1
		ON (TBL2.COL1 = TBL1.COL1
		AND TBL2.COL2 = TBL1.COL2
		AND
		TBL2.COL3 = TBL1.COL3)
		WHERE
		1 = 1
		<if-null varName="col3">
			AND TBL2.COL_3 IS NULL
		</if-null>
		<if-not-null varName="col4">
			AND TBL2.COL_4 = ${col4}
		</if-not-null>

	</sql-template>

	<sql-template id="BEGIN">
		BEGIN
	</sql-template>

	<sql-template id="ROLLBACK">
		ROLLBACK
	</sql-template>

	<sql-template id="COMMIT">
		COMMIT
	</sql-template>

	<sql-template id="SEL_LOGIN_USER">
		SELECT
		SYS_USER_ID
		,LOGIN_CD
		,PASSWORD
		,USER_FAMILY_NM_KANJI
		,USER_FIRST_NM_KANJI
		,USER_FAMILY_NM_KANA
		,USER_FIRST_NM_KANA
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,BTOB_BILL_AUTH
		,OVERSEAS_INFO_AUTH
		FROM
		MST_USER
		WHERE
		DELETE_FLAG = '0'
		AND LOGIN_CD = ${loginCd}
		AND PASSWORD =
		${password}
	</sql-template>
	<!-- =============== Rules Start ================= -->
	<sql-template id="SEL_RULES">
		SELECT
		RULE_ID
		,RULE_NAME
		,DELETE_FLAG
		FROM
		MST_RULES
		WHERE
			DELETE_FLAG = '0'
			<if-equals value="0" varName="getListFlg"> 
			AND RULE_ID =${ruleId} 
			</if-equals>
		ORDER BY
		RULE_ID
	</sql-template>
	<sql-template id="SEL_RULES_BY_USERID">
		SELECT
		 R.RULE_ID
		, RULE_NAME
		, CASE WHEN E.SYS_USER_ID IS NULL THEN 0 ELSE 1 END AS ISVISIBLE
		FROM
		MST_RULES AS R 
		LEFT JOIN (SELECT * FROM MST_EXTRA_USER_RULE WHERE sys_user_id=${sysUserId} AND DEL_FLG = '0') AS E ON E.RULE_ID = R.RULE_ID
		WHERE R.DELETE_FLAG = '0'
		GROUP BY R.rule_id , E.sys_user_id
		ORDER BY R.RULE_ID
	</sql-template>
	<sql-template id="SEL_MST_RULE_LIST">
		SELECT
		R.RULE_LIST_ID
		,R.RULE_ID
		,R.LIST_NAME
		,R.LIST_ID
		,R.LIST_PASS
		,R.LIST_LINK
		,R.LIST_REMARKS
		,R.LIST_VISIBLE
		,R.DEL_FLG
		,R.CREATE_DATE
		,R.UPDATE_DATE
		FROM
		MST_RULES_LIST AS R
		WHERE
		R.DEL_FLG = '0'
		<if-not-equals value="0" varName="ruleId">
			AND R.RULE_ID = ${ruleId}
		</if-not-equals>
		<if-not-equals value="0" varName="ruleListId">
			AND R.RULE_LIST_ID = ${ruleListId}
		</if-not-equals>
		ORDER BY
		R.RULE_LIST_ID
	</sql-template>
	<sql-template id="SEL_MST_RULE_LIST_BY_USERID">
		SELECT
		R.RULE_LIST_ID
		,R.RULE_ID
		<!-- ,E.SYS_USER_ID -->
		,R.LIST_NAME
		,R.LIST_ID
		,R.LIST_PASS
		,R.LIST_LINK
		,R.LIST_REMARKS
		,R.LIST_VISIBLE
		,R.DEL_FLG
		,R.CREATE_DATE
		,R.UPDATE_DATE
		, CASE WHEN E.SYS_USER_ID IS NULL THEN 0 ELSE 1 END AS ISVISIBLE
		FROM
		MST_RULES_LIST AS R
		LEFT JOIN (SELECT * FROM MST_EXTRA_USER_RULE WHERE SYS_USER_ID=${sysUserId} AND DEL_FLG = '0') AS E ON E.RULE_LIST_ID = R.RULE_LIST_ID
		
		WHERE
		R.DEL_FLG = '0'
		AND R.RULE_ID = ${ruleId}
		<if-not-equals value="0" varName="ruleListId">
			AND R.RULE_LIST_ID = ${ruleListId}
		</if-not-equals>
		GROUP BY R.RULE_LIST_ID , E.SYS_USER_ID
		ORDER BY
		R.RULE_LIST_ID
	</sql-template>
	<sql-template id="DELETE_RULE_ITEM">
		UPDATE
		MST_RULES
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		WHERE
		RULE_ID = ${ruleId}
	</sql-template>
	<sql-template id="DELETE_RULE_LIST_ITEM">
		UPDATE
		MST_RULES_LIST
		SET
		DEL_FLG = '1'
		,UPDATE_DATE = current_timestamp
		WHERE
		RULE_LIST_ID = ${ruleListId}
	</sql-template>
	<sql-template id="DELETE_RULE_LIST_BY_RULEID">
		UPDATE
		MST_RULES_LIST
		SET
		DEL_FLG = '1'
		,UPDATE_DATE = current_timestamp
		WHERE
		RULE_ID = ${ruleId}
	</sql-template>
	<sql-template id="SEL_MAX_RULE_ID">
		SELECT
		COALESCE(MAX(RULE_ID),0)
		FROM
		MST_RULES
	</sql-template>
	
	<sql-template id="SEL_MAX_RULE_LIST_ID">
		SELECT
		COALESCE(MAX(RULE_LIST_ID),0)
		FROM
		MST_RULES_LIST
	</sql-template>
	
	<sql-template id="INS_RULE">
		INSERT INTO
		MST_RULES(
		RULE_ID
		,RULE_NAME
		,CREATE_DATE
		,UPDATE_DATE
		,DELETE_FLAG)
		VALUES(
		${ruleId}
		,${ruleName}
		,current_timestamp
		,current_timestamp
		,'0')
	</sql-template>
	<sql-template id="INS_RULE_LIST">
		INSERT INTO
		MST_RULES_LIST(
		RULE_ID
		,LIST_NAME
		,LIST_ID
		,LIST_PASS
		,LIST_LINK
		,LIST_REMARKS
		,CREATE_DATE
		,UPDATE_DATE
		,DEL_FLG)
		VALUES(
		${ruleId}
		,${listName}
		,${listId}
		,${listPass}
		,${listLink}
		,${listRemarks}
		,current_timestamp
		,current_timestamp
		,'0')
	</sql-template>
	
	<sql-template id="UPD_RULE">
		UPDATE
		MST_RULES
		SET
		RULE_NAME = ${ruleName}
		,UPDATE_DATE = current_timestamp
		WHERE
		RULE_ID = ${ruleID}
	</sql-template>
	<sql-template id="UPD_RULE_LIST">
		UPDATE
		MST_RULES_LIST
		SET
		LIST_NAME = ${listName}
		,LIST_ID = ${listId}
		,LIST_PASS = ${listPass}
		,LIST_REMARKS = ${listRemarks}
		,LIST_LINK = ${listLink}
		,UPDATE_DATE = current_timestamp
		WHERE
		RULE_LIST_ID = ${ruleListID}
	</sql-template>
	<sql-template id="SEL_EXTRA_RULES_BY_USERID">
		SELECT
		EXTRA_ID
		,SYS_USER_ID
		,RULE_ID
		FROM
		MST_EXTRA_USER_RULE
		WHERE
			TRUE
			<if-not-equals value="0" varName="ruleId">
				AND RULE_ID = ${ruleId}
			</if-not-equals>
			<if-not-equals value="0" varName="ruleListId">
				AND RULE_LIST_ID = ${ruleListId}
			</if-not-equals>
			<if-not-equals value="0" varName="sysUserId">
				AND SYS_USER_ID = ${sysUserId}
			</if-not-equals>
		ORDER BY
		RULE_ID
	</sql-template>
	<sql-template id="INS_EXTRA_RULE_BY_USERID">
		INSERT INTO
		MST_EXTRA_USER_RULE(
		SYS_USER_ID
		,RULE_ID
		,CREATE_DATE
		,UPDATE_DATE
		,RULE_LIST_ID
		)
		VALUES(
		${sysUserId}
		,${ruleId}
		,current_timestamp
		,current_timestamp
		,${ruleListId}
		)
	</sql-template>
	<sql-template id="DEL_EXTRA_RULE_BY_USERID">
		UPDATE
		MST_EXTRA_USER_RULE
		SET
		DEL_FLG = '1'
		WHERE
		EXTRA_ID = ${extraId}
	</sql-template>
	<sql-template id="UPD_EXTRA_RULE_BY_USERID">
		UPDATE
		MST_EXTRA_USER_RULE
		SET
		DEL_FLG = '0'
		WHERE
		EXTRA_ID = ${extraId}
	</sql-template>
	<sql-template id="UPD_MAIN_USER_RULE">
		UPDATE MST_USER SET
		BTOB_BILL_AUTH = ${btobBillAuth}
		,OVERSEAS_INFO_AUTH = ${overseasInfoAuth}
		<!-- ,ID_PASS_DEL_AUTH = ${idPassDelAuth} -->
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_USER_ID = ${sysUserId}
	</sql-template>
	<sql-template id="SEL_MASTER">
		SELECT
		MASTER_ID
		,SYS_USER_ID
		,USER_LIST_FLG
		,RULE_LIST_FLG
		,CORPORATION_LIST_FLG
		,ACCOUNT_LIST_FLG
		,CHANNEL_LIST_FLG
		,WAREHOUSE_LIST_FLG
		,MAKER_LIST_FLG
		,SET_ITEM_LIST_FLG
		,CLIENT_LIST_FLG
		,DELIVERY_LIST_FLG
		FROM
		MST_MASTER
		WHERE
			DEL_FLG = '0'
			AND SYS_USER_ID = ${sysUserId}
		
	</sql-template>
	<sql-template id="INS_MASTER_BY_USER">
		INSERT INTO
		MST_MASTER(
		SYS_USER_ID
		,USER_LIST_FLG
		,RULE_LIST_FLG
		,CORPORATION_LIST_FLG
		,ACCOUNT_LIST_FLG
		,CHANNEL_LIST_FLG
		,WAREHOUSE_LIST_FLG
		,MAKER_LIST_FLG
		,SET_ITEM_LIST_FLG
		,CLIENT_LIST_FLG
		,DELIVERY_LIST_FLG
		,DEL_FLG
		,CREATE_DATE
		,UPDATE_DATE
		)
		VALUES(
		${sysUserId}
		,${userListFlg}
		,${ruleListFlg}
		,${corporationListFlg}
		,${accountListFlg}
		,${channelListFlg}
		,${warehouseListFlg}
		,${makerListFlg}
		,${setItemListFlg}
		,${clientListFlg}
		,${deliveryListFlg}
		,'0'
		,current_timestamp
		,current_timestamp
		)
	</sql-template>
	<sql-template id="UPD_MASTER_BY_USER">
		UPDATE MST_MASTER SET
		USER_LIST_FLG = ${userListFlg}
		,RULE_LIST_FLG = ${ruleListFlg}
		,CORPORATION_LIST_FLG = ${corporationListFlg}
		,ACCOUNT_LIST_FLG = ${accountListFlg}
		,CHANNEL_LIST_FLG = ${channelListFlg}
		,WAREHOUSE_LIST_FLG = ${warehouseListFlg}
		,MAKER_LIST_FLG = ${makerListFlg}
		,SET_ITEM_LIST_FLG = ${setItemListFlg}
		,CLIENT_LIST_FLG = ${clientListFlg}
		,DELIVERY_LIST_FLG = ${deliveryListFlg}
		,UPDATE_DATE = current_timestamp
		WHERE
		SYS_USER_ID = ${sysUserId}
	</sql-template>
	
	<!-- =============== Rules End =================== -->

	<sql-template id="SEL_USER">
		SELECT
		SYS_USER_ID
		,LOGIN_CD
		,PASSWORD
		,USER_FAMILY_NM_KANJI
		,USER_FIRST_NM_KANJI
		,USER_FAMILY_NM_KANA
		,USER_FIRST_NM_KANA
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,BTOB_BILL_AUTH
		,OVERSEAS_INFO_AUTH
		,RESPONSIBLE_NO
		<!-- ,ID_PASS_DEL_AUTH -->
		FROM
		MST_USER
		WHERE
		TRUE
		<if-null varName="deleteFlgIgnore">
			AND
			DELETE_FLAG = '0'
		</if-null>
		<if-equals value="0" varName="getListFlg">
			AND SYS_USER_ID = ${sysUserId}
		</if-equals>
		ORDER BY
		SYS_USER_ID

	</sql-template>

	<sql-template id="SEL_USERNAME">
		SELECT
			SYS_USER_ID
			,USER_FAMILY_NM_KANJI
			,USER_FIRST_NM_KANJI
			,OVERSEAS_INFO_AUTH
			,RESPONSIBLE_NO
		FROM
			MST_USER
		WHERE
			SYS_USER_ID = ${sysUserId}
	</sql-template>

	<sql-template id="UPD_USER">
		UPDATE MST_USER SET
		LOGIN_CD = ${loginCd}
		,PASSWORD = ${password}
		,USER_FAMILY_NM_KANJI = ${userFamilyNmKanji}
		,USER_FIRST_NM_KANJI =
		${userFirstNmKanji}
		,USER_FAMILY_NM_KANA =
		${userFamilyNmKana}
		,USER_FIRST_NM_KANA = ${userFirstNmKana}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,RESPONSIBLE_NO = ${responsibleNo}
		WHERE
		SYS_USER_ID = ${sysUserId}
	</sql-template>

	<sql-template id="UPD_DEL_USER">
		UPDATE MST_USER SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_USER_ID = ${sysUserId}
	</sql-template>

	<sql-template id="SEL_MAX_USER_ID">
		SELECT
		COALESCE(MAX(SYS_USER_ID),0)
		FROM
		MST_USER
	</sql-template>

	<sql-template id="INS_USER">
		INSERT INTO MST_USER(
		SYS_USER_ID
		,LOGIN_CD
		,PASSWORD
		,USER_FAMILY_NM_KANJI
		,USER_FIRST_NM_KANJI
		,USER_FAMILY_NM_KANA
		,USER_FIRST_NM_KANA
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,RESPONSIBLE_NO)
		VALUES
		(${sysUserId}
		,${loginCd}
		,${password}
		,${userFamilyNmKanji}
		,${userFirstNmKanji}
		,${userFamilyNmKana}
		,${userFirstNmKana}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${responsibleNo})
	</sql-template>

	<sql-template id="SEL_CORPORATION">
		SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		,CORPORATION_FULL_NM
		,ZIP
		,ADDRESS
		,TEL_NO
		,FAX_NO
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,ABBREVIATION
		,COALESCE(CORPORATION_RATE_OVER,0) AS CORPORATION_RATE_OVER
		FROM
		MST_CORPORATION
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-null varName="sysCorporationId">
				AND SYS_CORPORATION_ID =
				${sysCorporationId}
			</if-not-null>
			<if-not-null varName="fileCorporationNm">
				AND FILE_CORPORATION_NM ILIKE
				${fileCorporationNm}
			</if-not-null>
		</if-equals>
		ORDER BY
		SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="SEL_CORPORATION_NM">
		SELECT
			CORPORATION_NM
		FROM
			MST_CORPORATION
		WHERE
			DELETE_FLAG = '0'
		AND
			SYS_CORPORATION_ID = ${sysCorporationId}
	</sql-template>

	<sql-template id="SEL_CORPORATION_ID">
		SELECT
			SYS_CORPORATION_ID
		FROM
			MST_CORPORATION
		WHERE
			DELETE_FLAG = '0'
		AND
			CORPORATION_NM = ${corporationNm}
	</sql-template>

	<sql-template id="UPD_CORPORATION">
		UPDATE MST_CORPORATION SET
		CORPORATION_NM = ${corporationNm}
		,CORPORATION_FULL_NM = ${corporationFullNm}
		,ZIP = ${zip}
		,ADDRESS =
		${address}
		,TEL_NO = ${telNo}
		,FAX_NO = ${faxNo}
		,UPDATE_DATE
		=
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,ABBREVIATION =
		${abbreviation}
		<!-- 20151229 OOYAMA 法人掛け率を追加 -->
		<if-not-equals value="0" varName="corporationRateOver">
			,CORPORATION_RATE_OVER = ${corporationRateOver}
		</if-not-equals>
		WHERE
		SYS_CORPORATION_ID = ${sysCorporationId}
	</sql-template>

	<sql-template id="UPD_DEL_CORPORATION">
		UPDATE MST_CORPORATION SET
		DELETE_FLAG
		='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CORPORATION_ID = ${sysCorporationId}
	</sql-template>

	<sql-template id="SEL_CHANNEL">
		SELECT
		SYS_CHANNEL_ID
		,CHANNEL_NM
		,URL
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_CHANNEL
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_CHANNEL_ID =
			${sysChannelId}
		</if-equals>
		ORDER BY
		SYS_CHANNEL_ID
	</sql-template>

	<sql-template id="SEL_CHANNEL_ID">
		SELECT
		SYS_CHANNEL_ID
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_CHANNEL
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="channelNm">
			AND CHANNEL_NM = ${channelNm}
		</if-not-null>
		ORDER BY
		SYS_CHANNEL_ID
	</sql-template>

	<sql-template id="UPD_CHANNEL">
		UPDATE MST_CHANNEL SET
		CHANNEL_NM =
		${channelNm}
		,URL = ${url}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CHANNEL_ID = ${sysChannelId}
	</sql-template>

	<sql-template id="UPD_DEL_CHANNEL">
		UPDATE MST_CHANNEL SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CHANNEL_ID = ${sysChannelId}
	</sql-template>

	<sql-template id="SEL_GROUP_NM">
		SELECT
		SYS_GROUP_NM_ID
		,MST_GROUP_NM.SYS_LARGE_GROUP_ID
		,MST_GROUP_NM.SYS_MIDDLE_GROUP_ID
		,MST_GROUP_NM.SYS_SMALL_GROUP_ID
		,CONCAT(LARGE_GROUP_NM, '★', MIDDLE_GROUP_NM, '★', SMALL_GROUP_NM)AS
		GROUP_NM_CONCAT
		,MST_GROUP_NM.DELETE_FLAG
		,MST_GROUP_NM.CREATE_DATE
		,MST_GROUP_NM.CREATE_USER_ID
		,MST_GROUP_NM.UPDATE_DATE
		,MST_GROUP_NM.UPDATE_USER_ID
		FROM
		MST_GROUP_NM
		INNER JOIN
		MST_LARGE_GROUP
		ON
		MST_LARGE_GROUP.SYS_LARGE_GROUP_ID = MST_GROUP_NM.SYS_LARGE_GROUP_ID
		INNER JOIN
		MST_MIDDLE_GROUP
		ON
		MST_MIDDLE_GROUP.SYS_MIDDLE_GROUP_ID =
		MST_GROUP_NM.SYS_MIDDLE_GROUP_ID
		INNER JOIN
		MST_SMALL_GROUP
		ON
		MST_SMALL_GROUP.SYS_SMALL_GROUP_ID = MST_GROUP_NM.SYS_SMALL_GROUP_ID
		WHERE
		MST_GROUP_NM.DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_GROUP_NM_ID =
			${sysGroupNmId}
		</if-equals>
		ORDER BY
		SYS_GROUP_NM_ID
	</sql-template>

	<sql-template id="UPD_GROUP_NM">
		UPDATE MST_GROUP_NM SET
		SYS_LARGE_GROUP_ID = ${sysLargeGroupId}
		,SYS_MIDDLE_GROUP_ID
		=${sysMiddleGroupId}
		,SYS_SMALL_GROUP_ID
		=${sysSmallGroupId}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_GROUP_NM_ID = ${sysGroupNmId}
	</sql-template>

	<sql-template id="UPD_DEL_GROUP_NM">
		UPDATE MST_GROUP_NM SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_GROUP_NM_ID = ${sysGroupNmId}
	</sql-template>

	<sql-template id="SEL_LARGE_GROUP">
		SELECT
		<!-- SYS_LARGE_GROUP_ID AS SYS_VARIOUS_GROUP_ID -->
		<!-- ,LARGE_GROUP_NO AS VARIOUS_GROUP_NO -->
		<!-- ,LARGE_GROUP_NM AS VARIOUS_GROUP_NM -->
		SYS_LARGE_GROUP_ID
		,LARGE_GROUP_NO
		,LARGE_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_LARGE_GROUP
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_LARGE_GROUP_ID =
			${sysLargeGroupId}
		</if-equals>
		ORDER BY
		SYS_LARGE_GROUP_ID
	</sql-template>

	<sql-template id="UPD_LARGE_GROUP">
		UPDATE MST_LARGE_GROUP SET
		<!-- LARGE_GROUP_NO =${variousGroupNo} -->
		<!-- ,LARGE_GROUP_NM =${variousGroupNm} -->
		LARGE_GROUP_NO =${largeGroupNo}
		,LARGE_GROUP_NM =${largeGroupNm}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_LARGE_GROUP_ID = ${sysLargeGroupId}
	</sql-template>

	<sql-template id="UPD_DEL_LARGE_GROUP">
		UPDATE MST_LARGE_GROUP SET
		DELETE_FLAG
		='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_LARGE_GROUP_ID = ${sysLargeGroupId}
	</sql-template>

	<sql-template id="SEL_MIDDLE_GROUP">
		SELECT
		<!-- SYS_MIDDLE_GROUP_ID AS SYS_VARIOUS_GROUP_ID -->
		<!-- ,MIDDLE_GROUP_NO AS VARIOUS_GROUP_NO -->
		<!-- ,MIDDLE_GROUP_NM AS VARIOUS_GROUP_NM -->
		SYS_MIDDLE_GROUP_ID
		,MIDDLE_GROUP_NO
		,MIDDLE_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_MIDDLE_GROUP
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_MIDDLE_GROUP_ID =
			${sysMiddleGroupId}
		</if-equals>
		ORDER BY
		SYS_MIDDLE_GROUP_ID
	</sql-template>

	<sql-template id="UPD_MIDDLE_GROUP">
		UPDATE MST_MIDDLE_GROUP SET
		MIDDLE_GROUP_NO =${middleGroupNo}
		,MIDDLE_GROUP_NM =${middleGroupNm}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MIDDLE_GROUP_ID = ${sysMiddleGroupId}
	</sql-template>

	<sql-template id="UPD_DEL_MIDDLE_GROUP">
		UPDATE MST_MIDDLE_GROUP SET
		DELETE_FLAG
		='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MIDDLE_GROUP_ID = ${sysMiddleGroupId}
	</sql-template>

	<sql-template id="SEL_SMALL_GROUP">
		SELECT
		<!-- SYS_SMALL_GROUP_ID AS SYS_VARIOUS_GROUP_ID -->
		<!-- ,SMALL_GROUP_NO AS VARIOUS_GROUP_NO -->
		<!-- ,SMALL_GROUP_NM AS VARIOUS_GROUP_NM -->
		SYS_SMALL_GROUP_ID
		,SMALL_GROUP_NO
		,SMALL_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_SMALL_GROUP
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_SMALL_GROUP_ID =
			${sysSmallGroupId}
		</if-equals>
		ORDER BY
		SYS_SMALL_GROUP_ID
	</sql-template>

	<sql-template id="UPD_SMALL_GROUP">
		UPDATE MST_SMALL_GROUP SET
		SMALL_GROUP_NO
		=${smallGroupNo}
		,SMALL_GROUP_NM
		=${smallGroupNm}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_SMALL_GROUP_ID = ${sysSmallGroupId}
	</sql-template>

	<sql-template id="UPD_DEL_SMALL_GROUP">
		UPDATE MST_SMALL_GROUP SET
		DELETE_FLAG
		='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_SMALL_GROUP_ID = ${sysSmallGroupId}
	</sql-template>

	<sql-template id="SEL_WAREHOUSE">
		SELECT
		SYS_WAREHOUSE_ID
		,WAREHOUSE_NM
		,ADDRESS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,LOGISTIC_NM
		,TELL_NO
		,ADDRESS_FST
		,ADDRESS_NXT
		,ZIP
		FROM
		MST_WAREHOUSE
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_WAREHOUSE_ID =
			${sysWarehouseId}
		</if-equals>
		ORDER BY
		SYS_WAREHOUSE_ID
	</sql-template>

	<sql-template id="SEL_EXTERNAL_WAREHOUSE">
		SELECT
		SYS_EXTERNAL_WAREHOUSE_CODE
		,WAREHOUSE_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
			EXTERNAL_WAREHOUSE
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="sysExternalWarehouseCode">
			AND SYS_EXTERNAL_WAREHOUSE_CODE =
			${sysExternalWarehouseCode}
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_WAREHOUSE_FOREIGN_SEARCH">
		SELECT
			SYS_WAREHOUSE_ID
			,STOCK_NUM
		FROM
			WAREHOUSE_STOCK
		WHERE
			DELETE_FLAG = '0'
		AND
			SYS_ITEM_ID = ${sysItemId}
		AND
			PRIORITY = '1'
	</sql-template>

	<sql-template id="UPD_WAREHOUSE">
		UPDATE MST_WAREHOUSE SET
		WAREHOUSE_NM =
		${warehouseNm}
		,ADDRESS = ${address}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,ZIP = ${zip}
		,ADDRESS_FST =
		${addressFst}
		,ADDRESS_NXT = ${addressNxt}
		,TELL_NO = ${tellNo}
		,LOGISTIC_NM = ${logisticNm}
		WHERE
		SYS_WAREHOUSE_ID = ${sysWarehouseId}
	</sql-template>

	<sql-template id="UPD_DEL_WAREHOUSE">
		UPDATE MST_WAREHOUSE SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_WAREHOUSE_ID = ${sysWarehouseId}
	</sql-template>

	<sql-template id="SEL_MAX_CORPORATION_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATION_ID),0)
		FROM
		MST_CORPORATION
	</sql-template>

	<sql-template id="SEL_MAX_CHANNEL_ID">
		SELECT
		COALESCE(MAX(SYS_CHANNEL_ID),0)
		FROM
		MST_CHANNEL
	</sql-template>

	<sql-template id="SEL_MAX_ITEM_GROUP_NAME_ID">
		SELECT
		COALESCE(MAX(SYS_GROUP_NM_ID),0)
		FROM
		MST_GROUP_NM
	</sql-template>

	<sql-template id="SEL_MAX_WAREHOUSE_ID">
		SELECT
		COALESCE(MAX(SYS_WAREHOUSE_ID),0)
		FROM
		MST_WAREHOUSE
	</sql-template>

	<sql-template id="SEL_MAX_LARGE_GROUP_ID">
		SELECT
		COALESCE(MAX(SYS_LARGE_GROUP_ID),0)
		FROM
		MST_LARGE_GROUP
	</sql-template>

	<sql-template id="SEL_MAX_MIDDLE_GROUP_ID">
		SELECT
		COALESCE(MAX(SYS_MIDDLE_GROUP_ID),0)
		FROM
		MST_MIDDLE_GROUP
	</sql-template>

	<sql-template id="SEL_MAX_SMALL_GROUP_ID">
		SELECT
		COALESCE(MAX(SYS_SMALL_GROUP_ID),0)
		FROM
		MST_SMALL_GROUP
	</sql-template>

	<sql-template id="SEL_MAX_SALES_SLIP_ID">
		SELECT
		COALESCE(MAX(SYS_SALES_SLIP_ID),0)
		FROM
		SALES_SLIP
	</sql-template>

	<sql-template id="SEL_MAX_SALES_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_SALES_ITEM_ID),0)
		FROM
		SALES_ITEM
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ITEM_PRICE_ID">
		SELECT
		COALESCE(MAX(SYS_ITEM_PRICE_ID),0)
		FROM
		ITEM_PRICE
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_ITEM_ID), 0)
		FROM
		MST_ITEM
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ITEM_COST_ID">
		SELECT
		COALESCE(MAX(SYS_ITEM_COST_ID),0)
		FROM
		ITEM_COST
	</sql-template>

	<sql-template id="SEL_MAX_SYS_WAREHOUSE_STOCK_ID">
		SELECT
		COALESCE(MAX(SYS_WAREHOUSE_STOCK_ID),0)
		FROM
		WAREHOUSE_STOCK
	</sql-template>

	<sql-template id="SEL_MAX_SYS_EXTERNAL_STOCK_ID">
		SELECT
		COALESCE(MAX(SYS_EXTERNAL_STOCK_ID),0)
		FROM
		EXTERNAL_STOCK
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ARRIVAL_SCHEDULE_ID">
		SELECT
		COALESCE(MAX(SYS_ARRIVAL_SCHEDULE_ID),0)
		FROM
		ARRIVAL_SCHEDULE
	</sql-template>

	<sql-template id="SEL_MAX_SYS_SET_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_SET_ITEM_ID),0)
		FROM
		SET_ITEM
	</sql-template>

	<sql-template id="SEL_MAX_SYS_BACK_ORDER_ID">
		SELECT
		COALESCE(MAX(SYS_BACK_ORDER_ID),0)
		FROM
		BACK_ORDER
	</sql-template>

	<sql-template id="SEL_MAX_SYS_CODE_COLLATION_ID">
		SELECT
		COALESCE(MAX(SYS_CODE_COLLATION_ID),0)
		FROM
		CODE_COLLATION
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ITEM_MANUAL_ID">
		SELECT
		COALESCE(MAX(SYS_ITEM_MANUAL_ID),
		0)
		FROM
		ITEM_MANUAL
	</sql-template>

	<sql-template id="SEL_MAX_SYS_KEEP_ID">
		SELECT
		COALESCE(MAX(SYS_KEEP_ID), 0)
		FROM
		KEEP
	</sql-template>

	<sql-template id="SEL_MAX_SYS_EXTERNAL_KEEP_ID">
		SELECT
		COALESCE(MAX(SYS_EXTERNAL_KEEP_ID), 0)
		FROM
		EXTERNAL_KEEP
	</sql-template>

	<sql-template id="SEL_MAX_SYS_DEAD_STOCK_ID">
		SELECT
		COALESCE(MAX(SYS_DEAD_STOCK_ID), 0)
		FROM
		DEAD_STOCK
	</sql-template>

	<sql-template id="SEL_MAX_SYS_BTOB_BILL_ID">
		SELECT
		COALESCE(MAX(SYS_BTOB_BILL_ID), 0)
		FROM
		BTOB_BILL
	</sql-template>


	<sql-template id="SEL_MAX_SYS_CORP_BILL_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATE_BILL_ID), 0)
		FROM
		CORPORATE_BILL
	</sql-template>

	<sql-template id="SEL_MAX_SYS_BTOB_BILL_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_BTOB_BILL_ITEM_ID), 0)
		FROM
		BTOB_BILL_ITEM
	</sql-template>

	<sql-template id="SEL_MAX_SYS_CORP_BILL_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATE_BILL_ITEM_ID), 0)
		FROM
		CORPORATE_BILL_ITEM
	</sql-template>

	<sql-template id="INS_CORPORATION">
		INSERT INTO MST_CORPORATION(
		SYS_CORPORATION_ID
		,CORPORATION_NM
		,ZIP
		,ADDRESS
		,TEL_NO
		,FAX_NO
		<!-- 20140606 AITO url不要になったため -->
		<!-- ,URL -->
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		<!-- 20151229 OOYAMA 法人掛け率を追加 -->
		<if-not-equals value="0" varName="corporationRateOver">
			,CORPORATION_RATE_OVER
		</if-not-equals>
		)
		VALUES(
		${sysCorporationId}
		,${corporationNm}
		,${zip}
		,${address}
		,${telNo}
		,${faxNo}
		<!-- 20140606 AITO url不要になったため -->
		<!-- ,${url} -->
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		<!-- 20151229 OOYAMA 法人掛け率を追加 -->
		<if-not-equals value="0" varName="corporationRateOver">
			,${corporationRateOver}
		</if-not-equals>
		)
	</sql-template>

	<sql-template id="INS_CHANNEL">
		INSERT INTO MST_CHANNEL(
		SYS_CHANNEL_ID
		,CHANNEL_NM
		,URL
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysChannelId}
		,${channelNm}
		,${url}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_GROUP_NM">
		INSERT INTO MST_GROUP_NM (
		SYS_GROUP_NM_ID
		,SYS_LARGE_GROUP_ID
		,SYS_MIDDLE_GROUP_ID
		,SYS_SMALL_GROUP_ID
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysGroupNmId}
		,${sysLargeGroupId}
		,${sysMiddleGroupId}
		,${sysSmallGroupId}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_LARGE_GROUP">
		INSERT INTO MST_LARGE_GROUP (
		SYS_LARGE_GROUP_ID
		,LARGE_GROUP_NO
		,LARGE_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysLargeGroupId}
		,${largeGroupNo}
		,${largeGroupNm}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_MIDDLE_GROUP">
		INSERT INTO MST_MIDDLE_GROUP (
		SYS_MIDDLE_GROUP_ID
		,MIDDLE_GROUP_NO
		,MIDDLE_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysMiddleGroupId}
		,${middleGroupNo}
		,${middleGroupNm}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_SMALL_GROUP">
		INSERT INTO MST_SMALL_GROUP (
		SYS_SMALL_GROUP_ID
		,SMALL_GROUP_NO
		,SMALL_GROUP_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysSmallGroupId}
		,${smallGroupNo}
		,${smallGroupNm}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>


	<sql-template id="INS_WAREHOUSE">
		INSERT INTO MST_WAREHOUSE(
		SYS_WAREHOUSE_ID
		,WAREHOUSE_NM
		,ADDRESS
		,LOGISTIC_NM
		,TELL_NO
		,ADDRESS_FST
		,ADDRESS_NXT
		,ZIP
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysWarehouseId}
		,${warehouseNm}
		,${address}
		,${logisticNm}
		,${tellNo}
		,${addressFst}
		,${addressNxt}
		,${zip}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_SET_ITEM">
		INSERT INTO SET_ITEM(
		SYS_SET_ITEM_ID,
		SYS_ITEM_ID,
		FORM_SYS_ITEM_ID,
		ITEM_NUM,
		DELETE_FLAG,
		CREATE_DATE,
		CREATE_USER_ID,
		UPDATE_DATE,
		UPDATE_USER_ID)
		VALUES(
		${sysSetItemId}
		,${sysItemId}
		,${formSysItemId}
		,${itemNum}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SEL_CHECK_SAME_LOGIN_CD">
		SELECT
		COUNT(SYS_USER_ID)
		FROM
		MST_USER
		WHERE
		DELETE_FLAG = '0'
		AND LOGIN_CD
		=${loginCd}
		<if-not-null varName="sysUserId">
			AND SYS_USER_ID != ${sysUserId}
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_MAX_IMPORT_ID">
		SELECT
		COALESCE(MAX(SYS_IMPORT_ID),0)
		FROM
		CSV_IMPORT
	</sql-template>

	<sql-template id="INS_CSV_IMPORT">
		INSERT INTO CSV_IMPORT(
		SYS_IMPORT_ID
		,SYS_CORPORATION_ID
		,DATA_DIVISION
		,ORDER_ROUTE
		,FILE_NM
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,USED_POINT
		,GET_POINT
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,SUM_CLAIM_PRICE
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_DIVISION
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_DIVISION
		,SENDER_FAMILY_NM
		,SENDER_FIRST_NM
		,SENDER_FAMILY_NM_KANA
		,SENDER_FIRST_NM_KANA
		,SENDER_ZIP
		,SENDER_PREFECTURES
		,SENDER_MUNICIPALITY
		,SENDER_ADDRESS
		,SENDER_BUILDING_NM
		,SENDER_COMPANY_NM
		,SENDER_QUARTER
		,SENDER_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,GIFT_MESSAGE
		,SLIP_DIVISION
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,CASH_ON_DELIVERY_COMMISSION
		,TEMPERATURE_DIVISION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,LAST_STATUS
		,RESERVATION_STATUS
		,COMBINE_SOURCE
		,COMBINE_POINT
		,ITEM_DIVISION
		,ITEM_CLASSIFICATION
		,SHOP_ITEM_CD
		,ITEM_NM
		,ITEM_NUM
		,PIECE_RATE
		,OPTION_SUKENEKO_ONE
		,OPTION_SUKENEKO_TWO
		,SUKENEKO_ITEM_CD
		,UNPAID_PRICE
		,INVOICE_ARTICLE
		,SLIP_MANAGEMENT_NO
		,DISPOSAL_ROUTE
		,DISPOSAL_DATE
		,OWN_COMPANY_CD
		,BUY_COUNT
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysImportId}
		,${sysCorporationId}
		,${dataDivision}
		,${orderRoute}
		,${fileNm}
		,${orderNo}
		,${orderDate}
		,${orderTime}
		,${orderFamilyNm}
		,${orderFirstNm}
		,${orderFamilyNmKana}
		,${orderFirstNmKana}
		,${orderMailAddress}
		,${orderZip}
		,${orderPrefectures}
		,${orderMunicipality}
		,${orderAddress}
		,${orderBuildingNm}
		,${orderCompanyNm}
		,${orderQuarter}
		,${orderTel}
		,${accountMethod}
		,${accountCommission}
		,${usedPoint}
		,${getPoint}
		,${orderRemarks}
		,${orderMemo}
		,${orderRemarksMemo}
		,${sumClaimPrice}
		,${menberNo}
		,${depositDate}
		,${registryStaff}
		,${destinationDivision}
		,${destinationFamilyNm}
		,${destinationFirstNm}
		,${destinationFamilyNmKana}
		,${destinationFirstNmKana}
		,${destinationZip}
		,${destinationPrefectures}
		,${destinationMunicipality}
		,${destinationAddress}
		,${destinationBuildingNm}
		,${destinationCompanyNm}
		,${destinationQuarter}
		,${destinationTel}
		,${senderDivision}
		,${senderFamilyNm}
		,${senderFirstNm}
		,${senderFamilyNmKana}
		,${senderFirstNmKana}
		,${senderZip}
		,${senderPrefectures}
		,${senderMunicipality}
		,${senderAddress}
		,${senderBuildingNm}
		,${senderCompanyNm}
		,${senderQuarter}
		,${senderTel}
		,${senderRemarks}
		,${senderMemo}
		,${giftMessage}
		,${slipDivision}
		,${invoiceClassification}
		,${slipNo}
		,${cashOnDeliveryCommission}
		,${temperatureDivision}
		,${destinationAppointDate}
		,${destinationAppointTime}
		,${shipmentPlanDate}
		,${transportCorporationSystem}
		,${slipMemo}
		,${lastStatus}
		,${reservationStatus}
		,${combineSource}
		,${combinePoint}
		,${itemDivision}
		,${itemClassification}
		,${shopItemCd}
		,${itemNm}
		,${itemNum}
		,${pieceRate}
		,${optionSukenekoOne}
		,${optionSukenekoTwo}
		,${sukenekoItemCd}
		,${unpaidPrice}
		,${invoiceArticle}
		,${slipManagementNo}
		,${disposalRoute}
		,${disposalDate}
		,${ownCompanyCd}
		,${buyCount}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SEL_CSV_IMPORT">
		SELECT
		SYS_IMPORT_ID
		,SYS_CORPORATION_ID
		,DATA_DIVISION
		,ORDER_ROUTE
		,FILE_NM
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,USED_POINT
		,GET_POINT
		,ORDER_REMARKS
		,ORDER_MEMO
		,SUM_CLAIM_PRICE
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_DIVISION
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_DIVISION
		,SENDER_FAMILY_NM
		,SENDER_FIRST_NM
		,SENDER_FAMILY_NM_KANA
		,SENDER_FIRST_NM_KANA
		,SENDER_ZIP
		,SENDER_PREFECTURES
		,SENDER_MUNICIPALITY
		,SENDER_ADDRESS
		,SENDER_BUILDING_NM
		,SENDER_COMPANY_NM
		,SENDER_QUARTER
		,SENDER_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,GIFT_MESSAGE
		,SLIP_DIVISION
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,CASH_ON_DELIVERY_COMMISSION
		,TEMPERATURE_DIVISION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,LAST_STATUS
		,RESERVATION_STATUS
		,COMBINE_SOURCE
		,COMBINE_POINT
		,ITEM_DIVISION
		,ITEM_CLASSIFICATION
		,SHOP_ITEM_CD
		,ITEM_NM
		,ITEM_NUM
		,PIECE_RATE
		,OPTION_SUKENEKO_ONE
		,OPTION_SUKENEKO_TWO
		,SUKENEKO_ITEM_CD
		,UNPAID_PRICE
		,INVOICE_ARTICLE
		,SLIP_MANAGEMENT_NO
		,DISPOSAL_ROUTE
		,DISPOSAL_DATE
		,OWN_COMPANY_CD
		,BUY_COUNT
		,DELETE_FLAG
		FROM
		CSV_IMPORT
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="fileNm">
			AND
			FILE_NM = ${fileNm}
		</if-not-null>
		<if-not-null varName="orderNo">
			AND
			ORDER_NO = ${orderNo}
		</if-not-null>

	</sql-template>

	<sql-template id="SEL_STORE_INFO">
		SELECT
		STORE.SYS_STORE_ID,
		STORE.STORE_NM,
		CORPORATION.CORPORATION_NM,
		CORPORATION.ZIP,
		CORPORATION.ADDRESS,
		CORPORATION.TEL_NO,
		STORE.STORE_MAIL_ADDRESS,
		CORPORATION.FAX_NO,
		STORE.STORE_NM_DISP_FLG,
		STORE.MAIL_DISP_FLG,
		STORE.CORPORATION_NM_DISP_FLG,
		STORE.ZIP_DISP_FLG,
		STORE.ADDRESS_DISP_FLG,
		STORE.TEL_NO_DISP_FLG,
		STORE.FAX_NO_DISP_FLG,
		CORPORATION.NAME_HEADER_DISP_FLG

		FROM MST_STORE AS STORE

		INNER JOIN
		MST_CORPORATION AS CORPORATION ON

		STORE.SYS_CORPORATION_ID =
		CORPORATION.SYS_CORPORATION_ID

		INNER JOIN
		MST_CHANNEL AS CHANNEL ON

		STORE.SYS_CHANNEL_ID = CHANNEL.SYS_CHANNEL_ID

		WHERE
		STORE.SYS_CORPORATION_ID =${sysCorporationId}
		AND STORE.SYS_CHANNEL_ID
		=${sysChannelId}

	</sql-template>

	<sql-template id="INS_KEEP_CSV_IMPORT">
		INSERT INTO KEEP_CSV_IMPORT(
		SYS_KEEP_IMPORT_ID
		,SYS_CORPORATION_ID
		,DATA_DIVISION
		,ORDER_ROUTE
		,FILE_NM
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,USED_POINT
		,GET_POINT
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,SUM_CLAIM_PRICE
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_DIVISION
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_DIVISION
		,SENDER_FAMILY_NM
		,SENDER_FIRST_NM
		,SENDER_FAMILY_NM_KANA
		,SENDER_FIRST_NM_KANA
		,SENDER_ZIP
		,SENDER_PREFECTURES
		,SENDER_MUNICIPALITY
		,SENDER_ADDRESS
		,SENDER_BUILDING_NM
		,SENDER_COMPANY_NM
		,SENDER_QUARTER
		,SENDER_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,GIFT_MESSAGE
		,SLIP_DIVISION
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,CASH_ON_DELIVERY_COMMISSION
		,TEMPERATURE_DIVISION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,LAST_STATUS
		,RESERVATION_STATUS
		,COMBINE_SOURCE
		,COMBINE_POINT
		,ITEM_DIVISION
		,ITEM_CLASSIFICATION
		,SHOP_ITEM_CD
		,ITEM_NM
		,ITEM_NUM
		,PIECE_RATE
		,OPTION_SUKENEKO_ONE
		,OPTION_SUKENEKO_TWO
		,SUKENEKO_ITEM_CD
		,UNPAID_PRICE
		,INVOICE_ARTICLE
		,SLIP_MANAGEMENT_NO
		,DISPOSAL_ROUTE
		,DISPOSAL_DATE
		,OWN_COMPANY_CD
		,BUY_COUNT
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysImportId}
		,${sysCorporationId}
		,${dataDivision}
		,${orderRoute}
		,${fileNm}
		,${orderNo}
		,${orderDate}
		,${orderTime}
		,${orderFamilyNm}
		,${orderFirstNm}
		,${orderFamilyNmKana}
		,${orderFirstNmKana}
		,${orderMailAddress}
		,${orderZip}
		,${orderPrefectures}
		,${orderMunicipality}
		,${orderAddress}
		,${orderBuildingNm}
		,${orderCompanyNm}
		,${orderQuarter}
		,${orderTel}
		,${accountMethod}
		,${accountCommission}
		,${usedPoint}
		,${getPoint}
		,${orderRemarks}
		,${orderMemo}
		,${orderRemarksMemo}
		,${sumClaimPrice}
		,${menberNo}
		,${depositDate}
		,${registryStaff}
		,${destinationDivision}
		,${destinationFamilyNm}
		,${destinationFirstNm}
		,${destinationFamilyNmKana}
		,${destinationFirstNmKana}
		,${destinationZip}
		,${destinationPrefectures}
		,${destinationMunicipality}
		,${destinationAddress}
		,${destinationBuildingNm}
		,${destinationCompanyNm}
		,${destinationQuarter}
		,${destinationTel}
		,${senderDivision}
		,${senderFamilyNm}
		,${senderFirstNm}
		,${senderFamilyNmKana}
		,${senderFirstNmKana}
		,${senderZip}
		,${senderPrefectures}
		,${senderMunicipality}
		,${senderAddress}
		,${senderBuildingNm}
		,${senderCompanyNm}
		,${senderQuarter}
		,${senderTel}
		,${senderRemarks}
		,${senderMemo}
		,${giftMessage}
		,${slipDivision}
		,${invoiceClassification}
		,${slipNo}
		,${cashOnDeliveryCommission}
		,${temperatureDivision}
		,${destinationAppointDate}
		,${destinationAppointTime}
		,${shipmentPlanDate}
		,${transportCorporationSystem}
		,${slipMemo}
		,${lastStatus}
		,${reservationStatus}
		,${combineSource}
		,${combinePoint}
		,${itemDivision}
		,${itemClassification}
		,${shopItemCd}
		,${itemNm}
		,${itemNum}
		,${pieceRate}
		,${optionSukenekoOne}
		,${optionSukenekoTwo}
		,${sukenekoItemCd}
		,${unpaidPrice}
		,${invoiceArticle}
		,${slipManagementNo}
		,${disposalRoute}
		,${disposalDate}
		,${ownCompanyCd}
		,${buyCount}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SEL_KEEP_CSV_IMPORT">
		SELECT
		SYS_KEEP_IMPORT_ID
		,SYS_CORPORATION_ID
		,DATA_DIVISION
		,ORDER_ROUTE
		,FILE_NM
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,USED_POINT
		,GET_POINT
		,ORDER_REMARKS
		,ORDER_MEMO
		,SUM_CLAIM_PRICE
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_DIVISION
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_DIVISION
		,SENDER_FAMILY_NM
		,SENDER_FIRST_NM
		,SENDER_FAMILY_NM_KANA
		,SENDER_FIRST_NM_KANA
		,SENDER_ZIP
		,SENDER_PREFECTURES
		,SENDER_MUNICIPALITY
		,SENDER_ADDRESS
		,SENDER_BUILDING_NM
		,SENDER_COMPANY_NM
		,SENDER_QUARTER
		,SENDER_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,GIFT_MESSAGE
		,SLIP_DIVISION
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,CASH_ON_DELIVERY_COMMISSION
		,TEMPERATURE_DIVISION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,LAST_STATUS
		,RESERVATION_STATUS
		,COMBINE_SOURCE
		,COMBINE_POINT
		,ITEM_DIVISION
		,ITEM_CLASSIFICATION
		,SHOP_ITEM_CD
		,ITEM_NM
		,ITEM_NUM
		,PIECE_RATE
		,OPTION_SUKENEKO_ONE
		,OPTION_SUKENEKO_TWO
		,SUKENEKO_ITEM_CD
		,UNPAID_PRICE
		,INVOICE_ARTICLE
		,SLIP_MANAGEMENT_NO
		,DISPOSAL_ROUTE
		,DISPOSAL_DATE
		,OWN_COMPANY_CD
		,BUY_COUNT
		,DELETE_FLAG
		FROM
		KEEP_CSV_IMPORT
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="fileNm">
			AND
			FILE_NM = ${fileNm}
		</if-not-null>
		<if-not-null varName="orderNo">
			AND
			ORDER_NO = ${orderNo}
		</if-not-null>

	</sql-template>

	<sql-template id="SEL_KEEP_CSV_UPDATEDATE">
	SELECT
		TO_CHAR(UPDATE_DATE, 'yyyy/mm/dd')
	FROM
		KEEP_CSV_IMPORT
	WHERE
		SYS_KEEP_IMPORT_ID = ${sysImportId}
	</sql-template>

	<!-- ============================================売上============================================== -->

	<sql-template id="INS_SALES_SLIP">
		INSERT INTO SALES_SLIP(
		SYS_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		,SYS_CHANNEL_ID
		,SYS_STORE_ID
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,USED_POINT
		,GET_POINT
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,CASH_ON_DELIVERY_COMMISSION
		,STATUS
		,POSTAGE
		,COD_COMMISSION
		,CONSUMPTION_TAX
		,DISCOMMONDITY
		,GIFT
		,DISPOSAL_ROUTE
		<!-- 20140317追加 伊東敦史 -->
		,SUM_PIECE_RATE
		,SUM_CLAIM_PRICE
		,DELIVERY_REMARKS
		,BUY_COUNT
		,TAX_CLASS
		,TAX_RATE
		,TAX
		<!-- ,PICKING_LIST_FLG -->
		<!-- ,LEAVING_FLG -->
		,RETURN_FLG
		<!-- 20140317追加 伊東敦史 -->
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES (
		${sysSalesSlipId}
		,${sysCorporationId}
		,${sysChannelId}
		,${sysStoreId}
		,${orderNo}
		,${orderDate}
		,${orderTime}
		,${orderFamilyNm}
		,${orderFirstNm}
		,${orderFamilyNmKana}
		,${orderFirstNmKana}
		,${orderMailAddress}
		,${orderZip}
		,${orderPrefectures}
		,${orderMunicipality}
		,${orderAddress}
		,${orderBuildingNm}
		,${orderCompanyNm}
		,${orderQuarter}
		,${orderTel}
		,${accountMethod}
		,${accountCommission}
		,${orderRemarks}
		,${orderMemo}
		,${orderRemarksMemo}
		,${usedPoint}
		,${getPoint}
		,${menberNo}
		,${depositDate}
		,${registryStaff}
		,${destinationFamilyNm}
		,${destinationFirstNm}
		,${destinationFamilyNmKana}
		,${destinationFirstNmKana}
		,${destinationZip}
		,${destinationPrefectures}
		,${destinationMunicipality}
		,${destinationAddress}
		,${destinationBuildingNm}
		,${destinationCompanyNm}
		,${destinationQuarter}
		,${destinationTel}
		,${senderRemarks}
		,${senderMemo}
		,${invoiceClassification}
		,${slipNo}
		,${destinationAppointDate}
		,${destinationAppointTime}
		,${shipmentPlanDate}
		,${transportCorporationSystem}
		,${slipMemo}
		,${cashOnDeliveryCommission}
		,${status}
		,${postage}
		,${codCommission}
		,${consumptionTax}
		,${discommondity}
		,${gift}
		,${disposalRoute}
		<!-- 20140317追加 伊東敦史 -->
		,${sumPieceRate}
		,${sumClaimPrice}
		,${deliveryRemarks}
		,${buyCount}
		,${taxClass}
		,${taxRate}
		,${tax}
		<!-- ,${pickingListFlg} -->
		<!-- ,${leavingFlg} -->
		,'0'
		<!-- 20140317追加 伊東敦史 -->
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SALES_SLIP_ORDER_NO">
		SELECT
			ORDER_NO
		FROM
			SALES_SLIP
		WHERE
			ORDER_NO = ${orderNo}
		AND	ORDER_NO != ${originOrderNo}
	</sql-template>

	<sql-template id="INS_SALES_ITEM">
		INSERT INTO SALES_ITEM (
		SYS_SALES_ITEM_ID
		,SYS_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,KIND_COST
		,LIST_PRICE
		,ITEM_RATE_OVER
		,RSL_LEAVE_FLAG)
		VALUES (
		${sysSalesItemId}
		,${sysSalesSlipId}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,${cost}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${kindCost}
		,${listPrice}
		,${itemRateOver}
		,${rslLeaveFlag})
	</sql-template>

	<sql-template id="UPD_SALES_SLIP">
		UPDATE SALES_SLIP SET
		SYS_CORPORATION_ID = ${sysCorporationId}
		,SYS_CHANNEL_ID = ${sysChannelId}
		,SYS_STORE_ID = ${sysStoreId}
		,ORDER_NO = ${orderNo}
		,ORDER_DATE = ${orderDate}
		,ORDER_TIME =
		${orderTime}
		,ORDER_FAMILY_NM = ${orderFamilyNm}
		,ORDER_FIRST_NM =
		${orderFirstNm}
		,ORDER_FAMILY_NM_KANA = ${orderFamilyNmKana}
		,ORDER_FIRST_NM_KANA = ${orderFirstNmKana}
		,ORDER_MAIL_ADDRESS =
		${orderMailAddress}
		,ORDER_ZIP = ${orderZip}
		,ORDER_PREFECTURES =
		${orderPrefectures}
		,ORDER_MUNICIPALITY = ${orderMunicipality}
		,ORDER_ADDRESS = ${orderAddress}
		,ORDER_BUILDING_NM =
		${orderBuildingNm}
		,ORDER_COMPANY_NM = ${orderCompanyNm}
		,ORDER_QUARTER
		= ${orderQuarter}
		,ORDER_TEL = ${orderTel}
		,ACCOUNT_METHOD =
		${accountMethod}
		,ACCOUNT_COMMISSION = ${accountCommission}
		,ORDER_REMARKS = ${orderRemarks}
		,ORDER_MEMO = ${orderMemo}
		,ORDER_REMARKS_MEMO = ${orderRemarksMemo}
		,USED_POINT
		= ${usedPoint}
		,GET_POINT = ${getPoint}
		,MENBER_NO = ${menberNo}
		,DEPOSIT_DATE =
		${depositDate}
		,REGISTRY_STAFF = ${registryStaff}
		,DESTINATION_FAMILY_NM = ${destinationFamilyNm}
		,DESTINATION_FIRST_NM =
		${destinationFirstNm}
		,DESTINATION_FAMILY_NM_KANA =
		${destinationFamilyNmKana}
		,DESTINATION_FIRST_NM_KANA =
		${destinationFirstNmKana}
		,DESTINATION_ZIP = ${destinationZip}
		,DESTINATION_PREFECTURES = ${destinationPrefectures}
		,DESTINATION_MUNICIPALITY = ${destinationMunicipality}
		,DESTINATION_ADDRESS = ${destinationAddress}
		,DESTINATION_BUILDING_NM =
		${destinationBuildingNm}
		,DESTINATION_COMPANY_NM =
		${destinationCompanyNm}
		,DESTINATION_QUARTER = ${destinationQuarter}
		,DESTINATION_TEL = ${destinationTel}
		,SENDER_REMARKS = ${senderRemarks}
		,SENDER_MEMO = ${senderMemo}
		,INVOICE_CLASSIFICATION =
		${invoiceClassification}
		,SLIP_NO = ${slipNo}
		,CASH_ON_DELIVERY_COMMISSION = ${cashOnDeliveryCommission}
		,DESTINATION_APPOINT_DATE = ${destinationAppointDate}
		,DESTINATION_APPOINT_TIME = ${destinationAppointTime}
		,SHIPMENT_PLAN_DATE = ${shipmentPlanDate}
		,TRANSPORT_CORPORATION_SYSTEM = ${transportCorporationSystem}
		,SLIP_MEMO = ${slipMemo}
		,STATUS = ${status}
		,POSTAGE = ${postage}
		,COD_COMMISSION = ${codCommission}
		,CONSUMPTION_TAX = ${consumptionTax}
		,DISCOMMONDITY = ${discommondity}
		,GIFT = ${gift}
		,DISPOSAL_ROUTE =
		${disposalRoute}
		<!-- 20140319追加伊東 -->
		,SUM_PIECE_RATE = ${sumPieceRate}
		,SUM_CLAIM_PRICE = ${sumClaimPrice}
		,DELIVERY_REMARKS = ${deliveryRemarks}
		,BUY_COUNT = ${buyCount}
		,TAX_CLASS = ${taxClass}
		,TAX = ${tax}
		<!-- 20140323 伊東敦史 コメントアウト 現段階では消費税はインサート時に受注日付で自動判定 -->
		<!-- 20140325 伊東敦史 コメントアウト除去 伝票修正で消費税が変更された場合に必要 -->
		,TAX_RATE = ${taxRate}
		<!-- 20140319追加伊東 -->
		<if-not-empty varName="pickingListFlg">
			,PICKING_LIST_FLG =
			${pickingListFlg}
		</if-not-empty>
		<!-- ,PICKING_FLG = ${pickingFlg} -->
		<if-not-empty varName="leavingFlg">
			,LEAVING_FLG = ${leavingFlg}
		</if-not-empty>
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<!-- 20140521 Takakuwa 出荷日追加に対応 -->
		,SHIPMENT_DATE = ${shipmentDate}
		WHERE
		SYS_SALES_SLIP_ID =
		${sysSalesSlipId}
	</sql-template>
	<sql-template id="UPD_SALES_SLIP_POSTAGE">
		UPDATE SALES_SLIP SET
		POSTAGE = ${postage}
		WHERE
		SYS_SALES_SLIP_ID =
		${sysSalesSlipId}
	</sql-template>

	<sql-template id="UPD_SALES_ITEM">
		UPDATE SALES_ITEM SET
		ORDER_NUM =
		${orderNum}
		,ITEM_CODE = ${itemCode}
		,PIECE_RATE = ${pieceRate}
		,COST =
		${cost}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_SALES_ITEM_ID = ${sysSalesItemId}
	</sql-template>

	<sql-template id="UPD_SALES_ITEM_PARTS">
		UPDATE SALES_ITEM SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_SALES_ITEM_ID = ${sysSalesItemId}
	</sql-template>

	<sql-template id="UPD_SALES_SLIP_FLG">
		UPDATE SALES_SLIP SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="pickingListFlg">
			,PICKING_LIST_FLG =
			${pickingListFlg}
		</if-not-empty>
		<!-- <if-not-empty varName="pickingFlg"> -->
		<!-- ,PICKING_FLG = ${pickingFlg} -->
		<!-- </if-not-empty> -->
		<if-not-empty varName="leavingFlg">
			,LEAVING_FLG = ${leavingFlg}
		</if-not-empty>
		<if-not-empty varName="returnFlg">
			,RETURN_FLG = ${returnFlg}
		</if-not-empty>
		<if-not-null varName="deliveryRemarks">
			,DELIVERY_REMARKS =
			${deliveryRemarks}
		</if-not-null>
		<!-- 20140521 Takakuwa 出庫時に出荷日を更新 -->
		,SHIPMENT_DATE = ${shipmentDate}
		WHERE
		SYS_SALES_SLIP_ID =
		${sysSalesSlipId}
	</sql-template>

	<sql-template id="UPD_SALES_SLIP_PARTS">
		UPDATE SALES_SLIP SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="slipNo">
			,SLIP_NO = ${slipNo}
		</if-not-empty>
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_SALES_SLIP_ID = ${sysSalesSlipId}
	</sql-template>

	<sql-template id="SEL_SALES_SLIP">
		SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.SYS_CHANNEL_ID
		,SLIP.SYS_STORE_ID
		,SLIP.ORDER_NO
		,SLIP.ORDER_DATE
		,SLIP.ORDER_TIME
		,SLIP.ORDER_FAMILY_NM
		,SLIP.ORDER_FIRST_NM
		,SLIP.ORDER_FAMILY_NM_KANA
		,SLIP.ORDER_FIRST_NM_KANA
		,SLIP.ORDER_MAIL_ADDRESS
		,SLIP.ORDER_ZIP
		,SLIP.ORDER_PREFECTURES
		,SLIP.ORDER_MUNICIPALITY
		,SLIP.ORDER_ADDRESS
		,SLIP.ORDER_BUILDING_NM
		,SLIP.ORDER_COMPANY_NM
		,SLIP.ORDER_QUARTER
		,SLIP.ORDER_TEL
		,SLIP.ACCOUNT_METHOD
		,SLIP.ACCOUNT_COMMISSION
		,SLIP.ORDER_REMARKS
		,SLIP.ORDER_MEMO
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.MENBER_NO
		,SLIP.DEPOSIT_DATE
		,SLIP.REGISTRY_STAFF
		,SLIP.DESTINATION_FAMILY_NM
		,SLIP.DESTINATION_FIRST_NM
		,SLIP.DESTINATION_FAMILY_NM_KANA
		,SLIP.DESTINATION_FIRST_NM_KANA
		,SLIP.DESTINATION_ZIP
		,SLIP.DESTINATION_PREFECTURES
		,SLIP.DESTINATION_MUNICIPALITY
		,SLIP.DESTINATION_ADDRESS
		,SLIP.DESTINATION_BUILDING_NM
		,SLIP.DESTINATION_COMPANY_NM
		,SLIP.DESTINATION_QUARTER
		,SLIP.DESTINATION_TEL
		,SLIP.SENDER_REMARKS
		,SLIP.SENDER_MEMO
		,COALESCE(SLIP.ORDER_REMARKS_MEMO, '') AS ORDER_REMARKS_MEMO
		,SLIP.INVOICE_CLASSIFICATION
		,SLIP.SLIP_NO
		,SLIP.DESTINATION_APPOINT_DATE
		,SLIP.DESTINATION_APPOINT_TIME
		,SLIP.SHIPMENT_PLAN_DATE
		,SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SLIP.SLIP_MEMO
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.STATUS
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		<!-- ,S_ITEM.ITEM_SUM_PRICE + (SLIP.POSTAGE + SLIP.COD_COMMISSION + SLIP.CONSUMPTION_TAX
			+ SLIP.DISCOMMONDITY + SLIP.GIFT) AS SUM_CLAIM_PRICE -->
		<!-- ,S_ITEM.ITEM_SUM_PRICE AS SUM_PIECE_RATE -->
		,SLIP.DISPOSAL_ROUTE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.SUM_PIECE_RATE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.PICKING_LIST_FLG
		<!-- ,SLIP.PICKING_FLG -->
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		<!-- 20141120 追加 齋藤克浩 -->
		,SLIP.UPDATE_DATE
		,SLIP.UPDATE_USER_ID
		<!-- 20140521 Takakuwa 出荷日追加 -->
		,SLIP.SHIPMENT_DATE
		FROM
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.SYS_CHANNEL_ID
		,SLIP.SYS_STORE_ID
		,SLIP.ORDER_NO
		,SLIP.ORDER_DATE
		,SLIP.ORDER_TIME
		,SLIP.ORDER_FAMILY_NM
		,SLIP.ORDER_FIRST_NM
		,SLIP.ORDER_FAMILY_NM_KANA
		,SLIP.ORDER_FIRST_NM_KANA
		,SLIP.ORDER_MAIL_ADDRESS
		,SLIP.ORDER_ZIP
		,SLIP.ORDER_PREFECTURES
		,SLIP.ORDER_MUNICIPALITY
		,SLIP.ORDER_ADDRESS
		,SLIP.ORDER_BUILDING_NM
		,SLIP.ORDER_COMPANY_NM
		,SLIP.ORDER_QUARTER
		,SLIP.ORDER_TEL
		,SLIP.ACCOUNT_METHOD
		,SLIP.ACCOUNT_COMMISSION
		,SLIP.ORDER_REMARKS
		,SLIP.ORDER_MEMO
		,SLIP.ORDER_REMARKS_MEMO
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.MENBER_NO
		,SLIP.DEPOSIT_DATE
		,SLIP.REGISTRY_STAFF
		,SLIP.DESTINATION_FAMILY_NM
		,SLIP.DESTINATION_FIRST_NM
		,SLIP.DESTINATION_FAMILY_NM_KANA
		,SLIP.DESTINATION_FIRST_NM_KANA
		,SLIP.DESTINATION_ZIP
		,SLIP.DESTINATION_PREFECTURES
		,SLIP.DESTINATION_MUNICIPALITY
		,SLIP.DESTINATION_ADDRESS
		,SLIP.DESTINATION_BUILDING_NM
		,SLIP.DESTINATION_COMPANY_NM
		,SLIP.DESTINATION_QUARTER
		,SLIP.DESTINATION_TEL
		,SLIP.SENDER_REMARKS
		,SLIP.SENDER_MEMO
		,SLIP.INVOICE_CLASSIFICATION
		,SLIP.SLIP_NO
		,SLIP.DESTINATION_APPOINT_DATE
		,SLIP.DESTINATION_APPOINT_TIME
		,SLIP.SHIPMENT_PLAN_DATE
		,SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SLIP.SLIP_MEMO
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.STATUS
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		,SLIP.DISPOSAL_ROUTE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.SUM_PIECE_RATE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.PICKING_LIST_FLG
		<!-- ,SLIP.PICKING_FLG -->
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		<!-- 20141120 追加 齋藤克浩 -->
		,SLIP.UPDATE_DATE
		,SLIP.UPDATE_USER_ID
		<!-- 20140521 Takakuwa 出荷日追加 -->
		,SLIP.SHIPMENT_DATE
		FROM
		SALES_SLIP AS SLIP
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="orderNo">
			AND
			ORDER_NO ILIKE ${orderNo}
		</if-not-empty>
		<if-not-equals value="0" varName="sysSalesSlipId">
			AND
			SYS_SALES_SLIP_ID =
			${sysSalesSlipId}
		</if-not-equals>
		)AS SLIP
		<!--  2021 NSG 不要なので除去
		INNER JOIN
		(SELECT
		SYS_SALES_SLIP_ID
		,SUM(PIECE_RATE * ORDER_NUM) AS ITEM_SUM_PRICE
		FROM
		SALES_ITEM AS S_ITEM
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		FROM
		MST_ITEM
		WHERE
		1 = 1)AS M_ITEM
		ON
		M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		GROUP BY
		SYS_SALES_SLIP_ID
		)AS S_ITEM
		ON
		S_ITEM.SYS_SALES_SLIP_ID = SLIP.SYS_SALES_SLIP_ID
		-->
	</sql-template>

	<!-- 売上一覧 -->
	<sql-template id="SEL_SEARCH_SALES_SLIP">
		SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.SYS_STORE_ID
		,SLIP.ORDER_NO
		,SLIP.ORDER_DATE
		,SLIP.ORDER_TIME

		,(SLIP.ORDER_DATE || SLIP.ORDER_TIME)AS SORT_ORDER_DATE

		,SLIP.ORDER_FAMILY_NM
		,SLIP.ORDER_FIRST_NM
		,SLIP.ORDER_FAMILY_NM_KANA
		,SLIP.ORDER_FIRST_NM_KANA
		,(SLIP.ORDER_FAMILY_NM || ' ' ||
		SLIP.ORDER_FIRST_NM)AS ORDER_FULL_NM
		,(SLIP.ORDER_FAMILY_NM_KANA || ' '
		|| SLIP.ORDER_FIRST_NM_KANA)AS ORDER_FULL_NM_KANA
		,SLIP.ORDER_MAIL_ADDRESS
		,SLIP.ORDER_ZIP
		,SLIP.ORDER_PREFECTURES
		,SLIP.ORDER_MUNICIPALITY
		,SLIP.ORDER_ADDRESS
		,SLIP.ORDER_BUILDING_NM
		,SLIP.ORDER_COMPANY_NM
		,SLIP.ORDER_QUARTER
		,SLIP.ORDER_TEL
		,SLIP.ACCOUNT_METHOD
		,SLIP.ACCOUNT_COMMISSION
		,SLIP.ORDER_REMARKS
		,SLIP.ORDER_MEMO
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.MENBER_NO
		,SLIP.DEPOSIT_DATE
		,SLIP.REGISTRY_STAFF
		,SLIP.DESTINATION_FAMILY_NM
		,SLIP.DESTINATION_FIRST_NM
		,SLIP.DESTINATION_FAMILY_NM_KANA
		,SLIP.DESTINATION_FIRST_NM_KANA
		,(SLIP.DESTINATION_FAMILY_NM || ' ' ||
		SLIP.DESTINATION_FIRST_NM)AS DESTINATION_FULL_NM
		,(SLIP.DESTINATION_FAMILY_NM_KANA || ' ' ||
		SLIP.DESTINATION_FIRST_NM_KANA)AS DESTINATION_FULL_NM_KANA
		,SLIP.DESTINATION_ZIP
		,SLIP.DESTINATION_PREFECTURES
		,SLIP.DESTINATION_MUNICIPALITY
		,SLIP.DESTINATION_ADDRESS
		,SLIP.DESTINATION_BUILDING_NM
		,SLIP.DESTINATION_COMPANY_NM
		,SLIP.DESTINATION_QUARTER
		,SLIP.DESTINATION_TEL
		,SLIP.SENDER_MEMO
		,SLIP.ORDER_REMARKS
		,COALESCE(SLIP.ORDER_REMARKS_MEMO, '') AS
		ORDER_REMARKS_MEMO
		,SLIP.ORDER_REMARKS
		,SLIP.SENDER_REMARKS
		,SLIP.INVOICE_CLASSIFICATION
		,SLIP.SLIP_NO
		,SLIP.DESTINATION_APPOINT_DATE
		,SLIP.DESTINATION_APPOINT_TIME
		,SLIP.SHIPMENT_PLAN_DATE
		,SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SLIP.SLIP_MEMO
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.STATUS
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT

		<!-- 20140317コメントアウト 伊東敦史 start -->
		<!-- 前まで請求金額を計算していたのをカラムとしてした -->
		<!-- ,S_ITEM.ITEM_SUM_PRICE + (SLIP.POSTAGE + SLIP.COD_COMMISSION + SLIP.CONSUMPTION_TAX
			+ SLIP.DISCOMMONDITY + SLIP.GIFT) AS SUM_CLAIM_PRICE -->
		<!-- 20140317コメントアウト 伊東敦史 end -->
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.SUM_PIECE_RATE
		<!-- 一覧の合計用 -->
		,CASE
		<!-- 内税の場合税抜きにする -->
		WHEN TAX_CLASS = '1' THEN SUM_PIECE_RATE - TAX
		WHEN TAX_CLASS = '2' THEN SUM_PIECE_RATE
		END AS NO_TAX_SUM_PIECE_RATE

		,CASE
		WHEN TAX_CLASS = '1' THEN SUM_PIECE_RATE
		<!-- 外税の場合税込にする -->
		WHEN TAX_CLASS = '2' THEN SUM_PIECE_RATE + TAX
		END AS
		IN_TAX_SUM_PIECE_RATE
		<!-- 一覧の合計用 -->
		,SLIP.DISPOSAL_ROUTE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.PICKING_LIST_FLG
		<!-- ,SLIP.PICKING_FLG -->
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,SLIP.CHANNEL_NM
		,SLIP.CORPORATION_NM
		<!-- 20140323 追加 伊東敦史 START -->
		<!-- マスタ以外の商品数カウンター -->
		,COALESCE(S_ITEM.NOT_MST_ITEM_COUNT, 0)AS NOT_ITEM_COUNT
		<!-- 20140323 追加 伊東敦史 END -->
		<!-- 20140521 Takakuwa 出荷日を追加 -->
		,SLIP.SHIPMENT_DATE
		FROM
		(SELECT
		SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SYS_STORE_ID
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,USED_POINT
		,GET_POINT
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,CASH_ON_DELIVERY_COMMISSION
		,STATUS
		,POSTAGE
		,COD_COMMISSION
		,CONSUMPTION_TAX
		,DISCOMMONDITY
		,GIFT
		,DISPOSAL_ROUTE
		<!-- 20140317追加 伊東敦史 -->
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		<!-- 20140317追加 伊東敦史 -->
		,PICKING_LIST_FLG
		<!-- ,PICKING_FLG -->
		,LEAVING_FLG
		,RETURN_FLG
		,DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,CHANNEL.CHANNEL_NM
		,CORPORATION.CORPORATION_NM
		<!-- 20140521 Takakuwa 出荷日を追加 -->
		,SLIP.SHIPMENT_DATE
		FROM
		SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CHANNEL_ID
		,CHANNEL_NM
		FROM
		MST_CHANNEL
		WHERE
		1 = 1
		<!-- <if-not-equals value="0" varName="sysChannelId"> -->
		<!-- AND -->
		<!-- SYS_CHANNEL_ID = ${sysChannelId} -->
		<!-- </if-not-equals> -->
		)CHANNEL
		ON
		CHANNEL.SYS_CHANNEL_ID = SLIP.SYS_CHANNEL_ID
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		)AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID =
		SLIP.SYS_CORPORATION_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysSalesSlipId">
				AND
				SYS_SALES_SLIP_ID =
				${sysSalesSlipId}
			</if-not-equals>
		</if-equals>

		<if-equals value="1" varName="getListFlg">
			<!-- <sql-ref refId="SEARCH_SALES_SLIP_WHERE_SQL_REF"/> -->

			<if-not-null varName="sysCorporationId">
				<if-not-equals value="0" varName="sysCorporationId">
					AND
					SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				</if-not-equals>
			</if-not-null>

			<if-not-equals value="0" varName="sysChannelId">
				AND
				SLIP.SYS_CHANNEL_ID = ${sysChannelId}
			</if-not-equals>

			<if-not-empty varName="orderDateFrom">
				AND
				ORDER_DATE &gt;=
				${orderDateFrom}
			</if-not-empty>
			<if-not-empty varName="orderDateTo">
				AND
				ORDER_DATE &lt;= ${orderDateTo}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateFrom">
				AND
				SHIPMENT_PLAN_DATE &gt;=
				${shipmentPlanDateFrom}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateTo">
				AND
				SHIPMENT_PLAN_DATE &lt;=
				${shipmentPlanDateTo}
			</if-not-empty>
			<if-not-empty varName="orderNo">
				AND
				ORDER_NO ILIKE ${orderNo}
			</if-not-empty>
			<if-not-empty varName="slipNo">
				AND
				SLIP_NO ILIKE ${slipNo}
			</if-not-empty>

			<!-- 20140405 八鍬 -->
			<if-equals value="1" varName="slipNoExist">
				AND
				SLIP_NO IS NOT NULL
				AND
				SLIP_NO != ''
				<if-equals value="0" varName="slipNoHyphen">
					AND
					SLIP_NO != '-'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoHyphen">
				<if-equals value="0" varName="slipNoExist">
					AND
					SLIP_NO LIKE '-%'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoNone">
				AND
				(SLIP_NO IS NULL OR SLIP_NO
				= '')
			</if-equals>
			<!-- ここまで -->

			<if-not-empty varName="orderNm">
				AND
				((SLIP.ORDER_FAMILY_NM ||
				SLIP.ORDER_FIRST_NM) ILIKE ${orderNm}
				OR (SLIP.ORDER_FAMILY_NM_KANA
				|| SLIP.ORDER_FIRST_NM_KANA) ILIKE
				${orderNm})
			</if-not-empty>

			<if-not-empty varName="invoiceClassification">
				AND
				INVOICE_CLASSIFICATION =
				${invoiceClassification}
			</if-not-empty>

			<if-not-empty varName="orderTel">
				AND
				ORDER_TEL ILIKE ${orderTel}
			</if-not-empty>

			<!-- <if-not-empty varName="itemNm"> -->
			<!-- AND -->
			<!-- ITEM_NM ILIKE ${itemNm} -->
			<!-- </if-not-empty> -->

			<if-not-empty varName="destinationNm">
				AND
				((SLIP.DESTINATION_FAMILY_NM ||
				SLIP.DESTINATION_FIRST_NM) ILIKE
				${destinationNm}
				OR
				(SLIP.DESTINATION_FAMILY_NM_KANA || SLIP.DESTINATION_FIRST_NM_KANA)
				ILIKE ${destinationNm})
			</if-not-empty>

			<if-not-empty varName="orderMailAddress">
				AND
				ORDER_MAIL_ADDRESS ILIKE
				${orderMailAddress}
			</if-not-empty>

			<if-not-empty varName="transportCorporationSystem">
				AND
				TRANSPORT_CORPORATION_SYSTEM =
				${transportCorporationSystem}
			</if-not-empty>

			<if-not-empty varName="destinationTel">
				AND
				DESTINATION_TEL ILIKE
				${destinationTel}
			</if-not-empty>

			<if-not-empty varName="accountMethod">
				AND
				ACCOUNT_METHOD =
				${accountMethod}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &gt;=
				${destinationAppointDateFrom}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &lt;=
				${destinationAppointDateTo}
			</if-not-empty>

			<if-not-empty varName="disposalRoute">
				AND
				DISPOSAL_ROUTE =
				${disposalRoute}
			</if-not-empty>

			<if-not-empty varName="memo">
				AND
				(ORDER_MEMO || SENDER_MEMO)
				ILIKE ${memo}
			</if-not-empty>

			<if-not-empty varName="sumClaimPriceFrom">
				AND
				SUM_CLAIM_PRICE &gt;=
				${sumClaimPriceFrom}
			</if-not-empty>
			<if-not-empty varName="sumClaimPriceTo">
				AND
				SUM_CLAIM_PRICE &lt;=
				${sumClaimPriceTo}
			</if-not-empty>
			<if-not-equals value="1" varName="searchAllFlg">
				<if-not-empty varName="pickingListFlg">
					AND
					PICKING_LIST_FLG =
					${pickingListFlg}
				</if-not-empty>
				<if-not-empty varName="leavingFlg">
					AND
					LEAVING_FLG = ${leavingFlg}
				</if-not-empty>
				<if-not-empty varName="returnFlg">
					AND
					RETURN_FLG = ${returnFlg}
				</if-not-empty>
			</if-not-equals>

		</if-equals>
		)AS SLIP
		INNER JOIN
		(SELECT
		S_ITEM.SYS_SALES_SLIP_ID
		<!-- ,SUM(PIECE_RATE * ORDER_NUM) AS SUM_PIECE_RATE -->
		,COUNT(NOT_ITEM.SYS_ITEM_ID)AS NOT_MST_ITEM_COUNT
		FROM
		SALES_ITEM AS
		S_ITEM
		<if-equals value="1" varName="itemCodeAreaFlg">
			INNER JOIN
			(SELECT
			SYS_ITEM_ID
			FROM
			MST_ITEM
			WHERE
			1 = 1
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE LIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				ITEM_NM LIKE ${itemNm}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				<!-- TO_NUMBER(ITEM_CODE, '00000000000') &gt;= TO_NUMBER(${itemCodeFrom},
					'00000000000') -->
				TO_NUMBER(ITEM_CODE, '00000000000') &gt;= ${itemCodeFrom}
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				<!-- TO_NUMBER(ITEM_CODE, '00000000000') &lt;= TO_NUMBER(${itemCodeTo},
					'00000000000') -->
				TO_NUMBER(ITEM_CODE, '00000000000') &lt;= ${itemCodeTo}
			</if-not-empty>
			)AS M_ITEM
			ON
			M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		</if-equals>
		LEFT JOIN
		(SELECT
		SYS_SALES_SLIP_ID
		,SYS_ITEM_ID
		FROM
		SALES_ITEM
		WHERE
		DELETE_FLAG= '0'
		AND
		SYS_ITEM_ID = 0
		)AS NOT_ITEM
		ON
		NOT_ITEM.SYS_SALES_SLIP_ID = S_ITEM.SYS_SALES_SLIP_ID
		WHERE
		DELETE_FLAG
		= '0'
		<if-not-empty varName="salesItemCode">
			AND
			S_ITEM.ITEM_CODE ILIKE
			${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			S_ITEM.ITEM_NM ILIKE
			${salesItemNm}
		</if-not-empty>
		GROUP BY
		S_ITEM.SYS_SALES_SLIP_ID
		)AS S_ITEM
		ON
		S_ITEM.SYS_SALES_SLIP_ID =
		SLIP.SYS_SALES_SLIP_ID
		WHERE
		1 = 1
		<!-- <if-equals value="1" varName="getListFlg"> -->
		<!-- <if-not-empty varName="itemCodeFrom"> -->
		<!-- AND -->
		<!-- TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000') &gt;= {itemCodeFrom} -->
		<!-- </if-not-empty> -->
		<!-- <if-not-empty varName="itemCodeTo"> -->
		<!-- AND -->
		<!-- TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000') &lt;= ${itemCodeTo} -->
		<!-- </if-not-empty> -->
		<!-- </if-equals> -->
		ORDER BY
		1 = 1
		<!-- ソート条件 -->
		<if-not-empty varName="sortValue">
			<!-- 受注日 -->
			<if-equals value="1" varName="sortValue">
				,SORT_ORDER_DATE
			</if-equals>
			<!-- 受注番号 -->
			<if-equals value="2" varName="sortValue">
				,SLIP.ORDER_NO
			</if-equals>
			<!-- 注文者名 -->
			<if-equals value="3" varName="sortValue">
				,ORDER_FULL_NM
			</if-equals>
			<!-- 請求額 -->
			<if-equals value="4" varName="sortValue">
				,SLIP.SUM_CLAIM_PRICE
			</if-equals>
			<!-- 支払方法 -->
			<if-equals value="5" varName="sortValue">
				,SLIP.ACCOUNT_METHOD
			</if-equals>
			<!-- 届け先 -->
			<if-equals value="6" varName="sortValue">
				,DESTINATION_FULL_NM
			</if-equals>
			<!-- 送り状種別 -->
			<if-equals value="7" varName="sortValue">
				,SLIP.INVOICE_CLASSIFICATION
			</if-equals>
			<!-- 配送指定日 -->
			<if-equals value="8" varName="sortValue">
				,SLIP.DESTINATION_APPOINT_DATE
			</if-equals>
			<!-- 時間帯指定 -->
			<if-equals value="9" varName="sortValue">
				,SLIP.DESTINATION_APPOINT_TIME
			</if-equals>
			<!-- 出荷予定日 -->
			<if-equals value="10" varName="sortValue">
				,SLIP.SHIPMENT_PLAN_DATE
			</if-equals>
			<!-- 昇順・降順 -->
			<if-equals value="1" varName="sortOrder">ASC</if-equals>
			<if-equals value="2" varName="sortOrder">DESC</if-equals>
		</if-not-empty>
		,SLIP.SYS_SALES_SLIP_ID
		<if-equals value="1" varName="sortOrder">ASC</if-equals>
		<if-equals value="2" varName="sortOrder">DESC</if-equals>
	</sql-template>

	<!-- 売上一覧検索条件 -->
	<sql-template id="SEARCH_SALES_SLIP_WHERE_SQL_REF">
	</sql-template>

	<sql-template id="SEL_SEARCH_SALES_SLIP_TOTAL">

	</sql-template>

	<sql-template id="SEL_SALES_ITEM_LIST">
		SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.UPDATED_FLAG
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.PIECE_RATE
		,S_ITEM.ORDER_NUM
		,M_ITEM.TOTAL_STOCK_NUM
		,M_ITEM.TEMPORARY_STOCK_NUM
		,M_ITEM.LEAVE_CLASS_FLG
		,CASE
		WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0
		THEN M_ITEM.ITEM_CODE
		WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0
		THEN S_ITEM.ITEM_CODE
		END AS ITEM_CODE
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0 -->
		<!-- THEN M_ITEM.COST -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0 -->
		<!-- THEN S_ITEM.COST -->
		<!-- END AS COST -->
		,CASE
		WHEN S_ITEM.UPDATED_FLAG = 1 AND S_ITEM.POSTAGE IS NOT NULL THEN
			S_ITEM.COST + S_ITEM.POSTAGE/abs(S_ITEM.ORDER_NUM) 
		WHEN (S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0) AND exm.postage IS NOT NULL THEN
			S_ITEM.COST + exm.postage/abs(S_ITEM.ORDER_NUM)
		WHEN (S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0) AND exm.postage IS NULL THEN
			S_ITEM.COST
		END AS COST
		,CASE
		WHEN S_ITEM.UPDATED_FLAG = 1 THEN
			S_ITEM.POSTAGE
		WHEN S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0 THEN
			exm.POSTAGE
		END AS POSTAGE
		,CASE
		WHEN exm.postage IS NOT NULL THEN
			S_ITEM.COST + exm.postage/abs(S_ITEM.ORDER_NUM)
		WHEN exm.postage IS NULL THEN
			S_ITEM.COST
		END AS DOME_COST
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0 THEN
			M_ITEM.ITEM_NM -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.ITEM_NM -->
		<!-- END AS ITEM_NM -->
		,S_ITEM.ITEM_NM
		,S_ITEM.RSL_LEAVE_FLAG
		FROM
		(SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.SYS_SALES_SLIP_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_CODE
		,S_ITEM.ITEM_NM
		,S_ITEM.POSTAGE
		,S_ITEM.UPDATED_FLAG
		,S_ITEM.PIECE_RATE
		,S_ITEM.COST
		,S_ITEM.ORDER_NUM
		,S_ITEM.RSL_LEAVE_FLAG
		FROM
		SALES_ITEM AS S_ITEM
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="1" varName="getListFlg">
			<if-not-equals value="0" varName="sysSalesSlipId">
				AND
				SYS_SALES_SLIP_ID = ${sysSalesSlipId}
			</if-not-equals>
		</if-equals>
		)AS S_ITEM
		LEFT JOIN
		(SELECT management_code, purchasing_cost, postage FROM exhibit_manage where delete_flag='0') as exm
		ON(S_ITEM.item_code=exm.management_code)
		LEFT JOIN
		(SELECT
		M_ITEM.SYS_ITEM_ID
		,M_ITEM.ITEM_CODE
		,M_ITEM.TOTAL_STOCK_NUM
		,M_ITEM.TEMPORARY_STOCK_NUM
		<!-- ,M_ITEM.ITEM_NM -->
		,M_ITEM.LEAVE_CLASS_FLG
		,COALESCE(COST.COST, 0)AS COST
		FROM
		MST_ITEM AS M_ITEM
		<!-- 20140328 伊東 原価が必ずしも入っていなくてもいい仕様で、left joinに変更 -->
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,COST
		FROM
		ITEM_COST
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
		<if-not-equals value="0" varName="sysCorporationId">
			AND
			SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		)AS COST
		ON
		M_ITEM.SYS_ITEM_ID = COST.SYS_ITEM_ID
		)AS M_ITEM
		ON
		S_ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		<if-equals value="1" varName="getListFlg">
		LEFT JOIN
		(SELECT SYS_SALES_SLIP_ID FROM SALES_SLIP 
			<if-not-equals value="0" varName="sysSalesSlipId">
				WHERE 
				SYS_SALES_SLIP_ID = ${sysSalesSlipId}
			</if-not-equals>
		) AS S_SLIP ON S_ITEM.SYS_SALES_SLIP_ID=S_SLIP.SYS_SALES_SLIP_ID
		</if-equals>
		
		ORDER BY
		S_ITEM.SYS_SALES_ITEM_ID
	</sql-template>

	<sql-template id="SEL_SALES_ITEM">
		SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_NM
		,S_ITEM.PIECE_RATE
		,S_ITEM.ORDER_NUM
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_CODE
		FROM
		(SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.SYS_SALES_SLIP_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_CODE
		,S_ITEM.ITEM_NM
		,S_ITEM.PIECE_RATE
		,S_ITEM.COST
		,S_ITEM.ORDER_NUM
		FROM
		SALES_ITEM AS S_ITEM
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysSalesSlipId">
				AND
				SYS_SALES_SLIP_ID =
				${sysSalesSlipId}
			</if-not-equals>
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE = ${itemCode}
			</if-not-empty>
			<if-not-equals value="0" varName="sysItemId">
				AND
				SYS_ITEM_ID =
				${sysItemId}
			</if-not-equals>
		</if-equals>
		)AS S_ITEM
		ORDER BY
		S_ITEM.SYS_SALES_ITEM_ID
	</sql-template>

	<sql-template id="SEL_EXCEL_SALE_SUMMALY">
		SELECT
		ITEM_CODE
		,ITEM_NM
		,SUM(PIECE_RATE_SUM)AS TOTAL_SALES_PIECE_RATE
		,SUM(IN_TAX_PIECE_RATE) AS TOTAL_IN_TAX_PIECE_RATE
		,SUM(NO_TAX_PIECE_RATE) AS TOTAL_NO_TAX_PIECE_RATE
		,SUM(COST) AS TOTAL_COST
		,SUM(NO_TAX_PIECE_RATE) - SUM(COST)AS TOTAL_GROSS_MARGIN
		,SUM(ORDER_NUM) AS TOTAL_ORDER_NUM
		FROM
		(SELECT
		SEARCH_SALES_ITEM.SYS_ITEM_ID
		,SEARCH_SALES_ITEM.ITEM_CODE
		,SEARCH_SALES_ITEM.ITEM_NM
		,SEARCH_SALES_ITEM.PIECE_RATE_SUM
		,CASE
		WHEN SEARCH_SALES_SLIP.TAX_CLASS = '1'
		THEN SEARCH_SALES_ITEM.PIECE_RATE_SUM
		WHEN SEARCH_SALES_SLIP.TAX_CLASS = '2'
		THEN trunc((SEARCH_SALES_ITEM.PIECE_RATE_SUM * (100 +
		SEARCH_SALES_SLIP.tax_Rate) / 100), 0)
		END AS IN_TAX_PIECE_RATE
		,CASE
		WHEN SEARCH_SALES_SLIP.TAX_CLASS = '1'
		THEN trunc((SEARCH_SALES_ITEM.PIECE_RATE_SUM * 100 / (100 +
		SEARCH_SALES_SLIP.tax_Rate)), 0)
		WHEN SEARCH_SALES_SLIP.TAX_CLASS = '2'
		THEN SEARCH_SALES_ITEM.PIECE_RATE_SUM
		END AS NO_TAX_PIECE_RATE
		,(SEARCH_SALES_ITEM.COST * SEARCH_SALES_ITEM.ORDER_NUM)AS COST
		,SEARCH_SALES_ITEM.ORDER_NUM
		FROM
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.DISPOSAL_ROUTE
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.PICKING_LIST_FLG
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		FROM
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.DISPOSAL_ROUTE
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.PICKING_LIST_FLG
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		FROM
		SALES_SLIP AS SLIP
		WHERE
		DELETE_FLAG = '0'

		<if-not-null varName="sysCorporationId">
			<if-not-equals value="0" varName="sysCorporationId">
				AND
				SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="orderDateFrom">
			AND
			ORDER_DATE &gt;= ${orderDateFrom}
		</if-not-empty>
		<if-not-empty varName="orderDateTo">
			AND
			ORDER_DATE &lt;= ${orderDateTo}
		</if-not-empty>

		<!-- 20140521 Takakuwa 出荷日での絞り込みを追加 -->
		<if-not-empty varName="shipmentPlanDateFrom">
			AND
			SHIPMENT_PLAN_DATE &gt;= ${shipmentPlanDateFrom}
		</if-not-empty>
		<if-not-empty varName="shipmentPlanDateTo">
			AND
			SHIPMENT_PLAN_DATE &lt;= ${shipmentPlanDateTo}
			AND
			SHIPMENT_PLAN_DATE &lt;&gt; ''
		</if-not-empty>


		<if-not-equals value="0" varName="sysChannelId">
			AND
			SLIP.SYS_CHANNEL_ID = ${sysChannelId}
		</if-not-equals>

		<if-not-empty varName="disposalRoute">
			AND
			DISPOSAL_ROUTE = ${disposalRoute}
		</if-not-empty>

		<if-not-empty varName="pickingListFlg">
			AND
			PICKING_LIST_FLG = ${pickingListFlg}
		</if-not-empty>

		<if-not-empty varName="leavingFlg">
			AND
			LEAVING_FLG = ${leavingFlg}
		</if-not-empty>

		)AS SLIP
		INNER JOIN
		(SELECT
		S_ITEM.SYS_SALES_SLIP_ID
		FROM
		SALES_ITEM AS S_ITEM
		<!-- 自社商品検索の場合 -->
		<if-equals value="0" varName="itemCodeAreaFlg">
			INNER JOIN
			(SELECT
			SYS_ITEM_ID
			FROM
			MST_ITEM
			WHERE
			1 = 1
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE ILIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				(ITEM_NM ILIKE ${itemNm}
				OR
				ITEM_NM ILIKE ${itemNmHalf}
				OR
				ITEM_NM ILIKE ${itemNmUpper})
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= ${itemCodeFrom}
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= ${itemCodeTo}
			</if-not-empty>
			)AS M_ITEM
			ON
			M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		</if-equals>
		WHERE
		DELETE_FLAG = '0'
		GROUP BY
		S_ITEM.SYS_SALES_SLIP_ID
		)AS S_ITEM
		ON
		S_ITEM.SYS_SALES_SLIP_ID = SLIP.SYS_SALES_SLIP_ID
		)AS SEARCH_SALES_SLIP
		INNER JOIN
		(SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.SYS_SALES_SLIP_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.PIECE_RATE
		,(S_ITEM.PIECE_RATE * S_ITEM.ORDER_NUM)AS PIECE_RATE_SUM
		,S_ITEM.ORDER_NUM
		,CASE
		WHEN S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.ITEM_CODE
		WHEN S_ITEM.SYS_ITEM_ID != 0 THEN M_ITEM.ITEM_CODE
		ELSE ''
		END AS ITEM_CODE
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.COST -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID != 0 THEN COST.COST -->
		<!-- ELSE 0 -->
		<!-- END AS COST -->
		,S_ITEM.COST
		,CASE
		WHEN S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.ITEM_NM
		WHEN S_ITEM.SYS_ITEM_ID != 0 THEN M_ITEM.ITEM_NM
		ELSE ''
		END AS ITEM_NM
		<!-- ,COALESCE(COST.SYS_CORPORATION_ID, 1)AS SYS_CORPORATION_ID -->
		FROM
		SALES_ITEM AS S_ITEM
		<!-- LEFT JOIN -->
		<!-- (SELECT -->
		<!-- SYS_ITEM_ID -->
		<!-- ,COST -->
		<!-- ,SYS_CORPORATION_ID -->
		<!-- FROM -->
		<!-- ITEM_COST)AS COST -->
		<!-- ON -->
		<!-- case S_ITEM.SYS_ITEM_ID -->
		<!-- when 0 then 1 -->
		<!-- else S_ITEM.SYS_ITEM_ID -->
		<!-- end = COST.SYS_ITEM_ID -->
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		FROM
		MST_ITEM
		)AS M_ITEM
		ON
		S_ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		<if-equals value="0" varName="itemCodeAreaFlg">
			INNER JOIN
			(SELECT
			SYS_ITEM_ID
			FROM
			MST_ITEM
			WHERE
			1 = 1
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE ILIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				(ITEM_NM ILIKE ${itemNm}
				OR
				ITEM_NM ILIKE ${itemNmHalf}
				OR
				ITEM_NM ILIKE ${itemNmUpper})
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= ${itemCodeFrom}
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= ${itemCodeTo}
			</if-not-empty>
			)AS M_ITEM_WHERE
			ON
			M_ITEM_WHERE.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		</if-equals>

		)AS SEARCH_SALES_ITEM
		ON
		SEARCH_SALES_ITEM.SYS_SALES_SLIP_ID = SEARCH_SALES_SLIP.SYS_SALES_SLIP_ID
		<!-- AND -->
		<!-- SEARCH_SALES_ITEM.SYS_CORPORATION_ID = SEARCH_SALES_SLIP.SYS_CORPORATION_ID -->
		WHERE
		1 = 1
		<!-- 他社商品検索の場合 -->
		<if-equals value="1" varName="itemCodeAreaFlg">
			AND SYS_ITEM_ID = 0
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE ILIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				(ITEM_NM ILIKE ${itemNm}
				OR
				ITEM_NM ILIKE ${itemNmHalf}
				OR
				ITEM_NM ILIKE ${itemNmUpper})
			</if-not-empty>
		</if-equals>
		)AS SUMMARY
		GROUP BY
		ITEM_CODE
		,ITEM_NM
		ORDER BY
		1 = 1
		<!-- 1品番 -->
		<if-equals value="1" varName="sortFirst">,ITEM_CODE</if-equals>
		<!-- 2商品名 -->
		<if-equals value="2" varName="sortFirst">,ITEM_NM</if-equals>
		<!-- 3合計売上金額 -->
		<if-equals value="3" varName="sortFirst">,TOTAL_SALES_PIECE_RATE
		</if-equals>
		<!-- 4原価 -->
		<if-equals value="4" varName="sortFirst">,TOTAL_COST</if-equals>
		<!-- 5粗利 -->
		<if-equals value="5" varName="sortFirst">,TOTAL_GROSS_MARGIN</if-equals>
		<!-- 6合計注文数 -->
		<if-equals value="6" varName="sortFirst">,TOTAL_ORDER_NUM</if-equals>

		<!-- 1昇順 -->
		<if-equals value="1" varName="sortFirstSub"> ASC</if-equals>
		<!-- 2降順 -->
		<if-equals value="2" varName="sortFirstSub"> DESC</if-equals>
	</sql-template>

	<sql-template id="SEL_EXCEL_SEARCH_SALES_SLIP">
		SELECT
		SEARCH_SALES_SLIP.SYS_SALES_SLIP_ID
		,SEARCH_SALES_SLIP.SYS_CORPORATION_ID
		,SEARCH_SALES_SLIP.SYS_STORE_ID
		,SEARCH_SALES_SLIP.ORDER_NO
		,SEARCH_SALES_SLIP.ORDER_DATE
		,SEARCH_SALES_SLIP.ORDER_TIME
		,SEARCH_SALES_SLIP.SORT_ORDER_DATE
		,SEARCH_SALES_SLIP.ORDER_FAMILY_NM
		,SEARCH_SALES_SLIP.ORDER_FIRST_NM
		,SEARCH_SALES_SLIP.ORDER_FAMILY_NM_KANA
		,SEARCH_SALES_SLIP.ORDER_FIRST_NM_KANA
		,(SEARCH_SALES_SLIP.ORDER_FAMILY_NM || ' ' ||
		SEARCH_SALES_SLIP.ORDER_FIRST_NM)AS ORDER_FULL_NM
		,(SEARCH_SALES_SLIP.ORDER_FAMILY_NM_KANA || ' ' ||
		SEARCH_SALES_SLIP.ORDER_FIRST_NM_KANA)AS ORDER_FULL_NM_KANA
		,SEARCH_SALES_SLIP.ORDER_MAIL_ADDRESS
		,SEARCH_SALES_SLIP.ORDER_ZIP
		,CASE
		WHEN SEARCH_SALES_SLIP.ORDER_ZIP IS NOT NULL
		AND CHAR_LENGTH(SEARCH_SALES_SLIP.ORDER_ZIP) = 7
		THEN
		CONCAT(SUBSTR(SEARCH_SALES_SLIP.ORDER_ZIP, 1, 3), '-',
		SUBSTR(SEARCH_SALES_SLIP.ORDER_ZIP, 4, 4))
		ELSE
		SEARCH_SALES_SLIP.ORDER_ZIP
		END AS ORDER_ZIP_DISP
		,SEARCH_SALES_SLIP.ORDER_PREFECTURES
		,SEARCH_SALES_SLIP.ORDER_MUNICIPALITY
		,SEARCH_SALES_SLIP.ORDER_ADDRESS
		,SEARCH_SALES_SLIP.ORDER_BUILDING_NM
		,SEARCH_SALES_SLIP.ORDER_COMPANY_NM
		,SEARCH_SALES_SLIP.ORDER_QUARTER
		,SEARCH_SALES_SLIP.ORDER_TEL
		,SEARCH_SALES_SLIP.ACCOUNT_METHOD
		,SEARCH_SALES_SLIP.ACCOUNT_COMMISSION
		,SEARCH_SALES_SLIP.ORDER_REMARKS
		,SEARCH_SALES_SLIP.ORDER_MEMO
		,SEARCH_SALES_SLIP.USED_POINT
		,SEARCH_SALES_SLIP.GET_POINT
		,SEARCH_SALES_SLIP.MENBER_NO
		,SEARCH_SALES_SLIP.DEPOSIT_DATE
		,SEARCH_SALES_SLIP.REGISTRY_STAFF
		,SEARCH_SALES_SLIP.DESTINATION_FAMILY_NM
		,SEARCH_SALES_SLIP.DESTINATION_FIRST_NM
		,SEARCH_SALES_SLIP.DESTINATION_FAMILY_NM_KANA
		,SEARCH_SALES_SLIP.DESTINATION_FIRST_NM_KANA
		,(SEARCH_SALES_SLIP.DESTINATION_FAMILY_NM || ' ' ||
		SEARCH_SALES_SLIP.DESTINATION_FIRST_NM)AS DESTINATION_FULL_NM
		,(SEARCH_SALES_SLIP.DESTINATION_FAMILY_NM_KANA || ' ' ||
		SEARCH_SALES_SLIP.DESTINATION_FIRST_NM_KANA)AS
		DESTINATION_FULL_NM_KANA
		,SEARCH_SALES_SLIP.DESTINATION_ZIP
		,CASE
		WHEN SEARCH_SALES_SLIP.DESTINATION_ZIP IS NOT NULL
		AND CHAR_LENGTH(SEARCH_SALES_SLIP.DESTINATION_ZIP) = 7
		THEN
		CONCAT(SUBSTR(SEARCH_SALES_SLIP.DESTINATION_ZIP, 1, 3), '-',
		SUBSTR(SEARCH_SALES_SLIP.DESTINATION_ZIP, 4, 4))
		ELSE
		SEARCH_SALES_SLIP.DESTINATION_ZIP
		END AS DESTINATION_ZIP_DISP
		,SEARCH_SALES_SLIP.DESTINATION_PREFECTURES
		,SEARCH_SALES_SLIP.DESTINATION_MUNICIPALITY
		,SEARCH_SALES_SLIP.DESTINATION_ADDRESS
		,SEARCH_SALES_SLIP.DESTINATION_BUILDING_NM
		,SEARCH_SALES_SLIP.DESTINATION_COMPANY_NM
		,SEARCH_SALES_SLIP.DESTINATION_QUARTER
		,SEARCH_SALES_SLIP.DESTINATION_TEL
		,SEARCH_SALES_SLIP.SENDER_MEMO
		,COALESCE(SEARCH_SALES_SLIP.ORDER_REMARKS_MEMO, '') AS ORDER_REMARKS_MEMO
		,SEARCH_SALES_SLIP.SENDER_REMARKS
		,SEARCH_SALES_SLIP.INVOICE_CLASSIFICATION
		,SEARCH_SALES_SLIP.SLIP_NO
		,SEARCH_SALES_SLIP.DESTINATION_APPOINT_DATE
		,SEARCH_SALES_SLIP.DESTINATION_APPOINT_TIME
		,SEARCH_SALES_SLIP.SHIPMENT_PLAN_DATE
		,SEARCH_SALES_SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SEARCH_SALES_SLIP.SLIP_MEMO
		,SEARCH_SALES_SLIP.CASH_ON_DELIVERY_COMMISSION
		,SEARCH_SALES_SLIP.STATUS
		,SEARCH_SALES_SLIP.POSTAGE
		,SEARCH_SALES_SLIP.COD_COMMISSION
		,SEARCH_SALES_SLIP.CONSUMPTION_TAX
		,SEARCH_SALES_SLIP.DISCOMMONDITY
		,SEARCH_SALES_SLIP.GIFT
		,SEARCH_SALES_SLIP.SUM_CLAIM_PRICE
		,SEARCH_SALES_SLIP.SUM_PIECE_RATE
		,SEARCH_SALES_SLIP.NO_TAX_SUM_PIECE_RATE
		,SEARCH_SALES_SLIP.IN_TAX_SUM_PIECE_RATE
		,SEARCH_SALES_SLIP.DISPOSAL_ROUTE
		,SEARCH_SALES_SLIP.DELIVERY_REMARKS
		,SEARCH_SALES_SLIP.BUY_COUNT
		,SEARCH_SALES_SLIP.TAX_CLASS
		,SEARCH_SALES_SLIP.TAX_RATE
		,SEARCH_SALES_SLIP.TAX
		,SEARCH_SALES_SLIP.PICKING_LIST_FLG
		,SEARCH_SALES_SLIP.LEAVING_FLG
		,SEARCH_SALES_SLIP.RETURN_FLG
		,SEARCH_SALES_SLIP.DELETE_FLAG
		,SEARCH_SALES_SLIP.SYS_CHANNEL_ID
		,SEARCH_SALES_SLIP.CHANNEL_NM
		,SEARCH_SALES_SLIP.CORPORATION_NM
		,SEARCH_SALES_SLIP.NOT_ITEM_COUNT
		<!-- ここから商品情報 -->
		,SEARCH_SALES_ITEM.SYS_SALES_ITEM_ID
		,SEARCH_SALES_ITEM.SYS_SALES_SLIP_ID
		,SEARCH_SALES_ITEM.SYS_ITEM_ID
		,SEARCH_SALES_ITEM.ITEM_CODE
		,SEARCH_SALES_ITEM.ITEM_NM
		,SEARCH_SALES_ITEM.PIECE_RATE
		,SEARCH_SALES_ITEM.COST
		,SEARCH_SALES_ITEM.ORDER_NUM
		<!-- ,SEARCH_SALES_ITEM.SYS_CORPORATION_ID -->
		FROM
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.SYS_STORE_ID
		,SLIP.ORDER_NO
		,SLIP.ORDER_DATE
		,SLIP.ORDER_TIME
		,(SLIP.ORDER_DATE || SLIP.ORDER_TIME)AS SORT_ORDER_DATE
		,SLIP.ORDER_FAMILY_NM
		,SLIP.ORDER_FIRST_NM
		,SLIP.ORDER_FAMILY_NM_KANA
		,SLIP.ORDER_FIRST_NM_KANA
		,(SLIP.ORDER_FAMILY_NM || ' ' || SLIP.ORDER_FIRST_NM)AS ORDER_FULL_NM
		,(SLIP.ORDER_FAMILY_NM_KANA || ' ' || SLIP.ORDER_FIRST_NM_KANA)AS
		ORDER_FULL_NM_KANA
		,SLIP.ORDER_MAIL_ADDRESS
		,SLIP.ORDER_ZIP
		,SLIP.ORDER_PREFECTURES
		,SLIP.ORDER_MUNICIPALITY
		,SLIP.ORDER_ADDRESS
		,SLIP.ORDER_BUILDING_NM
		,SLIP.ORDER_COMPANY_NM
		,SLIP.ORDER_QUARTER
		,SLIP.ORDER_TEL
		,SLIP.ACCOUNT_METHOD
		,SLIP.ACCOUNT_COMMISSION
		,SLIP.ORDER_REMARKS
		,SLIP.ORDER_MEMO
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.MENBER_NO
		,SLIP.DEPOSIT_DATE
		,SLIP.REGISTRY_STAFF
		,SLIP.DESTINATION_FAMILY_NM
		,SLIP.DESTINATION_FIRST_NM
		,SLIP.DESTINATION_FAMILY_NM_KANA
		,SLIP.DESTINATION_FIRST_NM_KANA
		,(SLIP.DESTINATION_FAMILY_NM || ' ' || SLIP.DESTINATION_FIRST_NM)AS DESTINATION_FULL_NM
		,(SLIP.DESTINATION_FAMILY_NM_KANA || ' ' ||
		SLIP.DESTINATION_FIRST_NM_KANA)AS DESTINATION_FULL_NM_KANA
		,SLIP.DESTINATION_ZIP
		,SLIP.DESTINATION_PREFECTURES
		,SLIP.DESTINATION_MUNICIPALITY
		,SLIP.DESTINATION_ADDRESS
		,SLIP.DESTINATION_BUILDING_NM
		,SLIP.DESTINATION_COMPANY_NM
		,SLIP.DESTINATION_QUARTER
		,SLIP.DESTINATION_TEL
		,SLIP.SENDER_MEMO
		,SLIP.ORDER_REMARKS_MEMO
		,SLIP.SENDER_REMARKS
		,SLIP.INVOICE_CLASSIFICATION
		,SLIP.SLIP_NO
		,SLIP.DESTINATION_APPOINT_DATE
		,SLIP.DESTINATION_APPOINT_TIME
		,SLIP.SHIPMENT_PLAN_DATE
		,SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SLIP.SLIP_MEMO
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.STATUS
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.SUM_PIECE_RATE
		,CASE
		WHEN TAX_CLASS = '1' THEN SUM_PIECE_RATE - TAX
		WHEN TAX_CLASS = '2' THEN SUM_PIECE_RATE
		END AS NO_TAX_SUM_PIECE_RATE
		,CASE
		WHEN TAX_CLASS = '1' THEN SUM_PIECE_RATE
		WHEN TAX_CLASS = '2' THEN SUM_PIECE_RATE + TAX
		END AS IN_TAX_SUM_PIECE_RATE
		,SLIP.DISPOSAL_ROUTE
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.PICKING_LIST_FLG
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,SLIP.CHANNEL_NM
		,SLIP.CORPORATION_NM
		,COALESCE(S_ITEM.NOT_MST_ITEM_COUNT, 0)AS NOT_ITEM_COUNT
		FROM
		(SELECT
		SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SYS_STORE_ID
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,USED_POINT
		,GET_POINT
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,CASH_ON_DELIVERY_COMMISSION
		,STATUS
		,POSTAGE
		,COD_COMMISSION
		,CONSUMPTION_TAX
		,DISCOMMONDITY
		,GIFT
		,DISPOSAL_ROUTE
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,PICKING_LIST_FLG
		,LEAVING_FLG
		,RETURN_FLG
		,DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,CHANNEL.CHANNEL_NM
		,CORPORATION.CORPORATION_NM
		FROM
		SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CHANNEL_ID
		,CHANNEL_NM
		FROM
		MST_CHANNEL
		WHERE
		1 = 1
		)CHANNEL
		ON
		CHANNEL.SYS_CHANNEL_ID =
		SLIP.SYS_CHANNEL_ID
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		)AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="1" varName="getListFlg">
			<!-- <sql-ref refId="SEARCH_SALES_SLIP_WHERE_SQL_REF"/> -->

			<if-not-null varName="sysCorporationId">
				<if-not-equals value="0" varName="sysCorporationId">
					AND
					SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				</if-not-equals>
			</if-not-null>

			<if-not-equals value="0" varName="sysChannelId">
				AND
				SLIP.SYS_CHANNEL_ID = ${sysChannelId}
			</if-not-equals>

			<if-not-empty varName="orderDateFrom">
				AND
				ORDER_DATE &gt;=
				${orderDateFrom}
			</if-not-empty>
			<if-not-empty varName="orderDateTo">
				AND
				ORDER_DATE &lt;= ${orderDateTo}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateFrom">
				AND
				SHIPMENT_PLAN_DATE &gt;=
				${shipmentPlanDateFrom}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateTo">
				AND
				SHIPMENT_PLAN_DATE &lt;=
				${shipmentPlanDateTo}
			</if-not-empty>
			<if-not-empty varName="orderNo">
				AND
				ORDER_NO ILIKE ${orderNo}
			</if-not-empty>
			<if-not-empty varName="slipNo">
				AND
				SLIP_NO ILIKE ${slipNo}
			</if-not-empty>

			<!-- 20140405 八鍬 -->
			<if-equals value="1" varName="slipNoExist">
				AND
				SLIP_NO IS NOT NULL
				AND
				SLIP_NO != ''
				<if-equals value="0" varName="slipNoHyphen">
					AND
					SLIP_NO != '-'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoHyphen">
				<if-equals value="0" varName="slipNoExist">
					AND
					SLIP_NO LIKE '-%'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoNone">
				AND
				SLIP_NO IS NULL
				OR
				SLIP_NO =
				''
			</if-equals>
			<!-- ここまで -->

			<if-not-empty varName="orderNm">
				AND
				((SLIP.ORDER_FAMILY_NM ||
				SLIP.ORDER_FIRST_NM) ILIKE ${orderNm}
				OR (SLIP.ORDER_FAMILY_NM_KANA
				|| SLIP.ORDER_FIRST_NM_KANA) ILIKE
				${orderNm})
			</if-not-empty>

			<if-not-empty varName="invoiceClassification">
				AND
				INVOICE_CLASSIFICATION =
				${invoiceClassification}
			</if-not-empty>

			<if-not-empty varName="orderTel">
				AND
				ORDER_TEL ILIKE ${orderTel}
			</if-not-empty>

			<!-- <if-not-empty varName="itemNm"> -->
			<!-- AND -->
			<!-- ITEM_NM ILIKE ${itemNm} -->
			<!-- </if-not-empty> -->

			<if-not-empty varName="destinationNm">
				AND
				((SLIP.DESTINATION_FAMILY_NM ||
				SLIP.DESTINATION_FIRST_NM) ILIKE ${destinationNm}
				OR
				(SLIP.DESTINATION_FAMILY_NM_KANA || SLIP.DESTINATION_FIRST_NM_KANA)
				ILIKE ${destinationNm})
			</if-not-empty>

			<if-not-empty varName="orderMailAddress">
				AND
				ORDER_MAIL_ADDRESS ILIKE
				${orderMailAddress}
			</if-not-empty>

			<if-not-empty varName="transportCorporationSystem">
				AND
				TRANSPORT_CORPORATION_SYSTEM =
				${transportCorporationSystem}
			</if-not-empty>

			<if-not-empty varName="destinationTel">
				AND
				DESTINATION_TEL ILIKE
				${destinationTel}
			</if-not-empty>

			<if-not-empty varName="accountMethod">
				AND
				ACCOUNT_METHOD =
				${accountMethod}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &gt;=
				${destinationAppointDateFrom}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &lt;=
				${destinationAppointDateTo}
			</if-not-empty>

			<if-not-empty varName="disposalRoute">
				AND
				DISPOSAL_ROUTE =
				${disposalRoute}
			</if-not-empty>

			<if-not-empty varName="memo">
				AND
				(ORDER_MEMO || SENDER_MEMO)
				ILIKE ${memo}
			</if-not-empty>

			<if-not-empty varName="sumClaimPriceFrom">
				AND
				SUM_CLAIM_PRICE &gt;=
				${sumClaimPriceFrom}
			</if-not-empty>
			<if-not-empty varName="sumClaimPriceTo">
				AND
				SUM_CLAIM_PRICE &lt;=
				${sumClaimPriceTo}
			</if-not-empty>
			<if-not-equals value="1" varName="searchAllFlg">
				<if-not-empty varName="pickingListFlg">
					AND
					PICKING_LIST_FLG =
					${pickingListFlg}
				</if-not-empty>
				<if-not-empty varName="leavingFlg">
					AND
					LEAVING_FLG = ${leavingFlg}
				</if-not-empty>
				<if-not-empty varName="returnFlg">
					AND
					RETURN_FLG = ${returnFlg}
				</if-not-empty>
			</if-not-equals>

		</if-equals>
		)AS SLIP
		INNER JOIN
		(SELECT
		S_ITEM.SYS_SALES_SLIP_ID
		,COUNT(NOT_ITEM.SYS_ITEM_ID)AS NOT_MST_ITEM_COUNT
		FROM
		SALES_ITEM AS
		S_ITEM
		<if-equals value="1" varName="itemCodeAreaFlg">
			INNER JOIN
			(SELECT
			SYS_ITEM_ID
			FROM
			MST_ITEM
			WHERE
			1 = 1
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE LIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				ITEM_NM LIKE ${itemNm}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= ${itemCodeFrom}
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= ${itemCodeTo}
			</if-not-empty>
			)AS M_ITEM
			ON
			M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		</if-equals>
		LEFT JOIN
		(SELECT
		SYS_SALES_SLIP_ID
		,SYS_ITEM_ID
		FROM
		SALES_ITEM
		WHERE
		DELETE_FLAG= '0'
		AND
		SYS_ITEM_ID = 0
		)AS NOT_ITEM
		ON
		NOT_ITEM.SYS_SALES_SLIP_ID = S_ITEM.SYS_SALES_SLIP_ID
		WHERE
		DELETE_FLAG
		= '0'
		<if-not-empty varName="salesItemCode">
			AND
			S_ITEM.ITEM_CODE ILIKE
			${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			S_ITEM.ITEM_NM ILIKE
			${salesItemNm}
		</if-not-empty>
		GROUP BY
		S_ITEM.SYS_SALES_SLIP_ID
		)AS S_ITEM
		ON
		S_ITEM.SYS_SALES_SLIP_ID =
		SLIP.SYS_SALES_SLIP_ID
		)AS SEARCH_SALES_SLIP
		LEFT JOIN
		(SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.SYS_SALES_SLIP_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_NM
		,S_ITEM.PIECE_RATE
		,S_ITEM.ORDER_NUM
		,CASE
		WHEN S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.ITEM_CODE
		WHEN S_ITEM.SYS_ITEM_ID != 0 THEN M_ITEM.ITEM_CODE
		ELSE ''
		END AS ITEM_CODE
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.COST -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID != 0 THEN COST.COST -->
		<!-- ELSE 0 -->
		<!-- END AS COST -->
		,S_ITEM.COST
		<!-- ,COALESCE(COST.SYS_CORPORATION_ID, 1)AS SYS_CORPORATION_ID -->
		FROM
		SALES_ITEM AS S_ITEM
		<!-- 20140425 伊東 商品IDが０の場合少しばかり無理させて、法人分行を取得します start -->
		<!-- LEFT JOIN -->
		<!-- (SELECT -->
		<!-- SYS_ITEM_ID -->
		<!-- ,COST -->
		<!-- ,SYS_CORPORATION_ID -->
		<!-- FROM -->
		<!-- ITEM_COST)AS COST -->
		<!-- ON -->
		<!-- case S_ITEM.SYS_ITEM_ID -->
		<!-- when 0 then 1 -->
		<!-- else S_ITEM.SYS_ITEM_ID -->
		<!-- end = COST.SYS_ITEM_ID -->
		<!-- 20140425 伊東 end -->
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		)AS M_ITEM
		ON
		S_ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		)AS SEARCH_SALES_ITEM
		ON
		SEARCH_SALES_ITEM.SYS_SALES_SLIP_ID = SEARCH_SALES_SLIP.SYS_SALES_SLIP_ID
		<!-- AND -->
		<!-- SEARCH_SALES_ITEM.SYS_CORPORATION_ID = SEARCH_SALES_SLIP.SYS_CORPORATION_ID -->
		WHERE
		1 = 1
		ORDER BY
		1 = 1
		<!-- ソート条件のみできる -->
		<if-not-empty varName="sortValue">
			<!-- 受注日 -->
			<if-equals value="1" varName="sortValue">
				,SEARCH_SALES_SLIP.SORT_ORDER_DATE
			</if-equals>
			<!-- 受注番号 -->
			<if-equals value="2" varName="sortValue">
				,SEARCH_SALES_SLIP.ORDER_NO
			</if-equals>
			<!-- 注文者名 -->
			<if-equals value="3" varName="sortValue">
				,SEARCH_SALES_SLIP.ORDER_FULL_NM
			</if-equals>
			<!-- 請求額 -->
			<if-equals value="4" varName="sortValue">
				,SEARCH_SALES_SLIP.SUM_CLAIM_PRICE
			</if-equals>
			<!-- 支払方法 -->
			<if-equals value="5" varName="sortValue">
				,SEARCH_SALES_SLIP.ACCOUNT_METHOD
			</if-equals>
			<!-- 届け先 -->
			<if-equals value="6" varName="sortValue">
				,SEARCH_SALES_SLIP.DESTINATION_FULL_NM
			</if-equals>
			<!-- 送り状種別 -->
			<if-equals value="7" varName="sortValue">
				,SEARCH_SALES_SLIP.INVOICE_CLASSIFICATION
			</if-equals>
			<!-- 配送指定日 -->
			<if-equals value="8" varName="sortValue">
				,SEARCH_SALES_SLIP.DESTINATION_APPOINT_DATE
			</if-equals>
			<!-- 時間帯指定 -->
			<if-equals value="9" varName="sortValue">
				,SEARCH_SALES_SLIP.DESTINATION_APPOINT_TIME
			</if-equals>
			<!-- 出荷予定日 -->
			<if-equals value="10" varName="sortValue">
				,SEARCH_SALES_SLIP.SHIPMENT_PLAN_DATE
			</if-equals>
			<!-- 昇順・降順 -->
			<if-equals value="1" varName="sortOrder">ASC</if-equals>
			<if-equals value="2" varName="sortOrder">DESC</if-equals>
		</if-not-empty>
		,SEARCH_SALES_SLIP.SYS_SALES_SLIP_ID
		<if-equals value="1" varName="sortOrder">ASC</if-equals>
		<if-equals value="2" varName="sortOrder">DESC</if-equals>
	</sql-template>
	<!-- ============================================在庫============================================== -->


	<sql-template id="INS_MST_ITEM">
		INSERT INTO MST_ITEM
			(SYS_ITEM_ID
			,ITEM_CODE
			,OLD_ITEM_CODE
			,ITEM_NM
			,CAR_MODEL
			,MODEL
			,MAKER_NM
			,ITEM_LEAD_TIME
			,MONTH_AVG_ORDER_NUM
			,PACKING_SIZE
			,WEIGHT
			,MINIMUM_ORDER_QUANTITY
			,FACTORY_ITEM_CODE
			,PURCHACE_COST
			,LOADING
			,FOREIGN_ITEM_NM
			,SYS_SUPPLIER_ID
			,DEAD_STOCK_FLAG
			,DOCUMENT_REMARKS
			,PURCHACE_COUNTRY
			,PURCHACE_PRICE
			,SYS_GROUP_NM_ID
			,TOTAL_STOCK_NUM
			,TEMPORARY_STOCK_NUM
			,ORDER_ALERT_NUM
			,MANUAL_FLG
			,PLAN_SHEET_FLG
			,OTHER_DOCUMENT_FLG
			,SPEC_MEMO
			,SET_ITEM_FLG
			,LEAVE_CLASS_FLG
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES
			(${sysItemId}
			,${itemCode}
			,${oldItemCode}
			,${itemNm}
			,${carModel}
			,${model}
			,${makerNm}
			,${itemLeadTime}
			,${monthAvgOrderNum}
			,${packingSize}
			,${weight}
			,${minimumOrderQuantity}
			,${factoryItemCode}
			,${purchaceCost}
			,${loading}
			,${foreignItemNm}
			,${sysSupplierId}
			,${deadStockFlag}
			,${documentRemarks}
			,${purchaceCountry}
			,${purchacePrice}
			,${sysGroupNmId}
			,${totalStockNum}
			,${totalStockNum}
			,${orderAlertNum}
			,${manualFlg}
			,${planSheetFlg}
			,${otherDocumentFlg}
			,${specMemo}
			,${setItemFlg}
			,${leaveClassFlg}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="INS_ITEM_PRICE">
		INSERT INTO ITEM_PRICE(
		SYS_ITEM_PRICE_ID
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,PRICE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysItemPriceId}
		,${sysItemId}
		,${sysCorporationId}
		,${price}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_ITEM_COST">
		INSERT INTO ITEM_COST(
		SYS_ITEM_COST_ID
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,COST
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysItemCostId}
		,${sysItemId}
		,${sysCorporationId}
		,${cost}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_WAREHOUSE_STOCK">
		INSERT INTO WAREHOUSE_STOCK(
		SYS_WAREHOUSE_STOCK_ID
		,SYS_ITEM_ID
		,SYS_WAREHOUSE_ID
		,STOCK_NUM
		,LOCATION_NO
		,PRIORITY
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysWarehouseStockId}
		,${sysItemId}
		,${sysWarehouseId}
		,${stockNum}
		,${locationNo}
		,${priority}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_EXTERNAL_STOCK">
		INSERT INTO external_stock(
			sys_external_stock_id
			, sys_item_id
			, sys_external_warehouse_code
			, stock_num
			, delete_flag
			, create_date
			, create_user_id
			, update_date
			, update_user_id
		)
		VALUES (
			${sysExternalStockId}
			,${sysItemId}
			,${sysExternalWarehouseCode}
			,${stockNum}
			, '0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId}
		)
	</sql-template>

	<sql-template id="INS_ARRIVAL_SCHEDULE">
		INSERT INTO ARRIVAL_SCHEDULE(
			SYS_ARRIVAL_SCHEDULE_ID
			,SYS_FOREIGN_SLIP_ID
			,SYS_ITEM_ID
			,ITEM_ORDER_DATE
			,ARRIVAL_SCHEDULE_DATE
			,VAGUE_ARRIVAL_SCHEDULE
			,ARRIVAL_NUM
			,ARRIVAL_FLAG
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES(
			${sysArrivalScheduleId}
			,${sysForeignSlipId}
			,${sysItemId}
			,${itemOrderDate}
			,${arrivalScheduleDate}
			,${vagueArrivalSchedule}
			,${arrivalNum}
			,${arrivalFlag}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="INS_ARRIVAL_SCHEDULE_FOREIGN">
		INSERT INTO ARRIVAL_SCHEDULE(
			SYS_ARRIVAL_SCHEDULE_ID
			,SYS_FOREIGN_SLIP_ID
			,SYS_FOREIGN_SLIP_ITEM_ID
			,SYS_ITEM_ID
			,ITEM_ORDER_DATE
			,ARRIVAL_SCHEDULE_DATE
			,VAGUE_ARRIVAL_SCHEDULE
			,ARRIVAL_NUM
			,ARRIVAL_FLAG
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES(
			${sysArrivalScheduleId}
			,${sysForeignSlipId}
			,${sysForeignSlipItemId}
			,${sysItemId}
			,${itemOrderDate}
			,${arrivalScheduleDate}
			,${vagueArrivalSchedule}
			,${arrivalNum}
			,${arrivalFlag}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="INS_ARRIVAL_SCHEDULE_HISTORY">
		INSERT INTO ARRIVAL_SCHEDULE(
			SYS_ARRIVAL_SCHEDULE_ID
			,SYS_ITEM_ID
			,ITEM_ORDER_DATE
			,ARRIVAL_SCHEDULE_DATE
			,VAGUE_ARRIVAL_SCHEDULE
			,ARRIVAL_NUM
			,ARRIVAL_FLAG
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,SYS_FOREIGN_SLIP_ID
			,SYS_FOREIGN_SLIP_ITEM_ID)
		VALUES(
			${sysArrivalScheduleId}
			,${sysItemId}
			,${itemOrderDate}
			,${arrivalScheduleDate}
			,${vagueArrivalSchedule}
			,${arrivalNum}
			,${arrivalFlag}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId}
			,${sysForeignSlipId}
			,${sysForeignSlipItemId})
	</sql-template>

	<sql-template id="DEL_ARRIVAL_SCHEDULE">
		UPDATE
		ARRIVAL_SCHEDULE
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
		AND SYS_ITEM_ID = ${sysItemId}
		AND ARRIVAL_FLAG = '1'
	</sql-template>

	<sql-template id="RESET_ARRIVAL_SCHEDULE">
		UPDATE
		ARRIVAL_SCHEDULE
		SET
		DELETE_FLAG = '0'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,ARRIVAL_NUM = ${arrivalNum}
		,ARRIVAL_FLAG = '0'
		WHERE
		SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
	</sql-template>

	<sql-template id="RESET_MAX_ARRIVAL_SCHEDULE">
		UPDATE
		ARRIVAL_SCHEDULE
		SET
		DELETE_FLAG = '0'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,ARRIVAL_NUM = ${arrivalNum}
		,ARRIVAL_FLAG = '0'
		WHERE
		create_date=(
		SELECT MAX(create_date) 
		FROM ARRIVAL_SCHEDULE 
		WHERE 
		SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
		AND SYS_ITEM_ID = ${sysItemId}
		AND ARRIVAL_FLAG = '1')
		AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
		AND SYS_ITEM_ID = ${sysItemId}
		AND ARRIVAL_FLAG = '1'
		
	</sql-template>

	<sql-template id="RESET_ORDER_NUM">
		UPDATE
		FOREIGN_ITEM
		SET
		ORDER_NUM = ${arrivalNum}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
		AND SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="INS_BACK_ORDER">
		INSERT INTO BACK_ORDER(
		SYS_BACK_ORDER_ID
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,SYS_CHANNEL_ID
		,BACK_ORDER_DATE
		,REMARKS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysBackOrderId}
		,${sysItemId}
		,${sysCorporationId}
		,${sysChannelId}
		,${backOrderDate}
		,${remarks}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_ITEM_MANUAL">
		INSERT INTO ITEM_MANUAL(
		SYS_ITEM_MANUAL_ID
		,SYS_ITEM_ID
		,MANUAL_PATH
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DOCUMENT_TYPE)
		VALUES(
		${sysItemManualId}
		,${sysItemId}
		,${manualPath}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${documentType})
	</sql-template>

	<sql-template id="UPD_MST_ITEM_COST_LOADING">
		UPDATE
			MST_ITEM
		SET
		<if-equals value="77" varName="updType">
			PURCHACE_PRICE = ${price}
		</if-equals>

		<if-equals value="88" varName="updType">
			LOADING = ${price}
		</if-equals>
	WHERE
			DELETE_FLAG = '0'
			AND SYS_ITEM_ID = ${sysItemId}

	</sql-template>

	<sql-template id="UPD_ITEM_MANUAL">
		UPDATE ITEM_MANUAL SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		,DOCUMENT_TYPE =
		${documentType}
		<if-not-empty varName="manualPath">
			,MANUAL_PATH = ${manualPath}
		</if-not-empty>
		WHERE
		SYS_ITEM_MANUAL_ID = ${sysItemManualId}
	</sql-template>

	<sql-template id="DEL_ITEM_MANUAL">
		UPDATE ITEM_MANUAL SET
		UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		,DELETE_FLAG =
		${deleteFlag}
		WHERE
		SYS_ITEM_MANUAL_ID = ${sysItemManualId}
	</sql-template>

	<sql-template id="INS_KEEP">
		INSERT INTO KEEP (
		SYS_KEEP_ID
		,SYS_ITEM_ID
		,ORDER_NO
		,KEEP_NUM
		,REMARKS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES (
		${sysKeepId}
		,${sysItemId}
		,${orderNo}
		,${keepNum}
		,${remarks}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_EXTERNAL_KEEP">
		INSERT INTO EXTERNAL_KEEP (
		sys_external_keep_id
		,SYS_ITEM_ID
		,sys_external_warehouse_code
		,ORDER_NO
		,KEEP_NUM
		,REMARKS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES (
		${sysExternalKeepId}
		,${sysItemId}
		,${sysExternalWarehouseCode}
		,${orderNo}
		,${keepNum}
		,${remarks}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="UPD_KEEP">
		UPDATE KEEP SET
		ORDER_NO = ${orderNo}
		,KEEP_NUM = ${keepNum}
		,REMARKS =
		${remarks}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE

		SYS_KEEP_ID =
		${sysKeepId}
	</sql-template>

	<sql-template id="UPD_EXTERNAL_KEEP">
		UPDATE EXTERNAL_KEEP SET
		ORDER_NO = ${orderNo}
		,KEEP_NUM = ${keepNum}
		,REMARKS =
		${remarks}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
			SYS_EXTERNAL_KEEP_ID =
			${sysExternalKeepId}
		AND
			SYS_EXTERNAL_WAREHOUSE_CODE =
			${sysExternalWarehouseCode}
	</sql-template>

	<sql-template id="DEL_KEEP">
		UPDATE KEEP SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_KEEP_ID = ${sysKeepId}
	</sql-template>


	<sql-template id="DEL_EXTERNAL_KEEP">
		UPDATE EXTERNAL_KEEP SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		sys_external_keep_id = ${sysExternalKeepId}
	</sql-template>


	<sql-template id="DEL_EXTERNAL_KEEP_OF_ITEM">
		UPDATE EXTERNAL_KEEP SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		sys_item_id = ${sysItemId}
	</sql-template>


	<sql-template id="SEL_KEEP">
		SELECT
		SYS_KEEP_ID
		,SYS_ITEM_ID
		,ORDER_NO
		,KEEP_NUM
		,REMARKS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		KEEP
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID =
			${sysItemId}
		</if-not-equals>
		<if-not-empty varName="orderNo">
			AND
			ORDER_NO = ${orderNo}
		</if-not-empty>
		ORDER BY
		SYS_KEEP_ID ASC
	</sql-template>

	<sql-template id="SEL_EXTERNAL_KEEP">
		SELECT
			SYS_EXTERNAL_KEEP_ID
			,SYS_ITEM_ID
			,SYS_EXTERNAL_WAREHOUSE_CODE
			,ORDER_NO
			,KEEP_NUM
			,REMARKS
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			EXTERNAL_KEEP
		WHERE
			DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID =
			${sysItemId}
		</if-not-equals>
		<if-not-equals value="" varName="sysExternalWarehouseCode">
			AND
			SYS_EXTERNAL_WAREHOUSE_CODE =
			${sysExternalWarehouseCode}
		</if-not-equals>

		<if-not-empty varName="orderNo">
			AND
			ORDER_NO = ${orderNo}
		</if-not-empty>
		ORDER BY
		SYS_EXTERNAL_KEEP_ID ASC
	</sql-template>

	<sql-template id="SEL_KEEP_NUM">
		SELECT
			KEEP_NUM
		FROM
			KEEP
		WHERE
		<if-not-equals value="0" varName="sysItemId">
			SYS_ITEM_ID = ${sysItemId}
		AND
		</if-not-equals>
			DELETE_FLAG = '0'
	</sql-template>


	<sql-template id="SEL_EXTERNAL_KEEP_NUM">
		SELECT
			KEEP_NUM
		FROM
			EXTERNAL_KEEP
		WHERE
		<if-not-equals value="0" varName="sysItemId">
			SYS_ITEM_ID = ${sysItemId}
		AND
		</if-not-equals>
		<if-not-equals value="" varName="sysExternalWarehouseCode">
			SYS_EXTERNAL_WAREHOUSE_CODE = ${sysExternalWarehouseCode}
		AND
		</if-not-equals>
			DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="INS_DEAD_STOCK">
		INSERT INTO DEAD_STOCK (
		SYS_DEAD_STOCK_ID
		,SYS_ITEM_ID
		,DEAD_REASON
		,ITEM_NUM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${sysDeadStockId}
		,${sysItemId}
		,${deadReason}
		,${itemNum}
		,0
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		)
	</sql-template>

	<sql-template id="UPD_DEAD_STOCK">
		UPDATE DEAD_STOCK SET
		DEAD_REASON = ${deadReason}
		,ITEM_NUM = ${itemNum}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_DEAD_STOCK_ID = ${sysDeadStockId}
	</sql-template>

	<sql-template id="DEL_DEAD_STOCK">
		UPDATE DEAD_STOCK SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_DEAD_STOCK_ID = ${sysDeadStockId}
	</sql-template>

	<sql-template id="SEL_DEAD_STOCK">
		SELECT
		SYS_DEAD_STOCK_ID
		,DEAD_REASON
		,ITEM_NUM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		DEAD_STOCK
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
		ORDER BY
		SYS_DEAD_STOCK_ID ASC
	</sql-template>

	<sql-template id="SEL_UPDATE_DATA_HISTORY">
		SELECT
			SYS_UPDATE_DATA_ID
			,UPDATE_HISTORY
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			UPDATE_DATA_HISTORY
		WHERE
			DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND SYS_ITEM_ID = ${sysItemId}
			AND UPDATE_DATE > current_timestamp - CAST(12 || ' month' AS interval)
		</if-not-equals>
		ORDER BY
			SYS_UPDATE_DATA_ID DESC
		LIMIT 20 OFFSET 0
	</sql-template>

	<sql-template id="SEL_SUPPLIER_LIST">
		SELECT
		M.SYS_SUPPLIER_ID
		,M.COMPANY_FACTORY_NM
		,M.COUNTRY
		,M.CURRENCY_ID
		,M.DELETE_FLAG
		,C.CURRENCY_TYPE
		,C.CURRENCY_NM
		,C.RATE
		FROM
		MST_SUPPLIER AS M
		LEFT JOIN
		(SELECT
		CURRENCY_ID
		,DELETE_FLAG
		,CURRENCY_TYPE
		,CURRENCY_NM
		,RATE
		FROM
		CURRENCY_LEDGER
		WHERE
		DELETE_FLAG ='0'
		)AS C
		ON
		M.CURRENCY_ID = C.CURRENCY_ID
		WHERE
		M.DELETE_FLAG ='0'
		<if-not-equals value="0" varName="sysSupplierId">
			AND M.SYS_SUPPLIER_ID =
			${sysSupplierId}
		</if-not-equals>
		ORDER BY
		M.SYS_SUPPLIER_ID
	</sql-template>

	<sql-template id="UPD_MST_ITEM">
		UPDATE MST_ITEM SET
		ITEM_CODE = ${itemCode}
		,OLD_ITEM_CODE =
		${oldItemCode}
		,ITEM_NM = ${itemNm}
		,CAR_MODEL = ${carModel}
		,MODEL = ${model}
		,MAKER_NM = ${makerNm}
		,ITEM_LEAD_TIME = ${itemLeadTime}
		,PACKING_SIZE = ${packingSize}
		,WEIGHT = ${weight}
		,FACTORY_ITEM_CODE = ${factoryItemCode}
		,PURCHACE_COUNTRY = ${purchaceCountry}
		,PURCHACE_COST = ${purchaceCost}
		,FOREIGN_ITEM_NM = ${foreignItemNm}
		,SYS_SUPPLIER_ID = ${sysSupplierId}
		,PURCHACE_PRICE = ${purchacePrice}
		,LOADING = ${loading}
		,DOCUMENT_REMARKS = ${documentRemarks}
		,SYS_GROUP_NM_ID = ${sysGroupNmId}
		,ORDER_ALERT_NUM = ${orderAlertNum}
		,MANUAL_FLG = ${manualFlg}
		,MINIMUM_ORDER_QUANTITY = ${minimumOrderQuantity}
		<if-not-empty varName="planSheetFlg">
			,PLAN_SHEET_FLG = ${planSheetFlg}
		</if-not-empty>
		<if-not-empty varName="otherDocumentFlg">
			,OTHER_DOCUMENT_FLG =
			${otherDocumentFlg}
		</if-not-empty>
		,SPEC_MEMO = ${specMemo}
		<if-not-empty varName="leaveClassFlg">
			,LEAVE_CLASS_FLG = ${leaveClassFlg}
		</if-not-empty>
		<if-not-empty varName="deadStockFlag">
			,DEAD_STOCK_FLAG = ${deadStockFlag}
		</if-not-empty>
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,HAIBANG_FLG = ${haibangFlg}
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_ITEM_PRICE">
		UPDATE ITEM_PRICE SET
		PRICE = ${price}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ITEM_PRICE_ID = ${sysItemPriceId}
	</sql-template>

	<sql-template id="UPD_ITEM_COST">
		UPDATE ITEM_COST SET
		COST = ${cost}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ITEM_COST_ID = ${sysItemCostId}
	</sql-template>

	<sql-template id="UPD_ARRIVAL_SCHEDULE">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			ITEM_ORDER_DATE = ${itemOrderDate}
			,ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,VAGUE_ARRIVAL_SCHEDULE = ${vagueArrivalSchedule}
			,ARRIVAL_NUM = ${arrivalNum}
			,ARRIVAL_FLAG = ${arrivalFlag}
			,DELETE_FLAG = ${deleteFlag}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
	</sql-template>

	<sql-template id="UPD_ARRIVAL_SCHEDULE_PART">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,ARRIVAL_NUM = ${arrivalNum}
			,ARRIVAL_FLAG = ${arrivalFlag}
		WHERE
			SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
	</sql-template>

	<sql-template id="UPD_ARRIVAL_SCHEDULE_PART_FOREIGN">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,ARRIVAL_NUM = ${arrivalNum}
			,ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,VAGUE_ARRIVAL_SCHEDULE = ${vagueArrivalSchedule}
			,ORDER_STATUS = ${orderStatus}
			,ARRIVAL_FLAG = ${arrivalFlag}
			,ITEM_ORDER_DATE = ${ItemOrderDate}
		WHERE
			SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
		AND
			DELETE_FLAG = '0'
		AND
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_WAREHOUSE_STOCK">
		UPDATE WAREHOUSE_STOCK SET
		SYS_WAREHOUSE_ID = ${sysWarehouseId}
		,STOCK_NUM = ${stockNum}
		,LOCATION_NO = ${locationNo}
		<!-- 優先度を更新しない時があるので分岐します -->
		<if-not-empty varName="priority">
			,PRIORITY = ${priority}
		</if-not-empty>
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_WAREHOUSE_STOCK_ID = ${sysWarehouseStockId}
	</sql-template>

	<sql-template id="UPD_EXTERNAL_STOCK">
		UPDATE EXTERNAL_STOCK SET
			STOCK_NUM = ${stockNum}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_EXTERNAL_STOCK_ID = ${sysExternalStockId}
		<if-not-empty varName="sysExtarnalWarehouseCode">
		AND
			SYS_EXTERNAL_WAREHOUSE_CODE = ${sysExtarnalWarehouseCode}
		</if-not-empty>
	</sql-template>

	<sql-template id="UPD_WAREHOUSE_STOCK_FOREIGN_ITEM">
		UPDATE
			WAREHOUSE_STOCK
		SET
			STOCK_NUM = STOCK_NUM + ${stockNum}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			DELETE_FLAG = '0'
		AND
			PRIORITY = '1'
		AND
			SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_BACK_ORDER">
		UPDATE BACK_ORDER SET
		SYS_CORPORATION_ID =
		${sysCorporationId}
		,SYS_CHANNEL_ID = ${sysChannelId}
		,BACK_ORDER_DATE =
		${backOrderDate}
		,REMARKS = ${remarks}
		,DELETE_FLAG = ${deleteFlag}
		,CREATE_USER_ID =
		${createUserId}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_BACK_ORDER_ID =
		${sysBackOrderId}
	</sql-template>

	<sql-template id="UPD_SET_ITEM">
		UPDATE SET_ITEM SET
		FORM_SYS_ITEM_ID =
		${formSysItemId}
		,ITEM_NUM = ${itemNum}
		,DELETE_FLAG = ${deleteFlag}
		,CREATE_USER_ID = ${createUserId}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_SET_ITEM_ID =
		${sysSetItemId}
	</sql-template>

	<sql-template id="SEL_MST_ITEM">
		SELECT
			MST_ITEM.SYS_ITEM_ID
			,MST_ITEM.ASSEMBLY_NUM
			,ITEM_CODE
			<!-- 商品詳細画面で使用してます -->
			,ITEM_CODE AS BEFORE_ITEM_CODE
			,OLD_ITEM_CODE
			,ITEM_NM
			,CAR_MODEL
			,MODEL
			,MAKER_NM
			,ITEM_LEAD_TIME
			,MONTH_AVG_ORDER_NUM
			,PACKING_SIZE
			,WEIGHT
			,MINIMUM_ORDER_QUANTITY
			,FACTORY_ITEM_CODE
			,PURCHACE_COST
			,PURCHACE_PRICE
			,LOADING
			,FOREIGN_ITEM_NM
			,SYS_SUPPLIER_ID
			,DEAD_STOCK_FLAG
			,DOCUMENT_REMARKS
			,PURCHACE_COUNTRY
			,SYS_GROUP_NM_ID
			,TOTAL_STOCK_NUM
			,ORDER_ALERT_NUM
			,MANUAL_FLG
			,PLAN_SHEET_FLG
			,OTHER_DOCUMENT_FLG
			,SPEC_MEMO
			,SET_ITEM_FLG
			,LEAVE_CLASS_FLG
			,MST_ITEM.DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,TEMPORARY_STOCK_NUM
			,ITEM_COST.COST
			,KIND_COST_TBL.KIND_COST
			,KIND_COST_TBL.KIND_COST_ID
			,ITEM_PRICE.PRICE
			,ASSEMBLY_NUM
			,ANS.ANNUAL_AVERAGE_SALES_NUM
			,HAIBANG_FLG
		FROM
			MST_ITEM
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID AS COST_SYS_ITEM_ID
					,COST
				FROM
					ITEM_COST
				WHERE
					DELETE_FLAG ='0'
				<if-equals value="0" varName="getListFlg">
					AND SYS_CORPORATION_ID = (SELECT
													SYS_CORPORATION_ID
												FROM
													MST_CORPORATION
												WHERE
													FILE_CORPORATION_NM ILIKE 'kts')
				</if-equals>
				<if-equals value="1" varName="getListFlg">
					AND SYS_CORPORATION_ID = ${sysCorporationId}
				</if-equals>
				)ITEM_COST
				ON MST_ITEM.SYS_ITEM_ID = ITEM_COST.COST_SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID
					,SYS_ITEM_COST_ID AS KIND_COST_ID
					,COST AS KIND_COST
				FROM
					ITEM_COST
				WHERE
					DELETE_FLAG ='0'
					AND SYS_CORPORATION_ID = 99)KIND_COST_TBL
			ON MST_ITEM.SYS_ITEM_ID = KIND_COST_TBL.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID AS PRICE_SYS_ITEM_ID
					,PRICE
				FROM
					ITEM_PRICE
				WHERE
					DELETE_FLAG ='0'
				<if-equals value="0" varName="getListFlg">
					AND
					SYS_CORPORATION_ID = (SELECT
												SYS_CORPORATION_ID
											FROM
												MST_CORPORATION
											WHERE
												FILE_CORPORATION_NM ILIKE 'kts')
				</if-equals>
				<if-equals value="1" varName="getListFlg">
					AND
					SYS_CORPORATION_ID = ${sysCorporationId}
				</if-equals>
				)ITEM_PRICE
				ON MST_ITEM.SYS_ITEM_ID = ITEM_PRICE.PRICE_SYS_ITEM_ID
			INNER JOIN ANNUAL_SALES ANS
				ON MST_ITEM.SYS_ITEM_ID = ANS.SYS_ITEM_ID
		WHERE
			MST_ITEM.DELETE_FLAG = '0'
		<if-equals value="1" varName="setItemFlg">
			AND
			SET_ITEM_FLG = '1'
		</if-equals>
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND MST_ITEM.SYS_ITEM_ID = ${sysItemId}
			</if-not-equals>
			<if-not-empty varName="itemCode">
				AND ITEM_CODE = ${itemCode}
			</if-not-empty>
			<if-not-empty varName="oldItemCode">
				AND OLD_ITEM_CODE = ${oldItemCode}
			</if-not-empty>
		</if-equals>
		<if-equals value="1" varName="getListFlg">
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE LIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND TO_NUMBER(ITEM_CODE, '00000000000') &gt;= TO_NUMBER(${itemCodeFrom}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND TO_NUMBER(ITEM_CODE, '00000000000') &lt;= TO_NUMBER(${itemCodeTo}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND (ITEM_NM ILIKE ${itemNm}
				OR ITEM_NM ILIKE ${itemNmHalf}
				OR ITEM_NM ILIKE ${itemNmUpper})
			</if-not-empty>
		</if-equals>
		ORDER BY
			TO_NUMBER(ITEM_CODE, '00000000000')
	</sql-template>

<!-- 	CSV在庫キープ更新用 -->
	<sql-template id="SEL_MST_ITEM_FOR_KEEP">
		SELECT
			*
		FROM
			MST_ITEM
		WHERE
			ITEM_CODE = ${itemCode}
		AND
			DELETE_FLAG = '0'
	</sql-template>

	<!-- テスト用 20140313伊東敦史 start -->
	<sql-template id="test">
		SELECT
		MST_ITEM.SYS_ITEM_ID
		,MST_ITEM.ITEM_CODE
		FROM
		MST_ITEM
		LEFT JOIN
		(
		<sql-ref refId="testAA" alias="cost" />
		)AS COST
		ON
		MST_ITEM.SYS_ITEM_ID = COST.SYS_ITEM_ID
		ORDER BY
		1 = 1
		<if-not-empty varName="testBB">
			,MST_ITEM.SYS_ITEM_ID
		</if-not-empty>
		<if-not-null varName="testBB">
			,MST_ITEM.SYS_ITEM_ID
		</if-not-null>
	</sql-template>
	<sql-template id="testAA">
		SELECT
		COST
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,SYS_ITEM_COST_ID
		FROM
		ITEM_COST
		WHERE
		DELETE_FLAG =
		'0'
	</sql-template>
	<!-- テスト用 20140313伊東敦史 end -->

	<sql-template id="SEL_MST_STORE">
		SELECT
		SYS_STORE_ID
		,STORE_NM
		,SYS_CORPORATION_ID
		,SYS_CHANNEL_ID
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_STORE
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-null varName="sysCorporationId">
				AND
				SYS_CORPORATION_ID =
				${sysCorporationId}
			</if-not-null>
			<if-not-null varName="sysChannelId">
				AND
				SYS_CHANNEL_ID = ${sysChannelId}
			</if-not-null>
		</if-equals>
	</sql-template>

	<sql-template id="SEL_WAREHOUSE_STOCK_LIST">
		SELECT
		SYS_WAREHOUSE_STOCK_ID
		,SYS_ITEM_ID
		,SYS_WAREHOUSE_ID
		,STOCK_NUM
		,LOCATION_NO
		,PRIORITY
		,TO_NUMBER(PRIORITY, '000')AS PRIORITY_NUMBER
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		WAREHOUSE_STOCK
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="sysItemId">
			AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-null>
		<if-equals value="1" varName="getSortFlg">
			ORDER BY
			TO_NUMBER(PRIORITY,
			'000')
		</if-equals>
	</sql-template>

	<sql-template id="SEL_WAREHOUSE_STOCK_NUM_TOTAL">
		SELECT
			SUM(STOCK_NUM) AS STOCK_NUM
		FROM
			WAREHOUSE_STOCK
		WHERE
			DELETE_FLAG = '0'
		<if-not-null varName="sysItemId">
		AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-null>
	</sql-template>


	<sql-template id="SEL_WAREHOUSE_STOCK">
		SELECT
			SYS_WAREHOUSE_STOCK_ID
			,SYS_ITEM_ID
			,SYS_WAREHOUSE_ID
			,STOCK_NUM
			,LOCATION_NO
			,PRIORITY
			,TO_NUMBER(PRIORITY,
			'000')AS PRIORITY_NUMBER
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			WAREHOUSE_STOCK
		WHERE
			DELETE_FLAG = '0'
		AND
			SYS_ITEM_ID = ${sysItemId}
		AND
			SYS_WAREHOUSE_ID = ${sysWarehouseId}
	</sql-template>

	<sql-template id="SEL_EXTERNAL_STOCK_LIST">
		SELECT
			SYS_EXTERNAL_STOCK_ID
			,SYS_ITEM_ID
			,SYS_EXTERNAL_WAREHOUSE_CODE
			,STOCK_NUM
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			EXTERNAL_STOCK
		WHERE
			DELETE_FLAG = '0'
		AND
			SYS_ITEM_ID = ${sysItemId}
		<if-not-null varName="sysExternalWarehouseCode">
		AND
			SYS_EXTERNAL_WAREHOUSE_CODE = ${sysExternalWarehouseCode}
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_ARRIVAL_SCHEDULE">
		SELECT
			ARS.SYS_ARRIVAL_SCHEDULE_ID
			,FS.PO_NO
			,ARS.SYS_ITEM_ID
			,ARS.ORDER_STATUS
			,ARS.SYS_FOREIGN_SLIP_ID
			,ARS.ITEM_ORDER_DATE
			,ARS.ARRIVAL_SCHEDULE_DATE
			,ARS.VAGUE_ARRIVAL_SCHEDULE
			,ARS.ARRIVAL_NUM AS ARRIVAL_SCHEDULE_NUM
			,ARS.ARRIVAL_NUM
			,ARS.ARRIVAL_FLAG
			,ARS.DELETE_FLAG
			,ARS.CREATE_DATE
			,ARS.CREATE_USER_ID
			,ARS.UPDATE_DATE
			,ARS.UPDATE_USER_ID
		FROM
			ARRIVAL_SCHEDULE ARS
			LEFT JOIN FOREIGN_ITEM FI
			ON (ARS.SYS_FOREIGN_SLIP_ID = FI.SYS_FOREIGN_SLIP_ID
				AND ARS.SYS_FOREIGN_SLIP_ITEM_ID = FI.SYS_FOREIGN_SLIP_ITEM_ID
				)
			LEFT JOIN FOREIGN_SLIP FS
			ON (ARS.SYS_FOREIGN_SLIP_ID = FS.SYS_FOREIGN_SLIP_ID
				AND FI.SYS_FOREIGN_SLIP_ID = FS.SYS_FOREIGN_SLIP_ID
				AND FS.DELETE_FLAG = '0')
		WHERE
			ARS.DELETE_FLAG = '0'
			AND (FI.DELETE_FLAG = '0' OR FI.DELETE_FLAG IS NULL)
			AND ARS.ARRIVAL_FLAG = ${arrivalFlag}
		<if-not-null varName="sysItemId">
			<if-not-equals value="0" varName="sysItemId">
					AND ARS.SYS_ITEM_ID = ${sysItemId}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="sysArrivalScheduleId">
			<if-not-equals value="0" varName="sysArrivalScheduleId">
					AND ARS.SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
			</if-not-equals>
		</if-not-null>
		ORDER BY
		<if-equals value="0" varName="arrivalFlag">
				ARS.ARRIVAL_SCHEDULE_DATE ASC
		</if-equals>
		<if-equals value="1" varName="arrivalFlag">
				ARS.ARRIVAL_SCHEDULE_DATE DESC
		</if-equals>
				,ARS.SYS_ARRIVAL_SCHEDULE_ID
	</sql-template>

	<sql-template id="SEL_FOREIGN_ARRIVAL_SCHEDULE">
		SELECT DISTINCT
			ARS.SYS_ARRIVAL_SCHEDULE_ID
			,FS.PO_NO
			,ARS.SYS_ITEM_ID
			,ARS.ORDER_STATUS
			,ARS.SYS_FOREIGN_SLIP_ID
			,ARS.SYS_FOREIGN_SLIP_ITEM_ID
			,ARS.ITEM_ORDER_DATE
			,ARS.ARRIVAL_SCHEDULE_DATE
			,ARS.VAGUE_ARRIVAL_SCHEDULE
			,ARS.ARRIVAL_NUM AS ARRIVAL_SCHEDULE_NUM
			,ARS.ARRIVAL_NUM
			,ARS.ARRIVAL_FLAG
			,ARS.DELETE_FLAG
			,ARS.CREATE_DATE
			,ARS.CREATE_USER_ID
			,ARS.UPDATE_DATE
			,ARS.UPDATE_USER_ID
		FROM
			ARRIVAL_SCHEDULE ARS
			LEFT JOIN FOREIGN_ITEM FI
			ON (ARS.SYS_FOREIGN_SLIP_ID = FI.SYS_FOREIGN_SLIP_ID
				AND ARS.SYS_ITEM_ID = FI.SYS_ITEM_ID
				AND FI.DELETE_FLAG = '0')
			LEFT JOIN FOREIGN_SLIP FS
			ON (ARS.SYS_FOREIGN_SLIP_ID = FS.SYS_FOREIGN_SLIP_ID
				AND FI.SYS_FOREIGN_SLIP_ID = FS.SYS_FOREIGN_SLIP_ID
				AND FS.DELETE_FLAG = '0')
		WHERE
			ARS.DELETE_FLAG = '0'
			AND ARS.ARRIVAl_FLAG = '0'
		<if-not-null varName="sysItemId">
			<if-not-equals value="0" varName="sysItemId">
					AND ARS.SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="sysArrivalScheduleId">
			<if-not-equals value="0" varName="sysArrivalScheduleId">
					AND ARS.SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
			</if-not-equals>
		</if-not-null>
		ORDER BY
			ARS.SYS_ARRIVAL_SCHEDULE_ID
	</sql-template>

	<sql-template id="SEL_BACK_ORDER">
		SELECT
		SYS_BACK_ORDER_ID
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,SYS_CHANNEL_ID
		,BACK_ORDER_DATE
		,REMARKS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		BACK_ORDER
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID =
			${sysItemId}
		</if-not-equals>
	</sql-template>

	<sql-template id="SEL_ALL_SET_ITEM">
		SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND
		SET_ITEM_FLG = '1'
	</sql-template>

	<sql-template id="SEL_SET_ITEM">
		SELECT
		SYS_SET_ITEM_ID
		,SET_ITEM.SYS_ITEM_ID
		,FORM_SYS_ITEM_ID
		,ITEM_NUM
		,ITEM_CODE
		,ITEM_NM
		,TOTAL_STOCK_NUM
		,LEAVE_CLASS_FLG

		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		SET_ITEM

		LEFT JOIN
		(
		SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,TOTAL_STOCK_NUM
		,LEAVE_CLASS_FLG
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		) AS MST_ITEM
		ON
		SET_ITEM.FORM_SYS_ITEM_ID = MST_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SET_ITEM.SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
	</sql-template>

	<sql-template id="SEL_SET_ITEM_INFO">
		SELECT
		SET_ITEM.FORM_SYS_ITEM_ID
		,SET_ITEM.ITEM_NUM
		,LEAVE_CLASS_FLG
		,SPEC_MEMO
		FROM
		(SELECT
		FORM_SYS_ITEM_ID
		,ITEM_NUM
		FROM
		SET_ITEM
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND DELETE_FLAG = '0') AS SET_ITEM

		LEFT JOIN
		(
		SELECT
		SYS_ITEM_ID
		,LEAVE_CLASS_FLG
		,SPEC_MEMO
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		) AS MST_ITEM

		ON SET_ITEM.FORM_SYS_ITEM_ID = MST_ITEM.SYS_ITEM_ID
	</sql-template>

	<sql-template id="SEL_SET_ITEM_LEAVE_CLASS_FLG_ON">
		SELECT
		SYS_SET_ITEM_ID
		,SET_ITEM.SYS_ITEM_ID
		,FORM_SYS_ITEM_ID
		,ITEM_NUM
		,ITEM_CODE
		,ITEM_NM
		,LEAVE_CLASS_FLG

		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		SET_ITEM

		LEFT JOIN
		(
		SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,LEAVE_CLASS_FLG
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND LEAVE_CLASS_FLG = '1'
		) AS MST_ITEM
		ON
		SET_ITEM.FORM_SYS_ITEM_ID = MST_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
<!-- 		セット商品出庫処理後、そのセット商品の構成商品を構成商品とする別のセット商品の組立可数が変化しない不具合 -->
<!-- 		修正の際は↓の”AND LEAVE_CLASS_FLG = '1'”をコメントアウトしてください (ただし、処理時間が長くなります 20170725現在)-->
<!-- 		諸事情によりコメントを外しました -->
		AND LEAVE_CLASS_FLG = '1'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SET_ITEM.SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
	</sql-template>

	<sql-template id="SEL_ITEM_COST">
		SELECT
			M_CORPORATION.SYS_CORPORATION_ID
			,M_CORPORATION.CORPORATION_NM
			,COALESCE(COST.SYS_ITEM_COST_ID, 0)AS SYS_ITEM_COST_ID
			,COALESCE(COST.COST, 0)AS COST
			,COST.SYS_ITEM_ID
		FROM
			(SELECT
				SYS_CORPORATION_ID
				,CORPORATION_NM
			FROM
				MST_CORPORATION
			WHERE
				DELETE_FLAG = '0')AS M_CORPORATION
			LEFT JOIN
				(SELECT
					COST
					,SYS_ITEM_ID
					,SYS_CORPORATION_ID
					,SYS_ITEM_COST_ID
				FROM
					ITEM_COST
				WHERE
					DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
				AND
					SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
				)AS COST
			ON
				M_CORPORATION.SYS_CORPORATION_ID = COST.SYS_CORPORATION_ID
		<if-not-null varName="sysCorporationId">
		WHERE
			COST.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-null>
		ORDER BY
			M_CORPORATION.SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="SEL_ITEM_PRICE">
		SELECT
		M_CORPORATION.SYS_CORPORATION_ID
		,M_CORPORATION.CORPORATION_NM
		,COALESCE(PRICE.SYS_ITEM_PRICE_ID, 0)AS SYS_ITEM_PRICE_ID
		,COALESCE(PRICE.PRICE, 0)AS PRICE
		,PRICE.SYS_ITEM_ID
		FROM
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		DELETE_FLAG =
		'0')AS M_CORPORATION
		LEFT JOIN
		(SELECT
		PRICE
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,SYS_ITEM_PRICE_ID
		FROM
		ITEM_PRICE
		WHERE
		DELETE_FLAG =
		'0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID =
			${sysItemId}
		</if-not-equals>
		)AS PRICE
		ON
		M_CORPORATION.SYS_CORPORATION_ID = PRICE.SYS_CORPORATION_ID
		ORDER BY
		M_CORPORATION.SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="SEL_ITEM_MANUAL">
		SELECT
		SYS_ITEM_MANUAL_ID
		,SYS_ITEM_ID
		,MANUAL_PATH
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DOCUMENT_TYPE
		FROM
		ITEM_MANUAL
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="1" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND
				SYS_ITEM_ID =
				${sysItemId}
			</if-not-equals>
		</if-equals>

		<if-equals value="0" varName="getListFlg">
			AND
			SYS_ITEM_MANUAL_ID =
			${sysItemManualId}
		</if-equals>
	</sql-template>

	<!-- 在庫一覧 -->
	<sql-template id="SEL_SEARCH_ITEM_LIST">
		SELECT DISTINCT
			M_ITEM.SYS_ITEM_ID
			,M_ITEM.ITEM_CODE
			,M_ITEM.OLD_ITEM_CODE
			,M_ITEM.ITEM_NM
			,M_ITEM.SYS_GROUP_NM_ID
			,M_ITEM.TOTAL_STOCK_NUM
			,M_ITEM.TOTAL_STOCK_NUM AS TOTAL_STOCK_NUM_INPUT
			,M_ITEM.TEMPORARY_STOCK_NUM
			,M_ITEM.ORDER_ALERT_NUM
			,M_ITEM.MANUAL_FLG
			,M_ITEM.PLAN_SHEET_FLG
			,M_ITEM.OTHER_DOCUMENT_FLG
			,M_ITEM.SPEC_MEMO
			,M_ITEM.SET_ITEM_FLG
			,M_ITEM.DELETE_FLAG
			,M_ITEM.COST
			,M_ITEM.ASSEMBLY_NUM
			,M_ITEM.FACTORY_ITEM_CODE
			,M_ITEM.COMPANY_FACTORY_NM
			,M_ITEM.ORDER_POOL_FLG
			,M_ITEM.ORDER_NUM
			,M_ITEM.MINIMUM_ORDER_QUANTITY
			,M_ITEM.CAR_MODEL
			,M_ITEM.MODEL
			,M_ITEM.ITEM_LEAD_TIME
			,M_ITEM.SYS_SUPPLIER_ID
			,HAIBANG_FLG
			,ANS.ANNUAL_AVERAGE_SALES_NUM
			,ANS.ONE_MONTH_AGO
			,ANS.TWO_MONTH_AGO
			,ANS.THREE_MONTH_AGO
			,ANS.FOUR_MONTH_AGO
			,ANS.FIVE_MONTH_AGO
			,ANS.SIX_MONTH_AGO
			,ANS.SEVEN_MONTH_AGO
			,ANS.EIGHT_MONTH_AGO
			,ANS.NINE_MONTH_AGO
			,ANS.TEN_MONTH_AGO
			,ANS.ELEVEN_MONTH_AGO
			,ANS.TWELVE_MONTH_AGO

			<!--,A_S_ORDER_DATE.SYS_ITEM_ID -->
			,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			,A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE
			,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			,A_S_ORDER_DATE.ITEM_ORDER_DATE
			,A_S_ORDER_DATE.ARRIVAL_NUM

			<!--,B_ORDER.SYS_ITEM_ID -->
			,B_ORDER.BACK_ORDER_DATE
			,B_ORDER.BACK_ORDER_COUNT

			<!--,W_STOCK.SYS_ITEM_ID -->
			,W_STOCK.SYS_WAREHOUSE_ID
			,W_STOCK.STOCK_NUM
			,W_STOCK.WAREHOUSE_NM
			,W_STOCK.LOCATION_NO
			,W_STOCK.SYS_WAREHOUSE_STOCK_ID
			<!--,W_STOCK.STOCK_NUM -->
			,TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000')
			<!-- 未入荷商品総合計 -->
			<if-not-empty varName="sysItemId">
				<if-not-equals value="0" varName="sysItemId">
					,(SELECT
						SUM(ARRIVAL_NUM)
					FROM
						ARRIVAL_SCHEDULE
					WHERE
						ARRIVAL_FLAG = '0'
						AND SYS_ITEM_ID = ${sysItemId}
						AND DELETE_FLAG = '0') AS SUM_NOT_IN_STOCK
				</if-not-equals>
			</if-not-empty>
		FROM
			(SELECT
				MST_ITEM.SYS_ITEM_ID
				,MST_ITEM.ASSEMBLY_NUM
				,ITEM_CODE
				,OLD_ITEM_CODE
				,ITEM_NM
				,SYS_GROUP_NM_ID
				,TOTAL_STOCK_NUM
				,TEMPORARY_STOCK_NUM
				,ORDER_ALERT_NUM
				,MANUAL_FLG
				,PLAN_SHEET_FLG
				,OTHER_DOCUMENT_FLG
				,SPEC_MEMO
				,SET_ITEM_FLG
				,MST_ITEM.DELETE_FLAG
				,ITEM_COST.COST
				,FACTORY_ITEM_CODE
				,MST_ITEM.SYS_SUPPLIER_ID
				,DEAD_STOCK_FLAG
				,ORDER_POOL_FLG
				,COMPANY_FACTORY_NM
				,MST_ITEM.ORDER_NUM
				,MINIMUM_ORDER_QUANTITY
				,CAR_MODEL
				,MODEL
				,ITEM_LEAD_TIME
				,HAIBANG_FLG

			FROM
				MST_ITEM
				 INNER JOIN   ITEM_COST  ON (MST_ITEM.SYS_ITEM_ID = ITEM_COST.SYS_ITEM_ID AND    ITEM_COST.DELETE_FLAG ='0'  AND ITEM_COST.SYS_CORPORATION_ID = (SELECT SYS_CORPORATION_ID FROM MST_CORPORATION WHERE	 FILE_CORPORATION_NM ILIKE 'kts') )
				<!-- 会社・工場名 -->

					LEFT JOIN MST_SUPPLIER MSP
						ON (MST_ITEM.SYS_SUPPLIER_ID = MSP.SYS_SUPPLIER_ID
							AND MSP.DELETE_FLAG = '0'
					)
				<if-equals value="4" varName="itemCodeType">
				<!-- 入力された品番を構成品番としている商品を取得 -->
					INNER JOIN
						(SELECT
							SI.SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0'
						) SITEM
					ON MST_ITEM.SYS_ITEM_ID = SITEM.SYS_ITEM_ID
					AND SITEM.DELETE_FLAG = '0'
				</if-equals>
				<if-equals value="5" varName="itemCodeType">
					<!-- 入力された品番の商品と、その品番を構成品番としている商品を取得 -->
					INNER JOIN
						(SELECT
							SI.SYS_ITEM_ID AS SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG S_DELETE_FLAG
							,MI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
							AND MI.DELETE_FLAG = '0'
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0'
						UNION SELECT distinct
							MI.SYS_ITEM_ID AS SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG S_DELETE_FLAG
							,MI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
							AND MI.DELETE_FLAG = '0'
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0') SITEM
					ON MST_ITEM.SYS_ITEM_ID = SITEM.SYS_ITEM_ID
					AND SITEM.DELETE_FLAG = '0'
					</if-equals>


			WHERE
				MST_ITEM.DELETE_FLAG = '0'

				<if-not-empty varName="itemNm">
					AND
					ITEM_NM ILIKE ${itemNm}
					OR
					ITEM_NM ILIKE ${itemNmHalf}
					OR
					ITEM_NM ILIKE ${itemNmUpper}
				</if-not-empty>
				<if-equals value="1" varName="setItemFlg">
					AND
					SET_ITEM_FLG = ${setItemFlg}
				</if-equals>
			)AS M_ITEM
		LEFT JOIN
			(SELECT
				A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID
				,A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE
				,A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID
				,A_S_ORDER_DATE.ITEM_ORDER_DATE
				,A_S_ORDER_DATE.ARRIVAL_NUM
			FROM
				(SELECT
					SYS_ITEM_ID
					,MIN(ARRIVAL_SCHEDULE_DATE)AS ARRIVAL_SCHEDULE_DATE
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '0'
				GROUP BY
					SYS_ITEM_ID
				)AS A_S_ARRIVAL_SCHEDULE_DATE
			INNER JOIN
				(SELECT
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE
					,MIN(SYS_ARRIVAL_SCHEDULE_ID)AS SYS_ARRIVAL_SCHEDULE_ID
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '0'
				GROUP BY
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE
				)AS A_S_ARRIVAL_SCHEDULE_DATE_ID

			ON A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE = A_S_ARRIVAL_SCHEDULE_DATE_ID.ARRIVAL_SCHEDULE_DATE
				AND A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID = A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ITEM_ID
			INNER JOIN
				(SELECT
					SYS_ARRIVAL_SCHEDULE_ID
					,ITEM_ORDER_DATE
					,ARRIVAL_NUM
				FROM
					ARRIVAL_SCHEDULE
				) AS A_S_ORDER_DATE
			ON A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID = A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			)AS A_S_ORDER_DATE
		ON M_ITEM.SYS_ITEM_ID = A_S_ORDER_DATE.SYS_ITEM_ID


		LEFT JOIN
			(SELECT
				SYS_ITEM_ID
				,MIN(BACK_ORDER_DATE)AS BACK_ORDER_DATE
				,COUNT(SYS_ITEM_ID)AS BACK_ORDER_COUNT
			FROM
				BACK_ORDER
			WHERE
				DELETE_FLAG = '0'
			GROUP BY
				SYS_ITEM_ID
			)AS B_ORDER
		ON M_ITEM.SYS_ITEM_ID = B_ORDER.SYS_ITEM_ID

		LEFT JOIN
			(SELECT
				W_S_PRIORITY.SYS_ITEM_ID
				,W_S_PRIORITY_WAREHOUSE_NM.WAREHOUSE_NM
				,W_S_PRIORITY_WAREHOUSE_NM.LOCATION_NO
				,W_S_PRIORITY_WAREHOUSE_NM.STOCK_NUM
				,W_S_PRIORITY_WAREHOUSE_NM.SYS_WAREHOUSE_ID
				,SYS_WAREHOUSE_STOCK_ID
			FROM
				(SELECT
					SYS_ITEM_ID
					,MIN(TO_NUMBER(PRIORITY, '00'))AS PRIORITY
				FROM
					WAREHOUSE_STOCK
				WHERE
					DELETE_FLAG = '0'
				<if-not-equals value="0" varName="sysWarehouseId">
					AND
					SYS_WAREHOUSE_ID = ${sysWarehouseId}
				</if-not-equals>

				GROUP BY
					SYS_ITEM_ID
				)AS W_S_PRIORITY
			INNER JOIN
				(SELECT
					SYS_WAREHOUSE_STOCK_ID
					,TO_NUMBER(PRIORITY, '00')AS PRIORITY
					,SYS_ITEM_ID
					,LOCATION_NO
					,STOCK_NUM
					,M_WAREHOUSE.SYS_WAREHOUSE_ID
					,WAREHOUSE_NM
				FROM
					WAREHOUSE_STOCK
					INNER JOIN
						(SELECT
							SYS_WAREHOUSE_ID
							,WAREHOUSE_NM
						FROM
							MST_WAREHOUSE
						)AS M_WAREHOUSE
					ON M_WAREHOUSE.SYS_WAREHOUSE_ID = WAREHOUSE_STOCK.SYS_WAREHOUSE_ID
				WHERE WAREHOUSE_STOCK.DELETE_FLAG = '0'
				)AS W_S_PRIORITY_WAREHOUSE_NM
			ON W_S_PRIORITY.PRIORITY = W_S_PRIORITY_WAREHOUSE_NM.PRIORITY
			AND W_S_PRIORITY.SYS_ITEM_ID = W_S_PRIORITY_WAREHOUSE_NM.SYS_ITEM_ID

			)AS W_STOCK

		ON M_ITEM.SYS_ITEM_ID = W_STOCK.SYS_ITEM_ID

			<!-- 入荷日 -->
		<if-equals value="1" varName="arrivalDateInput">
			INNER JOIN
				(SELECT
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE AS ARRIVAL_HISTOR_DATE
					,SYS_ARRIVAL_SCHEDULE_ID AS SYS_ARRIVAL_HISTOR_ID
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '1'
					<if-not-empty varName="arrivalDateFrom">
						AND ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalDateFrom}
					</if-not-empty>
					<if-not-empty varName="arrivalDateTo">
						AND ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalDateTo}
					</if-not-empty>
				) ARRIAL_HISTORY
			ON M_ITEM.SYS_ITEM_ID = ARRIAL_HISTORY.SYS_ITEM_ID
		</if-equals>

		INNER JOIN ANNUAL_SALES ANS
		ON (ANS.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
			AND ANS.DELETE_FLAG = '0')

		WHERE
			M_ITEM.DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND
				M_ITEM.SYS_ITEM_ID
				= ${sysItemId}
			</if-not-equals>
		</if-equals>
		<if-not-empty varName="itemCode">
			<if-equals value="1" varName="itemCodeType">
				AND
				M_ITEM.ITEM_CODE LIKE
				${itemCode}
			</if-equals>
			<if-equals value="2" varName="itemCodeType">
				AND
				M_ITEM.OLD_ITEM_CODE LIKE
				${itemCode}
			</if-equals>
			<if-equals value="3" varName="itemCodeType">
				AND
				M_ITEM.FACTORY_ITEM_CODE LIKE
				${itemCode}
			</if-equals>
		</if-not-empty>
		<if-not-equals value="0" varName="stockNum">
			<if-equals value="0" varName="sysWarehouseId">
				<if-equals value="1" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM = ${stockNum}
				</if-equals>
				<if-equals value="2" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM &gt;= ${stockNum}
				</if-equals>
				<if-equals value="3" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM &lt;= ${stockNum}
				</if-equals>
			</if-equals>
			<if-not-equals value="0" varName="sysWarehouseId">
				<if-equals value="1" varName="numberOrder">
					AND W_STOCK.STOCK_NUM = ${stockNum}
				</if-equals>
				<if-equals value="2" varName="numberOrder">
					AND W_STOCK.STOCK_NUM &gt;= ${stockNum}
				</if-equals>
				<if-equals value="3" varName="numberOrder">
					AND W_STOCK.STOCK_NUM &lt;= ${stockNum}
				</if-equals>
			</if-not-equals>
		</if-not-equals>

		<if-equals value="1" varName="setItemFlg">
			AND
			M_ITEM.SET_ITEM_FLG =
			${setItemFlg}
		</if-equals>

		<if-not-empty varName="locationNo">
			AND
			LOCATION_NO ILIKE ${locationNo}
		</if-not-empty>

		<if-equals value="1" varName="orderAlertFlg">
			AND
			M_ITEM.TOTAL_STOCK_NUM &lt;=
			M_ITEM.ORDER_ALERT_NUM
		</if-equals>

		<if-equals value="1" varName="deliveryAlertFlg">
			AND
				(CASE WHEN M_ITEM.ITEM_LEAD_TIME = '0' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  1 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '1' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  1.5 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '2' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  2 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '3' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  3 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '4' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  4 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '5' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  5 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '6' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  6 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '' THEN M_ITEM.TOTAL_STOCK_NUM &lt;= ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME IS NULL THEN M_ITEM.TOTAL_STOCK_NUM &lt;= ANNUAL_AVERAGE_SALES_NUM
					END)
		</if-equals>

		<if-not-empty varName="companyFactoryNm">
			AND M_ITEM.COMPANY_FACTORY_NM LIKE ${companyFactoryNm}
		</if-not-empty>

		<if-not-empty varName="costFrom">
			AND
			M_ITEM.COST &gt;=
			TO_NUMBER(${costFrom}, '00000000')
		</if-not-empty>

		<if-not-empty varName="costTo">
			AND
			M_ITEM.COST &lt;=
			TO_NUMBER(${costTo}, '00000000')
		</if-not-empty>

		<!-- <if-equals value="1" varName="backOrderFlg"> -->
		<!-- AND -->
		<!-- B_ORDER.BACK_ORDER_COUNT &gt; 0 -->
		<!-- </if-equals> -->

		<if-equals value="1" varName="keepFlg">
			AND
			M_ITEM.TOTAL_STOCK_NUM !=
			M_ITEM.TEMPORARY_STOCK_NUM
		</if-equals>

		<if-equals value="1" varName="manualFlg">
			AND
			M_ITEM.MANUAL_FLG = '1'
		</if-equals>

		<if-equals value="1" varName="planSheetFlg">
			AND
			M_ITEM.PLAN_SHEET_FLG = '1'
		</if-equals>

		<if-equals value="1" varName="otherDocumentFlg">
			AND
			M_ITEM.OTHER_DOCUMENT_FLG =
			'1'
		</if-equals>

		<if-equals value="1" varName="overArrivalScheduleFlg">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt; to_char(current_timestamp,
			'yyyy/mm/dd')
		</if-equals>

		<if-equals value="1" varName="arrivalScheduleFlg">
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE != ''
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE IS NOT NULL
		</if-equals>

		<if-not-empty varName="itemOrderDateFrom">
			AND
			A_S_ORDER_DATE.ITEM_ORDER_DATE
			&gt;= ${itemOrderDateFrom}
		</if-not-empty>

		<if-not-empty varName="itemOrderDateTo">
			AND
			A_S_ORDER_DATE.ITEM_ORDER_DATE
			&lt;= ${itemOrderDateTo}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateFrom">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateTo">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
		</if-not-empty>

		<if-not-empty varName="backOrderDateFrom">
			AND
			B_ORDER.BACK_ORDER_DATE &gt;=
			${backOrderDateFrom}
		</if-not-empty>

		<if-not-empty varName="backOrderDateTo">
			AND
			B_ORDER.BACK_ORDER_DATE &lt;=
			${backOrderDateTo}
		</if-not-empty>

		<if-equals value="1" varName="deadStockFlg">
			AND
			M_ITEM.DEAD_STOCK_FLAG = ${deadStockFlg}
		</if-equals>

		<if-equals value="1" varName="orderPoolFlg">
			AND
			M_ITEM.ORDER_POOL_FLG = ${orderPoolFlg}
		</if-equals>

		<if-not-empty varName="sysSupplierId">
			AND
			M_ITEM.SYS_SUPPLIER_ID = ${sysSupplierId}
		</if-not-empty>
		<if-not-empty varName="specMemo">
			AND M_ITEM.SPEC_MEMO ILIKE ${specMemo}
		</if-not-empty>
		<if-equals value="1" varName="orderNum0Flg">
			AND CASE WHEN ORDER_POOL_FLG = '0' THEN (ORDER_NUM = 0 or ORDER_NUM is null)
				AND (M_ITEM.MINIMUM_ORDER_QUANTITY = 0 or M_ITEM.MINIMUM_ORDER_QUANTITY is null)
			WHEN ORDER_POOL_FLG = '1' THEN (ORDER_NUM = 0 or ORDER_NUM is null)
			END
		</if-equals>
		<if-not-equals value="1" varName="haibangFlgIgnore">
			<if-equals value="1" varName="haibangFlg">
				AND M_ITEM.HAIBANG_FLG = ${haibangFlg}
			</if-equals>
			<if-equals value="0" varName="haibangFlg">
				AND (M_ITEM.HAIBANG_FLG = '0' OR M_ITEM.HAIBANG_FLG IS NULL) 
			</if-equals>
		</if-not-equals>

<!-- 		<if-not-empty varName="itemCodeFrom"> -->
<!-- 			AND -->
<!-- 			TO_NUMBER(M_ITEM.ITEM_CODE, -->
<!-- 			'00000000000') &gt;= -->
<!-- 			TO_NUMBER(${itemCodeFrom}, '00000000000') -->
<!-- 		</if-not-empty> -->

<!-- 		<if-not-empty varName="itemCodeTo"> -->
<!-- 			AND -->
<!-- 			TO_NUMBER(M_ITEM.ITEM_CODE, -->
<!-- 			'00000000000') &lt;= -->
<!-- 			TO_NUMBER(${itemCodeTo}, '00000000000') -->
<!-- 		</if-not-empty> -->



		<if-not-null varName="sortFirst">
			ORDER BY
			<if-equals value="1" varName="sortFirst">
				TO_NUMBER(M_ITEM.ITEM_CODE,
				'00000000000')
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				M_ITEM.FACTORY_ITEM_CODE
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				M_ITEM.COMPANY_FACTORY_NM
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				M_ITEM.ITEM_NM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				M_ITEM.TOTAL_STOCK_NUM
			</if-equals>
		</if-not-null>
		<if-not-null varName="sortFirstSub">
			<if-equals value="1" varName="sortFirstSub">
				ASC
			</if-equals>
			<if-equals value="2" varName="sortFirstSub">
				DESC
			</if-equals>
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_ARRIVAL_SCHEDULE_FOR_KEEP">
    SELECT
        *
    FROM
        ARRIVAL_SCHEDULE
    WHERE
        SYS_ITEM_ID = ${sysItemId}
    AND
        DELETE_FLAG = '0'
    AND
        ARRIVAL_FLAG = '0'
   	order by 
   		arrival_schedule_date;
    </sql-template>

	<!-- 在庫一覧ダウンロード -->

	<sql-template id="SEL_EXPORT_ITEM_LIST">
	SELECT DISTINCT
		M_ITEM.SYS_ITEM_ID
		,M_ITEM.ITEM_CODE
		,M_ITEM.OLD_ITEM_CODE
		,M_ITEM.ITEM_NM
		,M_ITEM.SYS_GROUP_NM_ID
		,M_ITEM.TOTAL_STOCK_NUM
		,M_ITEM.TOTAL_STOCK_NUM AS TOTAL_STOCK_NUM_INPUT
		,M_ITEM.TEMPORARY_STOCK_NUM
		,M_ITEM.ORDER_ALERT_NUM
		,M_ITEM.MANUAL_FLG
		,M_ITEM.PLAN_SHEET_FLG
		,M_ITEM.OTHER_DOCUMENT_FLG
		,M_ITEM.SPEC_MEMO
		,M_ITEM.SET_ITEM_FLG
		,M_ITEM.DELETE_FLAG
		,M_ITEM.COST
		,M_ITEM.ASSEMBLY_NUM
		,M_ITEM.FACTORY_ITEM_CODE
		,M_ITEM.COMPANY_FACTORY_NM
		,M_ITEM.ORDER_POOL_FLG
		,M_ITEM.ORDER_NUM
		,M_ITEM.MINIMUM_ORDER_QUANTITY
		,M_ITEM.CURRENCY_NM
		,M_ITEM.COUNTRY
		,M_ITEM.CAR_MODEL
		,M_ITEM.MODEL
		,M_ITEM.ITEM_LEAD_TIME
		,M_ITEM.FOREIGN_ITEM_NM
		,M_ITEM.MAKER_NM
		,M_ITEM.PURCHACE_COST
		,M_ITEM.PACKING_SIZE
		,M_ITEM.WEIGHT
		,M_ITEM.DOCUMENT_REMARKS
		,M_ITEM.SYS_SUPPLIER_ID

		<!-- 年間販売情報 -->
		,ANS.ANNUAL_AVERAGE_SALES_NUM
		,ANS.ONE_MONTH_AGO
		,ANS.TWO_MONTH_AGO
		,ANS.THREE_MONTH_AGO
		,ANS.FOUR_MONTH_AGO
		,ANS.FIVE_MONTH_AGO
		,ANS.SIX_MONTH_AGO
		,ANS.SEVEN_MONTH_AGO
		,ANS.EIGHT_MONTH_AGO
		,ANS.NINE_MONTH_AGO
		,ANS.TEN_MONTH_AGO
		,ANS.ELEVEN_MONTH_AGO
		,ANS.TWELVE_MONTH_AGO

		<!--,A_S_ORDER_DATE.SYS_ITEM_ID -->
		,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
		,A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE
		,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
		,A_S_ORDER_DATE.ITEM_ORDER_DATE
		,A_S_ORDER_DATE.ARRIVAL_NUM

		<!--,B_ORDER.SYS_ITEM_ID -->
		,B_ORDER.BACK_ORDER_DATE
		,B_ORDER.BACK_ORDER_COUNT

		<!--,W_STOCK.SYS_ITEM_ID -->
		,W_STOCK.SYS_WAREHOUSE_ID
		,W_STOCK.STOCK_NUM
		,W_STOCK.WAREHOUSE_NM
		,W_STOCK.LOCATION_NO
		,W_STOCK.SYS_WAREHOUSE_STOCK_ID
		<!--,W_STOCK.STOCK_NUM -->
		,TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000')
		,(SELECT
			SUM(ARRIVAL_NUM)
		FROM
			ARRIVAL_SCHEDULE
		WHERE
			ARRIVAL_FLAG = '0'
			AND SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
			AND DELETE_FLAG = '0') AS SUM_NOT_IN_STOCK

		FROM
			(SELECT
				MST_ITEM.SYS_ITEM_ID
				,MST_ITEM.ASSEMBLY_NUM
				,ITEM_CODE
				,OLD_ITEM_CODE
				,ITEM_NM
				,SYS_GROUP_NM_ID
				,TOTAL_STOCK_NUM
				,TEMPORARY_STOCK_NUM
				,ORDER_ALERT_NUM
				,MANUAL_FLG
				,PLAN_SHEET_FLG
				,OTHER_DOCUMENT_FLG
				,SPEC_MEMO
				,SET_ITEM_FLG
				,MST_ITEM.DELETE_FLAG
				,ITEM_COST.COST
				,FACTORY_ITEM_CODE
				,MST_ITEM.SYS_SUPPLIER_ID
				,DEAD_STOCK_FLAG
				,ORDER_POOL_FLG
				,COMPANY_FACTORY_NM
				,MST_ITEM.ORDER_NUM
				,MINIMUM_ORDER_QUANTITY
				,MSP.CURRENCY_NM
				,MSP.COUNTRY
				,CAR_MODEL
				,MODEL
				,ITEM_LEAD_TIME
				,FOREIGN_ITEM_NM
				,MAKER_NM
				,PURCHACE_COST
				,PACKING_SIZE
				,WEIGHT
				,DOCUMENT_REMARKS
				,MST_ITEM.HAIBANG_FLG
			FROM
				MST_ITEM
				INNER JOIN
					(SELECT
						SYS_ITEM_ID
						,COST
					FROM
						ITEM_COST
					WHERE
						DELETE_FLAG ='0'
						AND SYS_CORPORATION_ID = (SELECT SYS_CORPORATION_ID FROM MST_CORPORATION
					WHERE
						FILE_CORPORATION_NM ILIKE 'kts')
					)ITEM_COST
					ON MST_ITEM.SYS_ITEM_ID = ITEM_COST.SYS_ITEM_ID

				<!-- 会社・工場名 -->

					LEFT JOIN
						(SELECT
							M_SUP.SYS_SUPPLIER_ID
							,M_SUP.SUPPLIER_NO
							,M_SUP.COMPANY_FACTORY_NM
							,M_SUP.COUNTRY
							,M_SUP.TRADE_TERMS
							,M_SUP.CURRENCY_ID
							,M_SUP.LEAD_TIME
							,CL.CURRENCY_NM
						FROM
							MST_SUPPLIER M_SUP
							INNER JOIN CURRENCY_LEDGER CL
							ON (M_SUP.CURRENCY_ID = CL.CURRENCY_ID)
						WHERE
							M_SUP.DELETE_FLAG = '0'
						) MSP
						ON (MST_ITEM.SYS_SUPPLIER_ID = MSP.SYS_SUPPLIER_ID

					)


				<if-equals value="4" varName="itemCodeType">
				<!-- 入力された品番を構成品番としている商品を取得 -->
					INNER JOIN
						(SELECT
							SI.SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0'
						) SITEM
					ON MST_ITEM.SYS_ITEM_ID = SITEM.SYS_ITEM_ID
					AND SITEM.DELETE_FLAG = '0'
				</if-equals>
				<if-equals value="5" varName="itemCodeType">
					<!-- 入力された品番の商品と、その品番を構成品番としている商品を取得 -->
					INNER JOIN
						(SELECT
							SI.SYS_ITEM_ID AS SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG S_DELETE_FLAG
							,MI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
							AND MI.DELETE_FLAG = '0'
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0'
						UNION SELECT distinct
							MI.SYS_ITEM_ID AS SYS_ITEM_ID
							,SI.FORM_SYS_ITEM_ID
							,SI.DELETE_FLAG S_DELETE_FLAG
							,MI.DELETE_FLAG
						FROM
							SET_ITEM SI INNER JOIN MST_ITEM MI
							ON SI.FORM_SYS_ITEM_ID = MI.SYS_ITEM_ID
							AND MI.DELETE_FLAG = '0'
						WHERE
							MI.ITEM_CODE LIKE ${itemCode}
							AND SI.DELETE_FLAG = '0') SITEM
					ON MST_ITEM.SYS_ITEM_ID = SITEM.SYS_ITEM_ID
					AND SITEM.DELETE_FLAG = '0'
					</if-equals>



			WHERE
				MST_ITEM.DELETE_FLAG = '0'

				<if-not-empty varName="itemNm">
					AND
					ITEM_NM ILIKE ${itemNm}
					OR
					ITEM_NM ILIKE ${itemNmHalf}
					OR
					ITEM_NM ILIKE ${itemNmUpper}
				</if-not-empty>
				<if-equals value="1" varName="setItemFlg">
					AND
					SET_ITEM_FLG = ${setItemFlg}
				</if-equals>
			)AS M_ITEM
		LEFT JOIN
			(SELECT
				A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID
				,A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE
				,A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID
				,A_S_ORDER_DATE.ITEM_ORDER_DATE
				,A_S_ORDER_DATE.ARRIVAL_NUM
			FROM
				(SELECT
					SYS_ITEM_ID
					,MIN(ARRIVAL_SCHEDULE_DATE)AS ARRIVAL_SCHEDULE_DATE
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '0'
				GROUP BY
					SYS_ITEM_ID
				)AS A_S_ARRIVAL_SCHEDULE_DATE
			INNER JOIN
				(SELECT
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE
					,MIN(SYS_ARRIVAL_SCHEDULE_ID)AS SYS_ARRIVAL_SCHEDULE_ID
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '0'
				GROUP BY
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE
				)AS A_S_ARRIVAL_SCHEDULE_DATE_ID

			ON A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE = A_S_ARRIVAL_SCHEDULE_DATE_ID.ARRIVAL_SCHEDULE_DATE
				AND A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID = A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ITEM_ID
			INNER JOIN
				(SELECT
					SYS_ARRIVAL_SCHEDULE_ID
					,ITEM_ORDER_DATE
					,ARRIVAL_NUM
				FROM
					ARRIVAL_SCHEDULE
				) AS A_S_ORDER_DATE
			ON A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID = A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			)AS A_S_ORDER_DATE
		ON M_ITEM.SYS_ITEM_ID = A_S_ORDER_DATE.SYS_ITEM_ID


		LEFT JOIN
			(SELECT
				SYS_ITEM_ID
				,MIN(BACK_ORDER_DATE)AS BACK_ORDER_DATE
				,COUNT(SYS_ITEM_ID)AS BACK_ORDER_COUNT
			FROM
				BACK_ORDER
			WHERE
				DELETE_FLAG = '0'
			GROUP BY
				SYS_ITEM_ID
			)AS B_ORDER
		ON M_ITEM.SYS_ITEM_ID = B_ORDER.SYS_ITEM_ID

		LEFT JOIN
			(SELECT
				W_S_PRIORITY.SYS_ITEM_ID
				,W_S_PRIORITY_WAREHOUSE_NM.WAREHOUSE_NM
				,W_S_PRIORITY_WAREHOUSE_NM.LOCATION_NO
				,W_S_PRIORITY_WAREHOUSE_NM.STOCK_NUM
				,W_S_PRIORITY_WAREHOUSE_NM.SYS_WAREHOUSE_ID
				,SYS_WAREHOUSE_STOCK_ID
			FROM
				(SELECT
					SYS_ITEM_ID
					,MIN(TO_NUMBER(PRIORITY, '00'))AS PRIORITY
				FROM
					WAREHOUSE_STOCK
				WHERE
					DELETE_FLAG = '0'
				<if-not-equals value="0" varName="sysWarehouseId">
					AND
					SYS_WAREHOUSE_ID = ${sysWarehouseId}
				</if-not-equals>

				GROUP BY
					SYS_ITEM_ID
				)AS W_S_PRIORITY
			INNER JOIN
				(SELECT
					SYS_WAREHOUSE_STOCK_ID
					,TO_NUMBER(PRIORITY, '00')AS PRIORITY
					,SYS_ITEM_ID
					,LOCATION_NO
					,STOCK_NUM
					,M_WAREHOUSE.SYS_WAREHOUSE_ID
					,WAREHOUSE_NM
				FROM
					WAREHOUSE_STOCK
					INNER JOIN
						(SELECT
							SYS_WAREHOUSE_ID
							,WAREHOUSE_NM
						FROM
							MST_WAREHOUSE
						)AS M_WAREHOUSE
					ON M_WAREHOUSE.SYS_WAREHOUSE_ID = WAREHOUSE_STOCK.SYS_WAREHOUSE_ID
				WHERE WAREHOUSE_STOCK.DELETE_FLAG = '0'
				)AS W_S_PRIORITY_WAREHOUSE_NM
			ON W_S_PRIORITY.PRIORITY = W_S_PRIORITY_WAREHOUSE_NM.PRIORITY
			AND W_S_PRIORITY.SYS_ITEM_ID = W_S_PRIORITY_WAREHOUSE_NM.SYS_ITEM_ID

			)AS W_STOCK

		ON M_ITEM.SYS_ITEM_ID = W_STOCK.SYS_ITEM_ID

			<!-- 入荷日 -->
		<if-equals value="1" varName="arrivalDateInput">
			INNER JOIN
				(SELECT
					SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE AS ARRIVAL_HISTOR_DATE
					,SYS_ARRIVAL_SCHEDULE_ID AS SYS_ARRIVAL_HISTOR_ID
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND ARRIVAL_FLAG = '1'
					<if-not-empty varName="arrivalDateFrom">
						AND ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalDateFrom}
					</if-not-empty>
					<if-not-empty varName="arrivalDateTo">
						AND ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalDateTo}
					</if-not-empty>
				) ARRIAL_HISTORY
			ON M_ITEM.SYS_ITEM_ID = ARRIAL_HISTORY.SYS_ITEM_ID
		</if-equals>

		INNER JOIN ANNUAL_SALES ANS
		ON (ANS.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
			AND ANS.DELETE_FLAG = '0')

		WHERE
			M_ITEM.DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND
				M_ITEM.SYS_ITEM_ID
				= ${sysItemId}
			</if-not-equals>
		</if-equals>
		<if-not-empty varName="itemCode">
			<if-equals value="1" varName="itemCodeType">
				AND
				M_ITEM.ITEM_CODE LIKE
				${itemCode}
			</if-equals>
			<if-equals value="2" varName="itemCodeType">
				AND
				M_ITEM.OLD_ITEM_CODE LIKE
				${itemCode}
			</if-equals>
			<if-equals value="3" varName="itemCodeType">
				AND
				M_ITEM.FACTORY_ITEM_CODE LIKE
				${itemCode}
			</if-equals>
		</if-not-empty>

		<if-not-equals value="0" varName="stockNum">
			<if-equals value="0" varName="sysWarehouseId">
				<if-equals value="1" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM = ${stockNum}
				</if-equals>
				<if-equals value="2" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM &gt;= ${stockNum}
				</if-equals>
				<if-equals value="3" varName="numberOrder">
					AND M_ITEM.TOTAL_STOCK_NUM &lt;= ${stockNum}
				</if-equals>
			</if-equals>
			<if-not-equals value="0" varName="sysWarehouseId">
				<if-equals value="1" varName="numberOrder">
					AND W_STOCK.STOCK_NUM = ${stockNum}
				</if-equals>
				<if-equals value="2" varName="numberOrder">
					AND W_STOCK.STOCK_NUM &gt;= ${stockNum}
				</if-equals>
				<if-equals value="3" varName="numberOrder">
					AND W_STOCK.STOCK_NUM &lt;= ${stockNum}
				</if-equals>
			</if-not-equals>
		</if-not-equals>

		<if-equals value="1" varName="setItemFlg">
			AND
			M_ITEM.SET_ITEM_FLG =
			${setItemFlg}
		</if-equals>

		<if-not-empty varName="locationNo">
			AND
			LOCATION_NO ILIKE ${locationNo}
		</if-not-empty>

		<if-equals value="1" varName="orderAlertFlg">
			AND
			M_ITEM.TOTAL_STOCK_NUM &lt;=
			M_ITEM.ORDER_ALERT_NUM
		</if-equals>

		<if-equals value="1" varName="deliveryAlertFlg">
			AND
				(CASE WHEN M_ITEM.ITEM_LEAD_TIME = '0' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  1 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '1' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  1.5 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '2' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  2 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '3' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  3 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '4' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  4 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '5' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  5 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '6' THEN M_ITEM.TOTAL_STOCK_NUM &lt;=  6 * ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME = '' THEN M_ITEM.TOTAL_STOCK_NUM &lt;= ANNUAL_AVERAGE_SALES_NUM
					WHEN M_ITEM.ITEM_LEAD_TIME IS NULL THEN M_ITEM.TOTAL_STOCK_NUM &lt;= ANNUAL_AVERAGE_SALES_NUM
					END)
		</if-equals>

		<if-not-empty varName="companyFactoryNm">
			AND M_ITEM.COMPANY_FACTORY_NM LIKE ${companyFactoryNm}
		</if-not-empty>

		<if-not-empty varName="costFrom">
			AND
			M_ITEM.COST &gt;=
			TO_NUMBER(${costFrom}, '00000000')
		</if-not-empty>

		<if-not-empty varName="costTo">
			AND
			M_ITEM.COST &lt;=
			TO_NUMBER(${costTo}, '00000000')
		</if-not-empty>

		<!-- <if-equals value="1" varName="backOrderFlg"> -->
		<!-- AND -->
		<!-- B_ORDER.BACK_ORDER_COUNT &gt; 0 -->
		<!-- </if-equals> -->

		<if-equals value="1" varName="keepFlg">
			AND
			M_ITEM.TOTAL_STOCK_NUM !=
			M_ITEM.TEMPORARY_STOCK_NUM
		</if-equals>

		<if-equals value="1" varName="manualFlg">
			AND
			M_ITEM.MANUAL_FLG = '1'
		</if-equals>

		<if-equals value="1" varName="planSheetFlg">
			AND
			M_ITEM.PLAN_SHEET_FLG = '1'
		</if-equals>

		<if-equals value="1" varName="otherDocumentFlg">
			AND
			M_ITEM.OTHER_DOCUMENT_FLG =
			'1'
		</if-equals>

		<if-equals value="1" varName="overArrivalScheduleFlg">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt; to_char(current_timestamp,
			'yyyy/mm/dd')
		</if-equals>

		<if-equals value="1" varName="arrivalScheduleFlg">
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE != ''
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE IS NOT NULL
		</if-equals>

		<if-not-empty varName="itemOrderDateFrom">
			AND
			A_S_ORDER_DATE.ITEM_ORDER_DATE
			&gt;= ${itemOrderDateFrom}
		</if-not-empty>

		<if-not-empty varName="itemOrderDateTo">
			AND
			A_S_ORDER_DATE.ITEM_ORDER_DATE
			&lt;= ${itemOrderDateTo}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateFrom">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateTo">
			AND
			A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
		</if-not-empty>

		<if-not-empty varName="backOrderDateFrom">
			AND
			B_ORDER.BACK_ORDER_DATE &gt;=
			${backOrderDateFrom}
		</if-not-empty>

		<if-not-empty varName="backOrderDateTo">
			AND
			B_ORDER.BACK_ORDER_DATE &lt;=
			${backOrderDateTo}
		</if-not-empty>

		<if-not-empty varName="sysSupplierId">
			AND
			M_ITEM.SYS_SUPPLIER_ID = ${sysSupplierId}
		</if-not-empty>


		<if-equals value="1" varName="deadStockFlg">
			AND
			M_ITEM.DEAD_STOCK_FLAG = ${deadStockFlg}
		</if-equals>

		<if-equals value="1" varName="orderPoolFlg">
			AND
			M_ITEM.ORDER_POOL_FLG = ${orderPoolFlg}
		</if-equals>

		<if-not-empty varName="specMemo">
			AND M_ITEM.SPEC_MEMO ILIKE ${specMemo}
		</if-not-empty>
		<if-equals value="1" varName="orderNum0Flg">
			AND CASE WHEN ORDER_POOL_FLG = '0' THEN (ORDER_NUM = 0 or ORDER_NUM is null)
				AND (M_ITEM.MINIMUM_ORDER_QUANTITY = 0 or M_ITEM.MINIMUM_ORDER_QUANTITY is null)
			WHEN ORDER_POOL_FLG = '1' THEN (ORDER_NUM = 0 or ORDER_NUM is null)
			END
		</if-equals>
		<if-not-equals value="1" varName="haibangFlgIgnore">
			<if-equals value="1" varName="haibangFlg">
				AND M_ITEM.HAIBANG_FLG = ${haibangFlg}
			</if-equals>
			<if-equals value="0" varName="haibangFlg">
				AND (M_ITEM.HAIBANG_FLG = '0' OR M_ITEM.HAIBANG_FLG IS NULL) 
			</if-equals>
		</if-not-equals>


<!-- 		<if-not-empty varName="itemCodeFrom"> -->
<!-- 			AND -->
<!-- 			TO_NUMBER(M_ITEM.ITEM_CODE, -->
<!-- 			'00000000000') &gt;= -->
<!-- 			TO_NUMBER(${itemCodeFrom}, '00000000000') -->
<!-- 		</if-not-empty> -->

<!-- 		<if-not-empty varName="itemCodeTo"> -->
<!-- 			AND -->
<!-- 			TO_NUMBER(M_ITEM.ITEM_CODE, -->
<!-- 			'00000000000') &lt;= -->
<!-- 			TO_NUMBER(${itemCodeTo}, '00000000000') -->
<!-- 		</if-not-empty> -->

		<if-not-null varName="sortFirst">
			ORDER BY
			<if-equals value="1" varName="sortFirst">
				TO_NUMBER(M_ITEM.ITEM_CODE,
				'00000000000')
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				M_ITEM.FACTORY_ITEM_CODE
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				M_ITEM.COMPANY_FACTORY_NM
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				M_ITEM.ITEM_NM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				M_ITEM.TOTAL_STOCK_NUM
			</if-equals>
		</if-not-null>
		<if-not-null varName="sortFirstSub">
			<if-equals value="1" varName="sortFirstSub">
				ASC
			</if-equals>
			<if-equals value="2" varName="sortFirstSub">
				DESC
			</if-equals>
		</if-not-null>
	</sql-template>


	<!-- ============================================エクセル系============================================== -->

	<sql-template id="SEL_CHECK_SYS_GROUP_ID">
		SELECT
		SYS_GROUP_NM_ID
		FROM
		MST_GROUP_NM
		WHERE
		SYS_GROUP_NM_ID = ${sysGroupNmId}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_CHECK_SYS_CORPORATION_ID">
		SELECT
		SYS_CORPORATION_ID
		FROM
		MST_CORPORATION
		WHERE
		SYS_CORPORATION_ID = ${sysCorporationId}
		AND
		DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_CHECK_SYS_CHANNEL_ID">
		SELECT
		SYS_CHANNEL_ID
		FROM
		MST_CHANNEL
		WHERE
		SYS_CHANNEL_ID = ${sysChannelId}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_CHECK_SYS_WAREHOUSE_ID">
		SELECT
		SYS_WAREHOUSE_ID
		FROM
		MST_WAREHOUSE
		WHERE
		SYS_WAREHOUSE_ID = ${sysWarehouseId}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_GET_SYS_ITEM_ID">
		SELECT
		SYS_ITEM_ID
		FROM
		MST_ITEM
		WHERE
		ITEM_CODE = ${itemCode}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_LEAVE_CLASS_FLG">
		SELECT
			LEAVE_CLASS_FLG
		FROM
			MST_ITEM
		WHERE
			ITEM_CODE = ${itemCode}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="UPD_STOCK_SUM">
		UPDATE
			MST_ITEM
		SET
			TOTAL_STOCK_NUM = TSN.TOTAL_STOCK_NM
			,TEMPORARY_STOCK_NUM = TSN.TOTAL_STOCK_NM
			,UPDATE_USER_ID = ${updateUserId}
			,UPDATE_DATE = current_timestamp
		FROM (
			SELECT
				MST_ITEM.SYS_ITEM_ID,
				COALESCE(STOCK, 0) AS TOTAL_STOCK_NM,
				UPDATE_USER_ID,
				UPDATE_DATE
			FROM
				MST_ITEM
				INNER JOIN
					(SELECT
						SYS_ITEM_ID,
						SUM(STOCK_NUM) AS STOCK
					FROM
						WAREHOUSE_STOCK
					GROUP BY
						SYS_ITEM_ID
					) WS
			ON MST_ITEM.SYS_ITEM_ID = WS.SYS_ITEM_ID
			) TSN
		WHERE
			MST_ITEM.SYS_ITEM_ID = TSN.SYS_ITEM_ID
			AND MST_ITEM.SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_TEMPORARY_STOCK_NUM">
		UPDATE
			MST_ITEM
		SET
			UPDATE_USER_ID = ${updateUserId},
			UPDATE_DATE = current_timestamp,
			TEMPORARY_STOCK_NUM =
				(SELECT TOTAL_STOCK_NUM FROM MST_ITEM WHERE SYS_ITEM_ID = ${sysItemId})
				 - (SELECT
				 		COALESCE(SUM(KEEP_NUM), 0)
					FROM
						KEEP
					WHERE
						DELETE_FLAG = '0' AND SYS_ITEM_ID = ${sysItemId})
		WHERE
			SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="INS_CODE_COLLATION">
		INSERT INTO CODE_COLLATION(
		SYS_CODE_COLLATION_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,OLD_ITEM_CODE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES
		(${sysCodeCollationId}
		,${sysItemId}
		,${itemCode}
		,${oldItemCode}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="UPD_CODE_COLLATION">
		UPDATE CODE_COLLATION SET
		SYS_CODE_COLLATION_ID = ${sysCodeCollationId}
		,SYS_ITEM_ID =
		${sysItemId}
		,ITEM_CODE = ${itemCode}
		,OLD_ITEM_CODE = ${oldItemCode}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CODE_COLLATION_ID = ${sysCodeCollationId}
	</sql-template>

	<sql-template id="SEL_ITEM_CODE_REPEAT_CHECK">
		SELECT
		COUNT(ITEM_CODE)
		FROM
		MST_ITEM
		WHERE
		ITEM_CODE = ${itemCode}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_NOT_FIND_ITEM_COST">
		SELECT
		SYS_CORPORATION_ID
		FROM
		MST_CORPORATION
		WHERE
		SYS_CORPORATION_ID NOT IN
		(
		SELECT
		SYS_CORPORATION_ID
		FROM
		ITEM_COST
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		)
		AND
		DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_NOT_FIND_ITEM_WAREHOUSE">
		SELECT
			SYS_WAREHOUSE_ID
		FROM
			MST_WAREHOUSE
		WHERE
			SYS_WAREHOUSE_ID NOT IN (SELECT
										SYS_WAREHOUSE_ID
									FROM
										WAREHOUSE_STOCK
									WHERE
										SYS_ITEM_ID = ${sysItemId})
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_NOT_FIND_ITEM_PRICE">
		SELECT
		SYS_CORPORATION_ID
		FROM
		MST_CORPORATION
		WHERE
		SYS_CORPORATION_ID NOT IN
		(
		SELECT
		SYS_CORPORATION_ID
		FROM
		ITEM_PRICE
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		)
		AND
		DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_ITEM_COST_REPEAT_CHECK">
		SELECT
		COUNT(*)
		FROM
		ITEM_COST
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND SYS_CORPORATION_ID = ${sysCorporationId}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_ITEM_PRICE_REPEAT_CHECK">
		SELECT
		COUNT(*)
		FROM
		ITEM_PRICE
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND SYS_CORPORATION_ID = ${sysCorporationId}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_SYS_WAREHOUSE_STOCK_ID_REPEAT_CHECK">
		SELECT
		COUNT(*)
		FROM
		WAREHOUSE_STOCK
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND SYS_WAREHOUSE_ID = ${sysWarehouseId}
		AND
		DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_PRIORITY_REPEAT_CHECK">
		SELECT
		COUNT(*)
		FROM
		WAREHOUSE_STOCK
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND PRIORITY = ${priority}
		AND DELETE_FLAG =
		'0'
	</sql-template>

	<sql-template id="UPD_EXCEL_MST_ITEM">
		UPDATE MST_ITEM
		SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,ITEM_NM = ${itemNm}
		<!-- Backlog No. BONCRE-527 対応 -->
		<!-- Excel商品データインポート時対象カラムを増やす -->
		<if-not-null varName="specMemo">
			,SPEC_MEMO = ${specMemo}
		</if-not-null>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_MST_ITEM_EXCEL">
		UPDATE
			MST_ITEM
		SET
			ITEM_CODE = ${itemCode}
			,OLD_ITEM_CODE = ${oldItemCode}
			,ITEM_NM = ${itemNm}
			,CAR_MODEL = ${carModel}
			,MODEL = ${model}
			,MAKER_NM = ${makerNm}
			,ITEM_LEAD_TIME = ${itemLeadTime}
			,PACKING_SIZE = ${packingSize}
			,WEIGHT = ${weight}
			,FACTORY_ITEM_CODE = ${factoryItemCode}
			,PURCHACE_COST = ${purchaceCost}
			,FOREIGN_ITEM_NM = ${foreignItemNm}
			,ORDER_ALERT_NUM = ${orderAlertNum}
			,MANUAL_FLG = ${manualFlg}
			,MINIMUM_ORDER_QUANTITY = ${minimumOrderQuantity}
			,SPEC_MEMO = ${specMemo}
			<if-not-equals value="0" varName="sysSupplierId">
				,SYS_SUPPLIER_ID = ${sysSupplierId}
				,PURCHACE_COUNTRY = ${purchaceCountry}
			</if-not-equals>
			<if-equals value="0" varName="sysSupplierId">
				,SYS_SUPPLIER_ID = null
				,PURCHACE_COUNTRY = ''
			</if-equals>
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_EXCEL_WAREHOUSE_STOCK">
		UPDATE WAREHOUSE_STOCK
		SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,STOCK_NUM = ${stockNum}
		<!-- Excel商品データインポート時対象カラムを増やす backlog No.519 -->
		<if-not-null varName="locationNo">
			,LOCATION_NO = ${locationNo}
		</if-not-null>
		WHERE
		SYS_WAREHOUSE_STOCK_ID = ${sysWarehouseStockId}
	</sql-template>

	<!-- 以下20140328 八鍬 -->
	<sql-template id="UPD_DEL_MST_ITEM">
		UPDATE MST_ITEM SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>


	<sql-template id="UPD_DEL_WAREHOUSE_STOCK">
		UPDATE WAREHOUSE_STOCK SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_EXTERNAL_STOCK">
		UPDATE EXTERNAL_STOCK SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_ARRIVAL_SCHEDULE">
		UPDATE ARRIVAL_SCHEDULE SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_ITEM_COST">
		UPDATE ITEM_COST SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_ITEM_PRICE">
		UPDATE ITEM_PRICE SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_BACK_ORDER">
		UPDATE BACK_ORDER SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_CODE_COLLATION">
		UPDATE CODE_COLLATION SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_DEL_FORM_ITEM">
		UPDATE SET_ITEM SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		FORM_SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<!-- 20140405 八鍬 -->
	<sql-template id="UPD_MST_ITEM_FLG">
		UPDATE MST_ITEM SET
		SET_ITEM_FLG =
		${setItemFlg}
		,LEAVE_CLASS_FLG =
		${leaveClassFlg}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_ITEM_ID =
		${sysItemId}
	</sql-template>

	<sql-template id="UPD_MST_ITEM_POOL_FLG">
		UPDATE
			MST_ITEM
		SET
			ORDER_POOL_FLG = ${orderPoolFlg}
			,ORDER_NUM = ${orderNum}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ITEM_ID = ${sysItemId}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_NOTICE">
		SELECT
		NOTICE_SYSTEM_ID
		,NOTICE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		NOTICE_BOARD
		WHERE
		DELETE_FLAG = '0'
		ORDER BY
		NOTICE_SYSTEM_ID DESC
	</sql-template>

	<sql-template id="SEL_MAX_NOTICE_SYS_ID">
		SELECT
		COALESCE(MAX(NOTICE_SYSTEM_ID), 0)
		FROM
		NOTICE_BOARD
	</sql-template>

	<sql-template id="INS_NOTICE">
		INSERT INTO NOTICE_BOARD(
		NOTICE_SYSTEM_ID
		,NOTICE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		)
		VALUES(
		${noticeID}
		,${notice}
		,current_timestamp
		,${userId}
		,current_timestamp
		,${userId}
		)
	</sql-template>

	<sql-template id="UPD_ASSEMBLY_NUM">
		UPDATE MST_ITEM
		SET
		ASSEMBLY_NUM = ${assemblyNum}
		,UPDATE_USER_ID = ${updateUserId}
		,UPDATE_DATE = current_timestamp
		WHERE
		SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<!-- 	全セット商品組立可数更新関数 -->
	<sql-template id="SELECT_PALLCALCASSEMBLYNUM">
		SELECT PALLASSEMBLYNUM(${updateUserId});
	</sql-template>


	<sql-template id="PARENT_SET_ITEM_LIST">
		SELECT
		SI.SYS_ITEM_ID,
		MI.LEAVE_CLASS_FLG
		FROM
		(
		SELECT
		DISTINCT
		SYS_ITEM_ID
		FROM
		SET_ITEM
		WHERE
		FORM_SYS_ITEM_ID = ${sysItemId}
		AND
		DELETE_FLAG = '0'
		) SI
		INNER JOIN
		MST_ITEM MI
		ON
		SI.SYS_ITEM_ID = MI.SYS_ITEM_ID
		WHERE
		MI.DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="PARENT_SET_ITEM_LEAVE_ON_LIST">
		SELECT
		SI.SYS_ITEM_ID,
		MI.LEAVE_CLASS_FLG
		FROM
		(
		SELECT
		DISTINCT
		SYS_ITEM_ID
		FROM
		SET_ITEM
		WHERE
		FORM_SYS_ITEM_ID = ${sysItemId}
		AND
		DELETE_FLAG = '0'
		) SI
		INNER JOIN
		MST_ITEM MI
		ON
		SI.SYS_ITEM_ID = MI.SYS_ITEM_ID
		WHERE
		MI.DELETE_FLAG = '0'
		AND MI.LEAVE_CLASS_FLG = '1'
	</sql-template>

	<sql-template id="UPD_NOTICE">
		UPDATE NOTICE_BOARD
		SET
		<if-not-empty varName="notice">
			NOTICE = ${notice},
		</if-not-empty>
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		NOTICE_SYSTEM_ID = ${noticeSystemId}
	</sql-template>

	<sql-template id="UPD_DEL_NOTICE">
		UPDATE NOTICE_BOARD
		SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
		NOTICE_SYSTEM_ID = ${noticeSystemId}
	</sql-template>

	<!-- ============================================業販用新規追加マスタ系============================================== -->
	<!-- ===========================得意先マスタ=========================== -->
	<sql-template id="SEL_MAX_SYS_CLIENT_ID">
		SELECT
		COALESCE(MAX(SYS_CLIENT_ID), 0)
		FROM
		MST_CLIENT
	</sql-template>

	<sql-template id="SEL_CLIENT_ID_WITH_NAME">
		SELECT
		SYS_CLIENT_ID
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="clientNm">
			AND CLIENT_NM =
			${clientNm}
		</if-not-equals>
		<if-not-equals value="0" varName="sysCorporationId">
			AND SYS_CORPORATION_ID
			= ${sysCorporationId}
		</if-not-equals>
		OFFSET 0 LIMIT 1;
	</sql-template>

	<sql-template id="SEL_CLIENT_CUTOFF">
		SELECT
			CUTOFF_DATE
		FROM
			MST_CLIENT
		WHERE
			DELETE_FLAG = '0'
		AND
			CLIENT_NM = ${clientNm}
	</sql-template>

	<sql-template id="SEL_CLIENT_ID_FOR_BREMBO_CORPSALESLIP">
		SELECT
			SYS_CLIENT_ID
		FROM
			MST_CLIENT
		WHERE
			DELETE_FLAG = '0'
		AND
			CLIENT_NM = ${corporationName}
	</sql-template>

	<sql-template id="SEL_CLIENT_ID_FOR_BILLING_DST">
		SELECT
			SYS_CLIENT_ID
		FROM
			MST_CLIENT
		WHERE
			DELETE_FLAG = '0'
		AND
			BILLING_DST = ${billingDst}
	</sql-template>

	<sql-template id="INS_MST_CLIENT">
		INSERT INTO MST_CLIENT(
		SYS_CLIENT_ID
		,CLIENT_NO
		,SYS_CORPORATION_ID
		,CLIENT_NM
		,CLIENT_NM_KANA
		,CLIENT_ABBREVIATION
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TITLE
		,TEL
		,FAX
		,MAIL_ADDRESS
		,TRANSPORT_CORPORATION_SYSTEM
		,PAYMENT_METHOD
		,REMARKS
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CUTOFF_DATE
		,BILLING_DST
		) VALUES (
		${sysClientId}
		,${clientNo}
		,${sysCorporationId}
		,${clientNm}
		,${clientNmKana}
		,${clientAbbreviation}
		,${zip}
		,${prefectures}
		,${municipality}
		,${address}
		,${buildingNm}
		,${quarter}
		,${position}
		,${contactPersonNm}
		,${title}
		,${tel}
		,${fax}
		,${mailAddress}
		,${transportCorporationSystem}
		,${paymentMethod}
		,${remarks}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${cutoffDate}
		,${billingDst}
		)
	</sql-template>

	<sql-template id="SEL_MST_CLIENT">
		SELECT
		SYS_CLIENT_ID
		,CLIENT_NO
		,SYS_CORPORATION_ID
		,CLIENT_NM
		,CLIENT_NM_KANA
		,CLIENT_ABBREVIATION
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TITLE
		,TEL
		,FAX
		,MAIL_ADDRESS
		,TRANSPORT_CORPORATION_SYSTEM
		,PAYMENT_METHOD
		,REMARKS
		,
		COALESCE(
		CASE
		WHEN char_length(REMARKS)>26
		THEN substring(REMARKS from 1 for 26)||'...'
		ELSE REMARKS
		END
		, '')
		AS SHORTENED_REMARKS
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CUTOFF_DATE
		,BILLING_DST
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysClientId">
			AND SYS_CLIENT_ID =
			${sysClientId}
		</if-not-equals>
		<if-not-empty varName="clientNm">
			AND CLIENT_NM = ${clientNm}
		</if-not-empty>
		ORDER BY
		SYS_CLIENT_ID
	</sql-template>

	<sql-template id="SEL_EXT_MST_CLIENT">
		SELECT
		SYS_CLIENT_ID
		,CLIENT_NO
		,MST_CLIENT.SYS_CORPORATION_ID
		,MST_CORPORATION.CORPORATION_NM
		,CLIENT_NM
		,CLIENT_NM_KANA
		,CLIENT_ABBREVIATION
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TITLE
		,TEL
		,FAX
		,MAIL_ADDRESS
		,TRANSPORT_CORPORATION_SYSTEM
		,PAYMENT_METHOD
		,CASE PAYMENT_METHOD
		WHEN '1' THEN '掛売'
		WHEN '2' THEN '代引き'
		WHEN '3' THEN '銀行振込'
		ELSE ''
		END AS PAYMENT_METHOD_NM
		,REMARKS
		,
		COALESCE(
		CASE
		WHEN char_length(REMARKS)>26
		THEN substring(REMARKS from 1 for 26)||'...'
		ELSE REMARKS
		END
		, '')
		AS SHORTENED_REMARKS
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CUTOFF_DATE
		,BILLING_DST
		FROM
		MST_CLIENT
		LEFT JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		DELETE_FLAG = '0'
		) AS MST_CORPORATION
		ON
		MST_CLIENT.SYS_CORPORATION_ID = MST_CORPORATION.SYS_CORPORATION_ID
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysClientId">
			AND SYS_CLIENT_ID =
			${sysClientId}
		</if-not-equals>
		<if-not-equals value="0" varName="sysCorporationId">
			AND
			MST_CLIENT.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		<if-not-empty varName="clientNm">
			AND CLIENT_NM LIKE ${clientNm}
		</if-not-empty>
		<if-not-equals value="0" varName="paymentMethod">
			AND PAYMENT_METHOD =
			${paymentMethod}
		</if-not-equals>
		<if-not-empty varName="clientNo">
			AND CLIENT_NO LIKE ${clientNo}
		</if-not-empty>
		ORDER BY
		SYS_CLIENT_ID
	</sql-template>

	<sql-template id="SEL_EXT_MST_CLIENT_NM">
		SELECT
		SYS_CLIENT_ID
		,CLIENT_NM
		,CLIENT_NO
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,CUTOFF_DATE
		,TEL
		,FAX
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="clientNm">
			AND CLIENT_NM = ${clientNm}
		</if-not-empty>
	</sql-template>

	<sql-template id="SEL_CLIENT_BILLING_NM">
	SELECT DISTINCT
		BILLING_DST
		,SYS_CLIENT_ID
		,CLIENT_NO
		,SYS_CORPORATION_ID
		,CLIENT_NM
		,CLIENT_NM_KANA
		,CLIENT_ABBREVIATION
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TITLE
		,TEL
		,FAX
		,MAIL_ADDRESS
		,TRANSPORT_CORPORATION_SYSTEM
		,PAYMENT_METHOD
		,REMARKS
		,
		COALESCE(
		CASE
		WHEN char_length(REMARKS)>26
		THEN substring(REMARKS from 1 for 26)||'...'
		ELSE REMARKS
		END
		, '')
		AS SHORTENED_REMARKS
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CUTOFF_DATE
	FROM
		MST_CLIENT
	WHERE
		DELETE_FLAG = '0'
	AND
		SYS_CORPORATION_ID = ${sysCorporationId}
	</sql-template>

	<sql-template id="UPD_MST_CLIENT">
		UPDATE
		MST_CLIENT
		SET
		SYS_CORPORATION_ID = ${sysCorporationId}
		,CLIENT_NO = ${clientNo}
		,CLIENT_NM = ${clientNm}
		,CLIENT_NM_KANA = ${clientNmKana}
		,CLIENT_ABBREVIATION = ${clientAbbreviation}
		,ZIP = ${zip}
		,PREFECTURES = ${prefectures}
		,MUNICIPALITY = ${municipality}
		,ADDRESS = ${address}
		,BUILDING_NM = ${buildingNm}
		,QUARTER = ${quarter}
		,POSITION = ${position}
		,CONTACT_PERSON_NM = ${contactPersonNm}
		,TEL = ${tel}
		,FAX = ${fax}
		,MAIL_ADDRESS = ${mailAddress}
		,TRANSPORT_CORPORATION_SYSTEM = ${transportCorporationSystem}
		,PAYMENT_METHOD = ${paymentMethod}
		,REMARKS = ${remarks}
		,CREATE_DATE = current_timestamp
		,CREATE_USER_ID = ${createUserId}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,CUTOFF_DATE = ${cutoffDate}
		,BILLING_DST = ${billingDst}
		WHERE
		SYS_CLIENT_ID = ${sysClientId}
	</sql-template>

	<sql-template id="UPD_DEL_MST_CLIENT">
		UPDATE MST_CLIENT SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CLIENT_ID = ${sysClientId}
	</sql-template>

	<sql-template id="SEL_RECEIVABLE_BALANCE">
		SELECT
		COALESCE(RECEIVABLE_BALANCE,0) AS RECEIVABLE_BALANCE
		FROM
		(SELECT
		SYS_CLIENT_ID
		FROM
		MST_CLIENT
		WHERE
		SYS_CLIENT_ID = ${sysClientId}
		) AS MST_CLIENT
		LEFT JOIN
		(SELECT
		SYS_CLIENT_ID
		,SUM(COALESCE(SUM_SALES_PRICE,0)) - SUM(COALESCE(SUM_RECEIVE_PRICE,0)) AS RECEIVABLE_BALANCE
		FROM
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CLIENT_ID
		,SUM_SALES_PRICE
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		DELETE_FLAG = '0'
		AND
		INVALID_FLAG = '0'
		AND
		SYS_CLIENT_ID = ${sysClientId}
		AND
		SLIP_STATUS = '2'
		AND
		PAYMENT_METHOD = '1'
		) AS s
		LEFT JOIN
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,COALESCE(SUM(RECEIVE_PRICE),0) AS SUM_RECEIVE_PRICE
		FROM
		CORPORATE_RECEIVE
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="receiveDate">
			AND
			RECEIVE_DATE &lt; ${receiveDate}
		</if-not-empty>
		GROUP BY
		SYS_CORPORATE_SALES_SLIP_ID
		) AS rec
		ON
		s.SYS_CORPORATE_SALES_SLIP_ID = rec.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		COALESCE(SUM_SALES_PRICE,0) != COALESCE(SUM_RECEIVE_PRICE,0)
		GROUP BY
		SYS_CLIENT_ID
		) AS SLIP
		ON MST_CLIENT.SYS_CLIENT_ID = SLIP.SYS_CLIENT_ID
	</sql-template>

	<!-- ===========================口座マスタ=========================== -->
	<sql-template id="SEL_MAX_SYS_ACCOUNT_ID">
		SELECT
		COALESCE(MAX(SYS_ACCOUNT_ID), 0)
		FROM
		MST_ACCOUNT
	</sql-template>

	<sql-template id="INS_MST_ACCOUNT">
		INSERT INTO
		MST_ACCOUNT (
		SYS_ACCOUNT_ID
		,SYS_CORPORATION_ID
		,ACCOUNT_NM
		,BANK_NM
		,BRANCH_NM
		,ACCOUNT_TYPE
		,ACCOUNT_NUMBER
		,ACCOUNT_HOLDER
		,PRIOR_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		) VALUES (
		${sysAccountId}
		,${sysCorporationId}
		,${accountNm}
		,${bankNm}
		,${branchNm}
		,${accountType}
		,${accountNumber}
		,${accountHolder}
		,${priorFlag}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		)
	</sql-template>

	<sql-template id="SEL_MST_ACCOUNT">
		SELECT
		SYS_ACCOUNT_ID
		,MST_ACCOUNT.SYS_CORPORATION_ID
		,MST_CORP.CORPORATION_NM
		,ACCOUNT_NM
		,BANK_NM
		,BRANCH_NM
		,ACCOUNT_TYPE
		,CASE ACCOUNT_TYPE
		WHEN '1' THEN '普通口座'
		WHEN '2' THEN '当座'
		WHEN '3' THEN '貯蓄'
		WHEN '4' THEN 'その他'
		ELSE ''
		END AS ACCOUNT_TYPE_NM
		,ACCOUNT_NUMBER
		,ACCOUNT_HOLDER
		,PRIOR_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,DELETE_FLAG
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_ACCOUNT
		LEFT JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		DELETE_FLAG = '0'
		ORDER BY
		SYS_CORPORATION_ID ASC
		) AS MST_CORP
		ON
		MST_ACCOUNT.SYS_CORPORATION_ID = MST_CORP.SYS_CORPORATION_ID
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysAccountId">
			AND SYS_ACCOUNT_ID = ${sysAccountId}
		</if-not-equals>
		<if-not-equals value="0" varName="sysCorporationId">
			AND MST_ACCOUNT.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		ORDER BY
		SYS_CORPORATION_ID ASC
		,PRIOR_FLAG DESC
		,SYS_ACCOUNT_ID ASC
	</sql-template>

	<sql-template id="UPD_MST_ACCOUNT">
		UPDATE
			MST_ACCOUNT
		SET
			SYS_CORPORATION_ID = ${sysCorporationId}
			,ACCOUNT_NM = ${accountNm}
			,BANK_NM = ${bankNm}
			,BRANCH_NM = ${branchNm}
			,ACCOUNT_TYPE = ${accountType}
			,ACCOUNT_NUMBER = ${accountNumber}
			,ACCOUNT_HOLDER = ${accountHolder}
			<if-equals value="1" varName="priorFlagRemove">
				,PRIOR_FLAG = 0
			</if-equals>
			<if-equals value="0" varName="priorFlagRemove">
				,PRIOR_FLAG = ${priorFlag}
			</if-equals>
			,CREATE_USER_ID = ${createUserId}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ACCOUNT_ID = ${sysAccountId}
	</sql-template>

	<sql-template id="UPD_DEL_MST_ACCOUNT">
		UPDATE MST_ACCOUNT SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ACCOUNT_ID = ${sysAccountId}
	</sql-template>
	<!-- ===========================納入先マスタ=========================== -->
	<sql-template id="SEL_MAX_SYS_DELIVERY_ID">
		SELECT
		COALESCE(MAX(SYS_DELIVERY_ID), 0)
		FROM
		MST_DELIVERY
	</sql-template>

	<sql-template id="INS_MST_DELIVERY">
		INSERT INTO MST_DELIVERY(
		SYS_DELIVERY_ID
		,SYS_CLIENT_ID
		,DELIVERY_NM
		,DELIVERY_NM_KANA
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TEL
		,FAX
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		) VALUES (
		${sysDeliveryId}
		,${sysClientId}
		,${deliveryNm}
		,${deliveryNmKana}
		,${zip}
		,${prefectures}
		,${municipality}
		,${address}
		,${buildingNm}
		,${quarter}
		,${position}
		,${contactPersonNm}
		,${tel}
		,${fax}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		)
	</sql-template>

	<sql-template id="SEL_MST_DELIVERY">
		SELECT
		SYS_DELIVERY_ID
		,MST_DELIVERY.SYS_CLIENT_ID
		,MST_CLIENT.SYS_CORPORATION_ID
		,CLIENT_NM
		,DELIVERY_NM
		,DELIVERY_NM_KANA
		,ZIP
		,PREFECTURES
		,MUNICIPALITY
		,ADDRESS
		,BUILDING_NM
		,QUARTER
		,POSITION
		,CONTACT_PERSON_NM
		,TEL
		,FAX
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		MST_DELIVERY
		LEFT JOIN
		(SELECT
		SYS_CLIENT_ID
		,SYS_CORPORATION_ID
		,CLIENT_NM
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		) AS MST_CLIENT
		ON
		MST_DELIVERY.SYS_CLIENT_ID = MST_CLIENT.SYS_CLIENT_ID
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysDeliveryId">
			AND SYS_DELIVERY_ID = ${sysDeliveryId}
		</if-not-equals>
		<if-not-equals value="0" varName="sysClientId">
			AND MST_DELIVERY.SYS_CLIENT_ID = ${sysClientId}
		</if-not-equals>
		ORDER BY SYS_CLIENT_ID, SYS_DELIVERY_ID
	</sql-template>

	<sql-template id="UPD_MST_DELIVERY">
		UPDATE
		MST_DELIVERY
		SET
		SYS_CLIENT_ID = ${sysClientId}
		,DELIVERY_NM = ${deliveryNm}
		,DELIVERY_NM_KANA = ${deliveryNmKana}
		,ZIP = ${zip}
		,PREFECTURES = ${prefectures}
		,MUNICIPALITY = ${municipality}
		,ADDRESS = ${address}
		,BUILDING_NM = ${buildingNm}
		,QUARTER = ${quarter}
		,POSITION = ${position}
		,CONTACT_PERSON_NM = ${contactPersonNm}
		,TEL = ${tel}
		,FAX = ${fax}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_DELIVERY_ID = ${sysDeliveryId}
	</sql-template>
	<sql-template id="UPD_DEL_MST_DELIVERY">
		UPDATE
		MST_DELIVERY
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_DELIVERY_ID = ${sysDeliveryId}
	</sql-template>

	<!-- ============================================業販管理============================================== -->
	<!-- ===========================業販伝票=========================== -->
	<sql-template id="SEL_MAX_SYS_CORP_SALES_SLIP_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATE_SALES_SLIP_ID), 0)
		FROM
		CORPORATE_SALES_SLIP
	</sql-template>

	<sql-template id="INS_CORP_SALES_SLIP">
		INSERT INTO CORPORATE_SALES_SLIP(
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SYS_CLIENT_ID
		,PAYMENT_METHOD
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,SUM_SALES_PRICE
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_TEL
		,DESTINATION_FAX
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,INVOICE_CLASSIFICATION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,GENPYO_KBN
		,YUSO_SHIJI
		,YUSO_SHIJI2
		) VALUES (
		${sysCorporateSalesSlipId}
		,${sysCorporationId}
		,${orderNo}
		,${slipStatus}
		,${personInCharge}
		,${estimateDate}
		,${orderDate}
		,${salesDate}
		,${billingDate}
		,${sysClientId}
		,${paymentMethod}
		,${deliveryDeadline}
		,${sysAccountId}
		,${sumSalesPrice}
		,${receivePrice}
		,${receiveDate}
		,${orderRemarks}
		,${orderFixRemarks}
		,${estimateRemarks}
		,${billingRemarks}
		,${depositDate}
		,${destinationNm}
		,${destinationNmKana}
		,${destinationZip}
		,${destinationPrefectures}
		,${destinationMunicipality}
		,${destinationAddress}
		,${destinationBuildingNm}
		,${destinationCompanyNm}
		,${destinationQuarter}
		,${destinationPosition}
		,${destinationContactPersonNm}
		,${destinationTel}
		,${destinationFax}
		,${senderRemarks}
		,${slipNo}
		,${transportCorporationSystem}
		,${invoiceClassification}
		,${destinationAppointDate}
		,${destinationAppointTime}
		,${shipmentDate}
		,${sumClaimPrice}
		,${sumPieceRate}
		,${taxRate}
		,${tax}
		,${currency}
		,${returnFlg}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${genpyoKbn}
		,${yusoShiji}
		,${yusoShiji2}
		)
	</sql-template>

	<sql-template id="SEL_CORP_SALES_SLIP">
		SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,INVALID_FLAG
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SYS_CLIENT_ID
		,PAYMENT_METHOD
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,SUM_SALES_PRICE
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_TEL
		,DESTINATION_FAX
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,GENPYO_KBN
		,INVOICE_CLASSIFICATION
		,YUSO_SHIJI
		,YUSO_SHIJI2
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysCorporateSalesSlipId">
			AND
			SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
		</if-not-equals>
	</sql-template>

	<sql-template id="SEL_CORP_SALES_SLIP_BY_ORDERNO">
		SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,INVALID_FLAG
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SYS_CLIENT_ID
		,PAYMENT_METHOD
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,SUM_SALES_PRICE
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_TEL
		,DESTINATION_FAX
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,GENPYO_KBN
		,INVOICE_CLASSIFICATION
		,YUSO_SHIJI
		,YUSO_SHIJI2
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="orderNo">
			AND
			order_no ILIKE ${orderNo}
		</if-not-equals>
	</sql-template>

	<sql-template id="SEL_SEARCH_CORP_SALES_SLIP">
		SELECT
		C_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,C_SLIP.SYS_CORPORATION_ID
		,C_SLIP.ORDER_NO
		,C_SLIP.SLIP_STATUS
		,C_SLIP.PERSON_IN_CHARGE
		,C_SLIP.INVALID_FLAG
		,C_SLIP.ESTIMATE_DATE
		,C_SLIP.ORDER_DATE
		,C_SLIP.SALES_DATE
		,C_SLIP.BILLING_DATE
		,C_SLIP.SYS_CLIENT_ID
		,C_SLIP.PAYMENT_METHOD
		,C_SLIP.PAYMENT_METHOD_NM
		,C_SLIP.DELIVERY_DEADLINE
		,C_SLIP.SYS_ACCOUNT_ID
		,C_SLIP.SUM_SALES_PRICE
		,C_SLIP.RECEIVE_PRICE
		,C_SLIP.RECEIVE_DATE
		,C_SLIP.ORDER_REMARKS
		,C_SLIP.ORDER_FIX_REMARKS
		,C_SLIP.ESTIMATE_REMARKS
		,C_SLIP.BILLING_REMARKS
		,C_SLIP.DEPOSIT_DATE
		,C_SLIP.DESTINATION_NM
		,C_SLIP.DESTINATION_NM_KANA
		,C_SLIP.DESTINATION_ZIP
		,C_SLIP.DESTINATION_PREFECTURES
		,C_SLIP.DESTINATION_MUNICIPALITY
		,C_SLIP.DESTINATION_ADDRESS
		,C_SLIP.DESTINATION_BUILDING_NM
		,C_SLIP.DESTINATION_COMPANY_NM
		,C_SLIP.DESTINATION_QUARTER
		,C_SLIP.DESTINATION_POSITION
		,C_SLIP.DESTINATION_CONTACT_PERSON_NM
		,C_SLIP.DESTINATION_TEL
		,C_SLIP.DESTINATION_FAX
		,C_SLIP.SENDER_REMARKS
		,C_SLIP.SLIP_NO
		,C_SLIP.TRANSPORT_CORPORATION_SYSTEM
		,C_SLIP.GENPYO_KBN
		,C_SLIP.INVOICE_CLASSIFICATION
		,C_SLIP.YUSO_SHIJI
		,C_SLIP.YUSO_SHIJI2
		,C_SLIP.DESTINATION_APPOINT_DATE
		,C_SLIP.DESTINATION_APPOINT_TIME
		,C_SLIP.SHIPMENT_DATE
		,C_SLIP.SUM_CLAIM_PRICE
		,C_SLIP.SUM_PIECE_RATE
		,C_SLIP.TAX_RATE
		,C_SLIP.TAX
		,C_SLIP.CURRENCY
		,C_SLIP.RETURN_FLG
		,C_SLIP.CREATE_DATE
		,C_SLIP.CREATE_USER_ID
		,C_SLIP.UPDATE_DATE
		,C_SLIP.UPDATE_USER_ID
		,C_SLIP.SLIP_STATUS_NM
		,C_SLIP.CORPORATION_NM
		,C_SLIP.CLIENT_NM

		<!-- マスタ以外の商品数カウンター -->
		,COALESCE(C_ITEM.NOT_MST_ITEM_COUNT, 0)AS NOT_ITEM_COUNT
		FROM
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,INVALID_FLAG
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SLIP.SYS_CLIENT_ID
		,PAYMENT_METHOD
		,CASE PAYMENT_METHOD
		WHEN '1' THEN '掛売'
		WHEN '2' THEN '代引き'
		WHEN '3' THEN '銀行振込'
		ELSE ''
		END AS PAYMENT_METHOD_NM
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,SUM_SALES_PRICE
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_TEL
		,DESTINATION_FAX
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,GENPYO_KBN
		,INVOICE_CLASSIFICATION
		,YUSO_SHIJI
		,YUSO_SHIJI2
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CASE SLIP_STATUS
		WHEN '1' THEN '見積'
		WHEN '2' THEN '受注'
		ELSE ''
		END AS SLIP_STATUS_NM

		,CORPORATION_NM
		,CLIENT_NM
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		INNER JOIN
		(SELECT
		SYS_CLIENT_ID
		,CLIENT_NM
		,CLIENT_NO
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		) AS CLIENT
		ON
		SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysCorporateSalesSlipId">
				AND
				SLIP.SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
			</if-not-equals>
		</if-equals>

		<if-not-empty varName="orderNo">
			AND
			ORDER_NO ILIKE ${orderNo}
		</if-not-empty>

		<if-not-null varName="sysCorporateSalesSlipId">
			<if-not-equals value="0" varName="sysCorporateSalesSlipId">
				AND
				SLIP.SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="sysClientId">
			<if-not-equals value="0" varName="sysClientId">
				AND
				SLIP.SYS_CLIENT_ID = ${sysClientId}
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="clientNo">
			AND
			CLIENT_NO LIKE ${clientNo}
		</if-not-empty>

		<if-not-empty varName="deliveryTelNo">
			AND
			SLIP.DESTINATION_TEL LIKE ${deliveryTelNo}
		</if-not-empty>

		<if-equals value="1" varName="getListFlg">
			<if-not-null varName="sysCorporationId">
				<if-not-equals value="0" varName="sysCorporationId">
					AND
					SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				</if-not-equals>
			</if-not-null>

			<if-not-empty varName="estimateDateFrom">
				AND
				ESTIMATE_DATE &gt;= ${estimateDateFrom}
			</if-not-empty>
			<if-not-empty varName="estimateDateTo">
				AND
				ESTIMATE_DATE &lt;= ${estimateDateTo}
			</if-not-empty>

			<if-not-empty varName="orderDateFrom">
				AND
				ORDER_DATE &gt;= ${orderDateFrom}
			</if-not-empty>
			<if-not-empty varName="orderDateTo">
				AND
				ORDER_DATE &lt;= ${orderDateTo}
			</if-not-empty>

			<if-not-empty varName="billingDateFrom">
				AND
				BILLING_DATE &gt;= ${billingDateFrom}
			</if-not-empty>
			<if-not-empty varName="billingDateTo">
				AND
				BILLING_DATE &lt;= ${billingDateTo}
			</if-not-empty>

			<if-not-empty varName="clientNm">
				AND
				CLIENT_NM ILIKE ${clientNm}
			</if-not-empty>

			<if-not-empty varName="deliveryNm">
				AND
				SLIP.DESTINATION_NM LIKE ${deliveryNm}
			</if-not-empty>

			<if-not-empty varName="personInCharge">
				AND
				PERSON_IN_CHARGE ILIKE ${personInCharge}
			</if-not-empty>

			<if-not-empty varName="paymentMethod">
				<if-not-equals value="0" varName="paymentMethod">
					AND
					PAYMENT_METHOD = ${paymentMethod}
				</if-not-equals>
			</if-not-empty>

			<if-not-empty varName="transportCorporationSystem">
				AND
				TRANSPORT_CORPORATION_SYSTEM != ''
				AND
				TRANSPORT_CORPORATION_SYSTEM = ${transportCorporationSystem}
			</if-not-empty>

			<if-not-empty varName="receivableBalance">
				<if-equals value="1" varName="receivableBalance">
					AND
					(SUM_SALES_PRICE - RECEIVE_PRICE) &gt; 0
				</if-equals>
				<if-equals value="2" varName="receivableBalance">
					AND
					(SUM_SALES_PRICE - RECEIVE_PRICE) &lt;= 0
				</if-equals>
			</if-not-empty>

			<if-not-empty varName="slipStatus">
				<if-equals value="1" varName="slipStatus">
					AND
					SLIP_STATUS = '1'
				</if-equals>
				<if-equals value="2" varName="slipStatus">
					AND
					SLIP_STATUS = '2'
				</if-equals>
			</if-not-empty>

			<if-not-equals value="1" varName="searchAllFlg">
				<if-not-empty varName="returnFlg">
					AND
					RETURN_FLG = ${returnFlg}
				</if-not-empty>
			</if-not-equals>
			<if-not-empty varName="invalidFlag">
				AND
				INVALID_FLAG = ${invalidFlag}
			</if-not-empty>

			<if-not-empty varName="currency">
				<if-not-equals value="currency" varName="0">
					AND
					CURRENCY = ${currency}
				</if-not-equals>
			</if-not-empty>

			<if-not-empty varName="sumClaimPrice">
				AND
				SUM_CLAIM_PRICE
				<if-equals value="1" varName="sumClaimPriceOption"> = </if-equals>
				<if-equals value="2" varName="sumClaimPriceOption"> &gt;= </if-equals>
				<if-equals value="3" varName="sumClaimPriceOption"> &lt;= </if-equals>
				CAST(${sumClaimPrice} AS integer)
			</if-not-empty>
		</if-equals>

		) AS C_SLIP
		INNER JOIN
		(SELECT
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,COUNT(NOT_ITEM.SYS_ITEM_ID) AS NOT_MST_ITEM_COUNT
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		<if-not-empty varName="itemCodeAreaFlg">
			<if-equals value="1" varName="itemCodeAreaFlg">
				INNER JOIN
				(SELECT
				SYS_ITEM_ID
				FROM
				MST_ITEM
				WHERE
				1 = 1
				<if-not-empty varName="itemCode">
					AND
					ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND
					ITEM_NM LIKE ${itemNm}
				</if-not-empty>
				<if-not-empty varName="itemCodeFrom">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &gt;= ${itemCodeFrom}
				</if-not-empty>
				<if-not-empty varName="itemCodeTo">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &lt;= ${itemCodeTo}
				</if-not-empty>
				)AS M_ITEM
				ON
				M_ITEM.SYS_ITEM_ID = ITEM.SYS_ITEM_ID
			</if-equals>
		</if-not-empty>
		LEFT JOIN
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		FROM
		CORPORATE_SALES_ITEM
		WHERE
		DELETE_FLAG= '0'
		AND
		SYS_ITEM_ID = 0
		)AS NOT_ITEM
		ON
		NOT_ITEM.SYS_CORPORATE_SALES_SLIP_ID = ITEM.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		DELETE_FLAG ='0'
		<if-not-empty varName="salesItemCode">
			AND
			ITEM.ITEM_CODE ILIKE ${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			ITEM.ITEM_NM ILIKE ${salesItemNm}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateFrom">
			AND
			SCHEDULED_LEAVING_DATE &gt;= ${scheduledLeavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateTo">
			AND
			SCHEDULED_LEAVING_DATE &lt;= ${scheduledLeavingDateTo}
		</if-not-empty>
		<if-not-empty varName="leavingDateFrom">
			AND
			LEAVING_DATE &gt;= ${leavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="leavingDateTo">
			AND
			LEAVING_DATE &lt;= ${leavingDateTo}
		</if-not-empty>
		<if-not-empty varName="salesDateFrom">
			AND
			SALES_DATE &gt;= ${salesDateFrom}
		</if-not-empty>
		<if-not-empty varName="salesDateTo">
			AND
			SALES_DATE &lt;= ${salesDateTo}
		</if-not-empty>

		<if-not-empty varName="slipStatus">
			<if-equals value="3" varName="slipStatus">
				AND
				SALES_DATE != ''
			</if-equals>
		</if-not-empty>
		<if-not-empty varName="otherItemFlag">
			<if-equals value="1" varName="otherItemFlag">
				AND
				ITEM.SYS_ITEM_ID = 0
				<if-not-empty varName="itemCode">
					AND
					ITEM.ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND
					ITEM.ITEM_NM LIKE ${itemNm}
				</if-not-empty>
			</if-equals>
		</if-not-empty>
		GROUP BY
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		HAVING
		1 = 1
		<if-not-equals value="1" varName="searchAllFlg">
			<if-not-empty varName="pickingListFlg">
				<if-equals value="0" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '0' OR NULL) &gt;= 1
				</if-equals>
				<if-equals value="1" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '0' OR NULL) = 0
				</if-equals>
				<if-equals value="2" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '1' OR NULL) = 0
				</if-equals>
			</if-not-empty>
			<if-not-empty varName="leavingFlg">
				<if-equals value="0" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE = '' OR NULL) &gt;= 1
				</if-equals>
				<if-equals value="1" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE = '' OR NULL) = 0
				</if-equals>
				<if-equals value="2" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE != '' OR NULL) = 0
				</if-equals>
			</if-not-empty>
		</if-not-equals>
		) AS C_ITEM
		ON
		C_SLIP.SYS_CORPORATE_SALES_SLIP_ID = C_ITEM.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		1 = 1
		ORDER BY
		1 = 1
		<!--ソート条件 -->
		<if-not-empty varName="sortValue">
			<!-- 見積日 -->
			<if-equals value="1" varName="sortValue">
				,C_SLIP.ESTIMATE_DATE
			</if-equals>
			<!-- 受注日 -->
			<if-equals value="2" varName="sortValue">
				,C_SLIP.ORDER_DATE
			</if-equals>
			<!-- 売上日 -->
			<if-equals value="3" varName="sortValue">
				,C_SLIP.SALES_DATE
			</if-equals>
			<!-- 請求日 -->
			<if-equals value="4" varName="sortValue">
				,C_SLIP.BILLING_DATE
			</if-equals>
		</if-not-empty>
		<if-equals value="1" varName="sortOrder">DESC</if-equals>
		<if-equals value="2" varName="sortOrder">ASC</if-equals>
		,C_SLIP.SYS_CORPORATE_SALES_SLIP_ID ASC


	</sql-template>

	<sql-template id="UPD_CORP_SALES_SLIP">
		UPDATE CORPORATE_SALES_SLIP SET
		SYS_CORPORATION_ID = ${sysCorporationId}
		,ORDER_NO = ${orderNo}
		,SLIP_STATUS = ${slipStatus}
		,PERSON_IN_CHARGE = ${personInCharge}
		,INVALID_FLAG = ${invalidFlag}
		,ESTIMATE_DATE = ${estimateDate}
		,ORDER_DATE = ${orderDate}
		,SALES_DATE = ${salesDate}
		,BILLING_DATE = ${billingDate}
		,SYS_CLIENT_ID = ${sysClientId}
		,PAYMENT_METHOD = ${paymentMethod}
		,DELIVERY_DEADLINE = ${deliveryDeadline}
		,SYS_ACCOUNT_ID = ${sysAccountId}
		,SUM_SALES_PRICE = ${sumSalesPrice}
		,RECEIVE_PRICE = ${receivePrice}
		,RECEIVE_DATE = ${receiveDate}
		,ORDER_REMARKS = ${orderRemarks}
		,ORDER_FIX_REMARKS = ${orderFixRemarks}
		,ESTIMATE_REMARKS = ${estimateRemarks}
		,BILLING_REMARKS = ${billingRemarks}
		,DEPOSIT_DATE = ${depositDate}
		,DESTINATION_NM = ${destinationNm}
		,DESTINATION_NM_KANA = ${destinationNmKana}
		,DESTINATION_ZIP = ${destinationZip}
		,DESTINATION_PREFECTURES = ${destinationPrefectures}
		,DESTINATION_MUNICIPALITY = ${destinationMunicipality}
		,DESTINATION_ADDRESS = ${destinationAddress}
		,DESTINATION_BUILDING_NM = ${destinationBuildingNm}
		,DESTINATION_COMPANY_NM = ${destinationCompanyNm}
		,DESTINATION_QUARTER = ${destinationQuarter}
		,DESTINATION_POSITION = ${destinationPosition}
		,DESTINATION_CONTACT_PERSON_NM = ${destinationContactPersonNm}
		,DESTINATION_TEL = ${destinationTel}
		,DESTINATION_FAX = ${destinationFax}
		,SENDER_REMARKS = ${senderRemarks}
		,SLIP_NO = ${slipNo}
		,TRANSPORT_CORPORATION_SYSTEM = ${transportCorporationSystem}
		,INVOICE_CLASSIFICATION = ${invoiceClassification}
		,DESTINATION_APPOINT_DATE = ${destinationAppointDate}
		,DESTINATION_APPOINT_TIME = ${destinationAppointTime}
		,SHIPMENT_DATE = ${shipmentDate}
		,SUM_CLAIM_PRICE = ${sumClaimPrice}
		,SUM_PIECE_RATE = ${sumPieceRate}
		,TAX_RATE = ${taxRate}
		,TAX = ${tax}
		,CURRENCY = ${currency}
		,RETURN_FLG = ${returnFlg}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,GENPYO_KBN = ${genpyoKbn}
		,YUSO_SHIJI = ${yusoShiji}
		,YUSO_SHIJI2 = ${yusoShiji2}
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
	</sql-template>

	<sql-template id="UPD_CORP_SALES_SLIP_FLG">
		UPDATE CORPORATE_SALES_SLIP SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		<if-not-empty varName="returnFlg">
			,RETURN_FLG = ${returnFlg}
		</if-not-empty>
		<!-- 20140521 Takakuwa 出庫時に出荷日を更新 -->
		,SHIPMENT_DATE = ${shipmentDate}
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID =
		${sysCorporateSalesSlipId}
	</sql-template>

	<sql-template id="UPD_CORP_RECEIVE_PRICE">
		UPDATE
		CORPORATE_SALES_SLIP
		SET
		UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID =${updateUserId}
		,RECEIVE_PRICE = ${receivePrice}
		,RECEIVE_DATE = ${receiveDate}
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
	</sql-template>

	<sql-template id="UPD_DEL_CORP_SALES_SLIP">
		UPDATE CORPORATE_SALES_SLIP SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
	</sql-template>

	<sql-template id="SEL_CORP_SALES_SLIP_LIST_BY_IDS">
		SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,INVALID_FLAG
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SYS_CLIENT_ID
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,INVOICE_CLASSIFICATION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,SUM_SALES_PRICE
		,PAYMENT_METHOD
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_FAX
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ANY(cast(${sysCorporateSalesSlipIds} as integer[]))
	</sql-template>

	<!-- ===========================業販商品=========================== -->
	<sql-template id="SEL_MAX_SYS_CORP_SALES_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATE_SALES_ITEM_ID), 0)
		FROM
		CORPORATE_SALES_ITEM
	</sql-template>

	<sql-template id="INS_CORP_SALES_ITEM">
		INSERT INTO CORPORATE_SALES_ITEM(
		SYS_CORPORATE_SALES_ITEM_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,SCHEDULED_LEAVING_DATE
		,PICKING_LIST_FLG
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		) VALUES (
		${sysCorporateSalesItemId}
		,${sysCorporateSalesSlipId}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,${cost}
		,${scheduledLeavingDate}
		,${pickingListFlg}
		,${leavingDate}
		,${leavingNum}
		,${salesDate}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		)
	</sql-template>

		<sql-template id="INS_CORP_SALES_DOMESTIC_ITEM">
		INSERT INTO CORPORATE_SALES_ITEM(
		SYS_CORPORATE_SALES_ITEM_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,SCHEDULED_LEAVING_DATE
		,PICKING_LIST_FLG
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,KIND_COST
		,LIST_PRICE
		,ITEM_RATE_OVER
		) VALUES (
		${sysCorporateSalesItemId}
		,${sysCorporateSalesSlipId}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,${cost}
		,${scheduledLeavingDate}
		,${pickingListFlg}
		,${leavingDate}
		,${leavingNum}
		,${salesDate}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${kindCost}
		,${listPrice}
		,${itemRateOver}
		)
	</sql-template>

	<sql-template id="SEL_CORP_SALES_ITEM">
		SELECT
		SYS_CORPORATE_SALES_ITEM_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,SCHEDULED_LEAVING_DATE
		,PICKING_LIST_FLG
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		CORPORATE_SALES_ITEM
		WHERE
		DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_CORP_SALES_ITEM_LIST">
		SELECT
		S_ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,S_ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,S_ITEM.UPDATED_FLAG
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.PIECE_RATE
		,S_ITEM.ORDER_NUM
		,S_ITEM.SCHEDULED_LEAVING_DATE
		,S_ITEM.PICKING_LIST_FLG
		,S_ITEM.LEAVING_DATE
		,S_ITEM.LEAVING_NUM
		,S_ITEM.SALES_DATE
		,M_ITEM.TOTAL_STOCK_NUM
		,M_ITEM.TEMPORARY_STOCK_NUM
		,M_ITEM.ASSEMBLY_NUM
		,M_ITEM.LEAVE_CLASS_FLG
		,CASE
		WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0 THEN
		M_ITEM.ITEM_CODE
		WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0 THEN
		S_ITEM.ITEM_CODE
		END AS ITEM_CODE
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0 THEN -->
		<!-- M_ITEM.COST -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0 THEN -->
		<!-- S_ITEM.COST -->
		<!-- END AS COST -->
		,CASE
		WHEN S_ITEM.UPDATED_FLAG = 1 AND S_ITEM.POSTAGE IS NOT NULL THEN
			S_ITEM.COST + S_ITEM.POSTAGE/abs(S_ITEM.ORDER_NUM) 
		WHEN (S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0) AND exm.postage IS NOT NULL THEN
			S_ITEM.COST + exm.postage/abs(S_ITEM.ORDER_NUM)
		WHEN (S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0) AND exm.postage IS NULL THEN
			S_ITEM.COST
		END AS COST
		,CASE
		WHEN S_ITEM.UPDATED_FLAG = 1 THEN
			S_ITEM.POSTAGE
		WHEN S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0 THEN
			exm.postage
		END AS POSTAGE
		,CASE
		WHEN exm.postage IS NOT NULL THEN
			S_ITEM.COST + exm.postage/abs(S_ITEM.ORDER_NUM)
		WHEN exm.postage IS NULL THEN
			S_ITEM.COST
		END AS DOME_COST
		<!-- ,CASE -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NOT NULL AND S_ITEM.SYS_ITEM_ID != 0 THEN
			M_ITEM.ITEM_NM -->
		<!-- WHEN S_ITEM.SYS_ITEM_ID IS NULL OR S_ITEM.SYS_ITEM_ID = 0 THEN S_ITEM.ITEM_NM -->
		<!-- END AS ITEM_NM -->
		,S_ITEM.ITEM_NM
		,exm.postage as dome_postage
		FROM
		(SELECT
		S_ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,S_ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,S_ITEM.SYS_ITEM_ID
		,S_ITEM.ITEM_CODE
		,S_ITEM.ITEM_NM
		,S_ITEM.PIECE_RATE
		,S_ITEM.COST
		,S_ITEM.PROFIT
		,S_ITEM.POSTAGE
		,S_ITEM.UPDATED_FLAG
		,S_ITEM.ORDER_NUM
		,S_ITEM.SCHEDULED_LEAVING_DATE
		,S_ITEM.PICKING_LIST_FLG
		,S_ITEM.LEAVING_DATE
		,S_ITEM.LEAVING_NUM
		,S_ITEM.SALES_DATE
		FROM
		CORPORATE_SALES_ITEM AS S_ITEM
		<if-not-empty varName="itemCodeAreaFlg">
			<if-equals value="1" varName="itemCodeAreaFlg">
				INNER JOIN
				(SELECT
				SYS_ITEM_ID
				FROM
				MST_ITEM
				WHERE
				1 = 1
				<if-not-empty varName="itemCode">
					AND
					ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND
					ITEM_NM LIKE ${itemNm}
				</if-not-empty>
				<if-not-empty varName="itemCodeFrom">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &gt;= ${itemCodeFrom}
				</if-not-empty>
				<if-not-empty varName="itemCodeTo">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &lt;= ${itemCodeTo}
				</if-not-empty>
				)AS M_ITEM
				ON
				M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
			</if-equals>
		</if-not-empty>
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="1" varName="getListFlg">
			<if-not-equals value="0" varName="sysSalesSlipId">
				AND
				S_ITEM.SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
			</if-not-equals>
		</if-equals>
		<if-not-empty varName="slipStatus">
			<if-equals value="3" varName="slipStatus">
				AND
				S_ITEM.SALES_DATE != ''
			</if-equals>
		</if-not-empty>
		<if-not-empty varName="salesItemCode">
			AND
			S_ITEM.ITEM_CODE ILIKE ${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			S_ITEM.ITEM_NM ILIKE ${salesItemNm}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateFrom">
			AND
			S_ITEM.SCHEDULED_LEAVING_DATE &gt;= ${scheduledLeavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateTo">
			AND
			S_ITEM.SCHEDULED_LEAVING_DATE &lt;= ${scheduledLeavingDateTo}
		</if-not-empty>

		<if-not-empty varName="leavingDateFrom">
			AND
			S_ITEM.LEAVING_DATE &gt;= ${leavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="leavingDateTo">
			AND
			S_ITEM.LEAVING_DATE &lt;= ${leavingDateTo}
		</if-not-empty>

		<if-not-empty varName="salesDateFrom">
			AND
			S_ITEM.SALES_DATE &gt;= ${salesDateFrom}
		</if-not-empty>
		<if-not-empty varName="salesDateTo">
			AND
			S_ITEM.SALES_DATE &lt;= ${salesDateTo}
		</if-not-empty>
		)AS S_ITEM
		LEFT JOIN
		(SELECT management_code, purchasing_cost, postage FROM exhibit_manage where delete_flag='0') as exm
		ON(S_ITEM.item_code=exm.management_code)
		LEFT JOIN
		(SELECT
		M_ITEM.SYS_ITEM_ID
		,M_ITEM.ITEM_CODE
		,M_ITEM.TOTAL_STOCK_NUM
		,M_ITEM.TEMPORARY_STOCK_NUM
		,M_ITEM.ASSEMBLY_NUM
		<!-- ,M_ITEM.ITEM_NM -->
		,M_ITEM.LEAVE_CLASS_FLG
		,COALESCE(COST.COST, 0)AS COST
		FROM
		MST_ITEM AS M_ITEM
		<!-- 20140328 伊東 原価が必ずしも入っていなくてもいい仕様で、left joinに変更 -->
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,COST
		FROM
		ITEM_COST
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
		<if-not-equals value="0" varName="sysCorporationId">
			AND
			SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		)AS COST
		ON
		M_ITEM.SYS_ITEM_ID = COST.SYS_ITEM_ID
		)AS M_ITEM
		ON
		S_ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		ORDER BY
		S_ITEM.SYS_CORPORATE_SALES_ITEM_ID
	</sql-template>

<!-- 	法人間請求書_業販kind原価取得 -->
	<sql-template id="SEL_CORP_SALES_KIND_COST">
	SELECT DISTINCT
		SYS_CORPORATE_SALES_ITEM_ID
		,KIND_COST
		,COST
		,ORDER_NO
		,ORDER_NUM
		,CSS.SYS_CORPORATE_SALES_SLIP_ID
		,exm.postage
	FROM
		CORPORATE_SALES_SLIP CSS LEFT JOIN CORPORATE_SALES_ITEM CSI
			ON (CSS.SYS_CORPORATE_SALES_SLIP_ID = CSI.SYS_CORPORATE_SALES_SLIP_ID
				AND CSS.DELETE_FLAG = '0'
				AND CSI.DELETE_FLAG = '0')
		LEFT JOIN
		(SELECT management_code, purchasing_cost, wholsesaler_nm, postage FROM exhibit_manage where delete_flag='0') as exm
		ON(CSI.item_code=exm.management_code)
	WHERE
		CSS.ORDER_NO IN (SELECT SLIP_NO FROM BTOB_BILL_ITEM WHERE SYS_BTOB_BILL_ID = ${sysBtobBillId}
			AND DELETE_FLAG = '0')
		AND CSS.DELETE_FLAG = '0'
		AND CSI.DELETE_FLAG = '0'
	ORDER BY
		SYS_CORPORATE_SALES_ITEM_ID
	</sql-template>

<!-- 	法人間請求書_売上kind原価取得 -->
	<sql-template id="SEL_SALES_KIND_COST">
	SELECT DISTINCT
		SYS_SALES_ITEM_ID
		,KIND_COST
		,COST
		,ORDER_NO
		,ORDER_NUM
		,SS.SYS_SALES_SLIP_ID
		,exm.postage
	FROM
		SALES_SLIP SS LEFT JOIN SALES_ITEM SI
			ON (SS.SYS_SALES_SLIP_ID = SI.SYS_SALES_SLIP_ID
				AND SS.DELETE_FLAG = '0'
				AND SI.DELETE_FLAG = '0')
		LEFT JOIN
		(SELECT management_code, purchasing_cost, wholsesaler_nm, postage FROM exhibit_manage where delete_flag='0') as exm
		ON(SI.item_code=exm.management_code)
	WHERE
		SS.ORDER_NO IN (SELECT SLIP_NO FROM BTOB_BILL_ITEM WHERE SYS_BTOB_BILL_ID = ${sysBtobBillId}
			AND DELETE_FLAG = '0')
		AND SS.DELETE_FLAG = '0'
		AND SI.DELETE_FLAG = '0'
	ORDER BY
		SYS_SALES_ITEM_ID
	</sql-template>

	<sql-template id="UPD_CORP_SALES_ITEM">
		UPDATE CORPORATE_SALES_ITEM SET
		ORDER_NUM = ${orderNum}
		,PIECE_RATE = ${pieceRate}
		,COST = ${cost}
		,SCHEDULED_LEAVING_DATE = ${scheduledLeavingDate}
		,PICKING_LIST_FLG = ${pickingListFlg}
		,LEAVING_DATE = ${leavingDate}
		,LEAVING_NUM = ${leavingNum}
		,SALES_DATE = ${salesDate}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CORPORATE_SALES_ITEM_ID = ${sysCorporateSalesItemId}
	</sql-template>

	<sql-template id="UPD_DEL_CORP_SALES_ITEM">
		UPDATE CORPORATE_SALES_ITEM SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_CORPORATE_SALES_ITEM_ID = ${sysCorporateSalesItemId}
	</sql-template>

	<sql-template id="SEL_CORP_SALES_ITEM_LIST_BY_IDS">
		SELECT
		SYS_CORPORATE_SALES_ITEM_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,C_ITEM.SYS_ITEM_ID
		,COALESCE(ITEM_CODE,'') AS ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		<!-- ,CASE -->
		<!-- WHEN C_ITEM.PIECE_RATE = 0 THEN PRICE -->
		<!-- ELSE PIECE_RATE -->
		<!-- END AS PIECE_RATE -->
		,COALESCE(C_ITEM.PIECE_RATE, 0) AS PIECE_RATE
		,COALESCE(COST, 0) AS COST
		,SCHEDULED_LEAVING_DATE
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,PICKING_LIST_FLG
		FROM
		(SELECT
		SYS_CORPORATE_SALES_ITEM_ID
		,C_ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,COALESCE(ITEM.SYS_ITEM_ID,0) AS SYS_ITEM_ID
		,CASE
		WHEN C_ITEM.ITEM_CODE='' THEN ITEM.ITEM_CODE
		ELSE C_ITEM.ITEM_CODE
		END AS ITEM_CODE
		<!-- ,SYS_CORPORATION_ID -->
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,SCHEDULED_LEAVING_DATE
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		<!-- ,LEAVING_FLG -->
		,PICKING_LIST_FLG
		FROM
		CORPORATE_SALES_ITEM AS C_ITEM
		INNER JOIN
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CORPORATION_ID
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ANY(cast(${sysCorporateSalesSlipIds} as integer[]))
		) AS C_SLIP
		ON
		C_ITEM.SYS_CORPORATE_SALES_SLIP_ID = C_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		RIGHT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS ITEM
		ON
		C_ITEM.SYS_ITEM_ID = ITEM.SYS_ITEM_ID

		) AS C_ITEM
		<!-- LEFT JOIN -->
		<!-- (SELECT -->
		<!-- SYS_ITEM_ID -->
		<!-- ,SYS_CORPORATION_ID -->
		<!-- ,COST -->
		<!-- FROM -->
		<!-- ITEM_COST -->
		<!-- ) AS COST -->
		<!-- ON -->
		<!-- C_ITEM.SYS_ITEM_ID = COST.SYS_ITEM_ID -->
		<!-- AND -->
		<!-- C_ITEM.SYS_CORPORATION_ID = COST.SYS_CORPORATION_ID -->
		<!-- LEFT JOIN -->
		<!-- (SELECT -->
		<!-- SYS_ITEM_ID -->
		<!-- ,SYS_CORPORATION_ID -->
		<!-- ,PRICE -->
		<!-- FROM -->
		<!-- ITEM_PRICE -->
		<!-- ) AS PRICE -->
		<!-- ON -->
		<!-- C_ITEM.SYS_ITEM_ID = PRICE.SYS_ITEM_ID -->
		<!-- AND -->
		<!-- C_ITEM.SYS_CORPORATION_ID = PRICE.SYS_CORPORATION_ID -->
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="itemCode">
			AND
			ITEM_CODE ILIKE ${itemCode}
		</if-not-empty>
		<if-not-empty varName="itemNm">
			AND
			ITEM_NM ILIKE ${itemNm}
		</if-not-empty>
		<if-not-empty varName="itemCodeFrom">
			AND
			TO_NUMBER(ITEM_CODE, '00000000000') &gt;= ${itemCodeFrom}
		</if-not-empty>
		<if-not-empty varName="itemCodeTo">
			AND
			TO_NUMBER(ITEM_CODE, '00000000000') &lt;= ${itemCodeTo}
		</if-not-empty>
		<if-equals value="1" varName="otherItemFlag">
			AND
			C_ITEM.SYS_ITEM_ID = 0
		</if-equals>
		<if-not-empty varName="scheduledLeavingDateFrom">
			AND
			SCHEDULED_LEAVING_DATE &gt;= ${scheduledLeavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateTo">
			AND
			SCHEDULED_LEAVING_DATE &lt;= ${scheduledLeavingDateTo}
		</if-not-empty>
	</sql-template>
	<sql-template id="SEL_CORP_SALES_ITEM_LIST_CLAIMED">
		SELECT
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,CASE
		WHEN ITEM.SYS_ITEM_ID IS NOT NULL AND ITEM.SYS_ITEM_ID != 0 THEN
		M_ITEM.ITEM_CODE
		WHEN ITEM.SYS_ITEM_ID IS NULL OR ITEM.SYS_ITEM_ID = 0 THEN
		ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.PIECE_RATE
		,ITEM.LEAVING_NUM
		,ITEM.LEAVING_DATE
		FROM

		(SELECT
		SYS_CLIENT_ID
		FROM
		MST_CLIENT
		WHERE
		SYS_CLIENT_ID = ${sysClientId}
		) AS CLIENT
		INNER JOIN
		(SELECT
		SYS_CLIENT_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		DELETE_FLAG = '0'
		AND
		INVALID_FLAG = '0'
		AND
		PAYMENT_METHOD = '1'
		) AS SLIP
		ON
		CLIENT.SYS_CLIENT_ID = SLIP.SYS_CLIENT_ID
		INNER JOIN
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,PIECE_RATE
		,LEAVING_NUM
		,LEAVING_DATE
		FROM
		CORPORATE_SALES_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND
		LEAVING_DATE &gt;= ${from}
		AND
		LEAVING_DATE &lt; ${to}
		) AS ITEM
		ON
		SLIP.SYS_CORPORATE_SALES_SLIP_ID = ITEM.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		MST_ITEM AS M_ITEM
		ON
		M_ITEM.SYS_ITEM_ID = ITEM.SYS_ITEM_ID
	</sql-template>

	<!-- ===========================業販入金=========================== -->
	<sql-template id="SEL_MAX_SYS_CORP_RECEIVE_ID">
		SELECT
		COALESCE(MAX(SYS_CORPORATE_RECEIVE_ID),0)
		FROM
		CORPORATE_RECEIVE
	</sql-template>

	<sql-template id="INS_CORP_RECEIVE">
		INSERT INTO CORPORATE_RECEIVE(
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_CLIENT_ID
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		) VALUES (
		${sysCorporateSalesSlipId}
		,${sysClientId}
		,${receivePrice}
		,${receiveDate}
		,CURRENT_TIMESTAMP
		,${updateUserId}
		,CURRENT_TIMESTAMP
		,${updateUserId}
		)
	</sql-template>

	<sql-template id="SEL_CORP_RECEIVE">
		SELECT
		SYS_CORPORATE_RECEIVE_ID
		,SYS_CLIENT_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		CORPORATE_RECEIVE
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="sysCorporateSalesSlipId">
			AND
			SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
		</if-not-empty>
		<if-not-empty varName="sysClientId">
			AND
			SYS_CLIENT_ID = ${sysClientId}
		</if-not-empty>
		<if-not-empty varName="receiveDateFrom">
			AND
			RECEIVE_DATE &gt;= ${receiveDateFrom}
		</if-not-empty>
		<if-not-empty varName="receiveDateTo">
			AND
			RECEIVE_DATE &lt;= ${receiveDateTo}
		</if-not-empty>
		ORDER BY
		RECEIVE_DATE DESC, SYS_CORPORATE_RECEIVE_ID DESC
	</sql-template>

	<sql-template id="UPD_DEL_CORP_RECEIVE">
		UPDATE
		CORPORATE_RECEIVE
		SET
		DELETE_FLAG='1'
		WHERE
		SYS_CORPORATE_RECEIVE_ID = ${sysCorporateReceiveId}
	</sql-template>




	<!-- Kind原価一覧 -->
	<sql-template id="SEL_SEARCH_ITEM_KIND_LIST">
		SELECT DISTINCT
			M_ITEM.SYS_ITEM_ID
			,M_ITEM.ITEM_CODE
			,M_ITEM.OLD_ITEM_CODE
			,M_ITEM.ITEM_NM
			,M_ITEM.SYS_GROUP_NM_ID
			,M_ITEM.TOTAL_STOCK_NUM
			,M_ITEM.TOTAL_STOCK_NUM AS TOTAL_STOCK_NUM_INPUT
			,M_ITEM.TEMPORARY_STOCK_NUM
			,M_ITEM.ORDER_ALERT_NUM
			,M_ITEM.MANUAL_FLG
			,M_ITEM.PLAN_SHEET_FLG
			,M_ITEM.OTHER_DOCUMENT_FLG
			,M_ITEM.SPEC_MEMO
			,M_ITEM.SET_ITEM_FLG
			,M_ITEM.DELETE_FLAG
			,M_ITEM.COST
			,M_ITEM.ASSEMBLY_NUM

			<!--,A_S_ORDER_DATE.SYS_ITEM_ID -->
			,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			,A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE
			,A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
			,A_S_ORDER_DATE.ITEM_ORDER_DATE
			,A_S_ORDER_DATE.ARRIVAL_NUM

			<!--,B_ORDER.SYS_ITEM_ID -->
			,B_ORDER.BACK_ORDER_DATE
			,B_ORDER.BACK_ORDER_COUNT

			<!--,W_STOCK.SYS_ITEM_ID -->
			,W_STOCK.SYS_WAREHOUSE_ID
			,W_STOCK.STOCK_NUM
			,W_STOCK.WAREHOUSE_NM
			,W_STOCK.LOCATION_NO
			,W_STOCK.SYS_WAREHOUSE_STOCK_ID
			<!--,W_STOCK.STOCK_NUM -->
			,TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000')
		FROM
			(SELECT
				MST_ITEM.SYS_ITEM_ID
				,MST_ITEM.ASSEMBLY_NUM
				,ITEM_CODE
				,OLD_ITEM_CODE
				,ITEM_NM
				,SYS_GROUP_NM_ID
				,TOTAL_STOCK_NUM
				,TEMPORARY_STOCK_NUM
				,ORDER_ALERT_NUM
				,MANUAL_FLG
				,PLAN_SHEET_FLG
				,OTHER_DOCUMENT_FLG
				,SPEC_MEMO
				,SET_ITEM_FLG
				,DELETE_FLAG
				,ITEM_COST.COST
			FROM
				MST_ITEM
				LEFT JOIN
					(SELECT
						SYS_ITEM_ID
						,COST
					FROM
						ITEM_COST
					WHERE
						DELETE_FLAG ='0'
					AND SYS_CORPORATION_ID = 99)ITEM_COST
				ON MST_ITEM.SYS_ITEM_ID = ITEM_COST.SYS_ITEM_ID
			WHERE
				DELETE_FLAG = '0'
			<if-not-empty varName="itemNm">
				AND ITEM_NM ILIKE ${itemNm}
				OR ITEM_NM ILIKE ${itemNmHalf}
				OR ITEM_NM ILIKE ${itemNmUpper}
			</if-not-empty>
			<if-not-empty varName="specMemo">
				AND SPEC_MEMO ILIKE ${specMemo}
			</if-not-empty>
			<if-equals value="1" varName="setItemFlg">
				AND SET_ITEM_FLG = ${setItemFlg}
			</if-equals>
			)AS M_ITEM
			LEFT JOIN
				(SELECT
					A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID
					,A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE
					,A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID
					,A_S_ORDER_DATE.ITEM_ORDER_DATE
					,A_S_ORDER_DATE.ARRIVAL_NUM
				FROM
					(SELECT
						SYS_ITEM_ID
						,MIN(ARRIVAL_SCHEDULE_DATE)AS ARRIVAL_SCHEDULE_DATE
					FROM
						ARRIVAL_SCHEDULE
					WHERE
						DELETE_FLAG = '0'
						AND ARRIVAL_FLAG = '0'
					GROUP BY
						SYS_ITEM_ID
					)AS A_S_ARRIVAL_SCHEDULE_DATE
				INNER JOIN
					(SELECT
						SYS_ITEM_ID
						,ARRIVAL_SCHEDULE_DATE
						,MIN(SYS_ARRIVAL_SCHEDULE_ID)AS SYS_ARRIVAL_SCHEDULE_ID
					FROM
						ARRIVAL_SCHEDULE
					WHERE
						DELETE_FLAG = '0'
						AND ARRIVAL_FLAG = '0'
					GROUP BY
						SYS_ITEM_ID
						,ARRIVAL_SCHEDULE_DATE
					)AS A_S_ARRIVAL_SCHEDULE_DATE_ID
				ON A_S_ARRIVAL_SCHEDULE_DATE.ARRIVAL_SCHEDULE_DATE = A_S_ARRIVAL_SCHEDULE_DATE_ID.ARRIVAL_SCHEDULE_DATE
				AND A_S_ARRIVAL_SCHEDULE_DATE.SYS_ITEM_ID = A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ITEM_ID
				INNER JOIN
					(SELECT
						SYS_ARRIVAL_SCHEDULE_ID
						,ITEM_ORDER_DATE
						,ARRIVAL_NUM
					FROM
						ARRIVAL_SCHEDULE) AS A_S_ORDER_DATE
				ON A_S_ARRIVAL_SCHEDULE_DATE_ID.SYS_ARRIVAL_SCHEDULE_ID = A_S_ORDER_DATE.SYS_ARRIVAL_SCHEDULE_ID
				)AS A_S_ORDER_DATE
			ON M_ITEM.SYS_ITEM_ID = A_S_ORDER_DATE.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID
					,MIN(BACK_ORDER_DATE)AS BACK_ORDER_DATE
					,COUNT(SYS_ITEM_ID)AS BACK_ORDER_COUNT
				FROM
					BACK_ORDER
				WHERE
					DELETE_FLAG = '0'
				GROUP BY
					SYS_ITEM_ID
				)AS B_ORDER
			ON M_ITEM.SYS_ITEM_ID = B_ORDER.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					W_S_PRIORITY.SYS_ITEM_ID
					,W_S_PRIORITY_WAREHOUSE_NM.WAREHOUSE_NM
					,W_S_PRIORITY_WAREHOUSE_NM.LOCATION_NO
					,W_S_PRIORITY_WAREHOUSE_NM.STOCK_NUM
					,W_S_PRIORITY_WAREHOUSE_NM.SYS_WAREHOUSE_ID
					,SYS_WAREHOUSE_STOCK_ID
				FROM
					(SELECT
						SYS_ITEM_ID
						,MIN(TO_NUMBER(PRIORITY, '00'))AS PRIORITY
					FROM
						WAREHOUSE_STOCK
					WHERE
						DELETE_FLAG = '0'
					GROUP BY
						SYS_ITEM_ID
					)AS W_S_PRIORITY
				INNER JOIN
					(SELECT
						SYS_WAREHOUSE_STOCK_ID
						,TO_NUMBER(PRIORITY, '00')AS PRIORITY
						,SYS_ITEM_ID
						,LOCATION_NO
						,STOCK_NUM
						,M_WAREHOUSE.SYS_WAREHOUSE_ID
						,WAREHOUSE_NM
					FROM
						WAREHOUSE_STOCK
					INNER JOIN
						(SELECT
							SYS_WAREHOUSE_ID
							,WAREHOUSE_NM
						FROM
							MST_WAREHOUSE
						)AS M_WAREHOUSE
					ON M_WAREHOUSE.SYS_WAREHOUSE_ID = WAREHOUSE_STOCK.SYS_WAREHOUSE_ID
					)AS W_S_PRIORITY_WAREHOUSE_NM
				ON W_S_PRIORITY.PRIORITY = W_S_PRIORITY_WAREHOUSE_NM.PRIORITY
				AND W_S_PRIORITY.SYS_ITEM_ID = W_S_PRIORITY_WAREHOUSE_NM.SYS_ITEM_ID
				)AS W_STOCK
			ON M_ITEM.SYS_ITEM_ID = W_STOCK.SYS_ITEM_ID
		WHERE
			1=1
			AND M_ITEM.ITEM_CODE != '11'
			AND M_ITEM.ITEM_CODE != '77'
			AND M_ITEM.ITEM_CODE != '88'
			AND M_ITEM.ITEM_CODE != '99'
			AND M_ITEM.ITEM_CODE != '01011293006'
			AND M_ITEM.ITEM_CODE != '01011293005'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND M_ITEM.SYS_ITEM_ID = ${sysItemId}
			</if-not-equals>
		</if-equals>
		<if-not-empty varName="locationNo">
			AND LOCATION_NO ILIKE ${locationNo}
		</if-not-empty>
		<if-equals value="1" varName="orderAlertFlg">
			AND M_ITEM.TOTAL_STOCK_NUM &lt;= M_ITEM.ORDER_ALERT_NUM
		</if-equals>
		<if-not-empty varName="costFrom">
			AND M_ITEM.COST &gt;= TO_NUMBER(${costFrom}, '00000000')
		</if-not-empty>
		<if-not-empty varName="costTo">
			AND M_ITEM.COST &lt;= TO_NUMBER(${costTo}, '00000000')
		</if-not-empty>
		<if-equals value="1" varName="keepFlg">
			AND M_ITEM.TOTAL_STOCK_NUM != M_ITEM.TEMPORARY_STOCK_NUM
		</if-equals>
		<if-equals value="1" varName="manualFlg">
			AND M_ITEM.MANUAL_FLG = '1'
		</if-equals>
		<if-equals value="1" varName="planSheetFlg">
			AND M_ITEM.PLAN_SHEET_FLG = '1'
		</if-equals>
		<if-equals value="1" varName="otherDocumentFlg">
			AND M_ITEM.OTHER_DOCUMENT_FLG = '1'
		</if-equals>
		<if-equals value="1" varName="overArrivalScheduleFlg">
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt; to_char(current_timestamp, 'yyyy/mm/dd')
		</if-equals>
		<if-not-equals value="0" varName="sysWarehouseId">
			AND W_STOCK.SYS_WAREHOUSE_ID = ${sysWarehouseId}
		</if-not-equals>
		<if-not-empty varName="itemOrderDateFrom">
			AND A_S_ORDER_DATE.ITEM_ORDER_DATE &gt;= ${itemOrderDateFrom}
		</if-not-empty>
		<if-not-empty varName="itemOrderDateTo">
			AND A_S_ORDER_DATE.ITEM_ORDER_DATE &lt;= ${itemOrderDateTo}
		</if-not-empty>
		<if-not-empty varName="arrivalScheduleDateFrom">
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
		</if-not-empty>
		<if-not-empty varName="arrivalScheduleDateTo">
			AND A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
		</if-not-empty>
		<if-not-empty varName="backOrderDateFrom">
			AND B_ORDER.BACK_ORDER_DATE &gt;= ${backOrderDateFrom}
		</if-not-empty>
		<if-not-empty varName="backOrderDateTo">
			AND B_ORDER.BACK_ORDER_DATE &lt;= ${backOrderDateTo}
		</if-not-empty>
		<if-not-empty varName="itemCode">
			AND M_ITEM.ITEM_CODE LIKE ${itemCode}
		</if-not-empty>
		<if-not-empty varName="itemCodeFrom">
			AND TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000') &gt;= TO_NUMBER(${itemCodeFrom}, '00000000000')
		</if-not-empty>
		<if-not-empty varName="itemCodeTo">
			AND TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000') &lt;= TO_NUMBER(${itemCodeTo}, '00000000000')
		</if-not-empty>
		<if-not-null varName="sortFirst">
		ORDER BY
			<if-equals value="1" varName="sortFirst">
				TO_NUMBER(M_ITEM.ITEM_CODE, '00000000000')
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				M_ITEM.ITEM_NM
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				W_STOCK.SYS_WAREHOUSE_ID
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				M_ITEM.TOTAL_STOCK_NUM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				M_ITEM.TEMPORARY_STOCK_NUM
			</if-equals>
			<if-equals value="6" varName="sortFirst">
				A_S_ORDER_DATE.ITEM_ORDER_DATE
			</if-equals>
			<if-equals value="7" varName="sortFirst">
				A_S_ORDER_DATE.ARRIVAL_SCHEDULE_DATE
			</if-equals>
			<if-equals value="8" varName="sortFirst">
				A_S_ORDER_DATE.ITEM_ORDER_DATE
			</if-equals>
			<if-equals value="9" varName="sortFirst">
				B_ORDER.BACK_ORDER_DATE
			</if-equals>
		</if-not-null>
		<if-not-null varName="sortFirstSub">
			<if-equals value="1" varName="sortFirstSub">
				ASC
			</if-equals>
			<if-equals value="2" varName="sortFirstSub">
				DESC
			</if-equals>
		</if-not-null>
	</sql-template>

	<!-- Kind原価詳細 -->
	<sql-template id="SEL_KIND_COST">
		SELECT
		MST_ITEM.SYS_ITEM_ID
		,MST_ITEM.ASSEMBLY_NUM
		,ITEM_CODE
		,ITEM_CODE
		AS BEFORE_ITEM_CODE
		,OLD_ITEM_CODE
		,ITEM_NM
		,SYS_GROUP_NM_ID
		,TOTAL_STOCK_NUM
		,ORDER_ALERT_NUM
		,MANUAL_FLG
		,PLAN_SHEET_FLG
		,OTHER_DOCUMENT_FLG
		,SPEC_MEMO
		,SET_ITEM_FLG
		,LEAVE_CLASS_FLG
		,DELETE_FLAG
		,ITEM_COST.CREATE_DATE
		,ITEM_COST.CREATE_USER_ID
		,ITEM_COST.UPDATE_DATE
		,ITEM_COST.UPDATE_USER_ID
		,TEMPORARY_STOCK_NUM
		,ITEM_COST.COST
		,ITEM_PRICE.PRICE
		,ASSEMBLY_NUM
		,ITEM_COST.SYS_ITEM_COST_ID
		FROM
		MST_ITEM
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID AS
		COST_SYS_ITEM_ID
		,SYS_ITEM_COST_ID
		,COST
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		ITEM_COST
		WHERE
		DELETE_FLAG ='0'
		<if-equals value="0" varName="getListFlg">
			AND
			SYS_CORPORATION_ID = 99
		</if-equals>
		<if-equals value="1" varName="getListFlg">
			AND
			SYS_CORPORATION_ID =
			${sysCorporationId}
		</if-equals>
		)ITEM_COST
		ON
		MST_ITEM.SYS_ITEM_ID = ITEM_COST.COST_SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID AS PRICE_SYS_ITEM_ID
		,PRICE
		FROM
		ITEM_PRICE
		WHERE
		DELETE_FLAG ='0'
		<if-equals value="0" varName="getListFlg">
			AND
			SYS_CORPORATION_ID = (SELECT
			SYS_CORPORATION_ID FROM MST_CORPORATION
			WHERE FILE_CORPORATION_NM
			ILIKE 'kts')
		</if-equals>
		<if-equals value="1" varName="getListFlg">
			AND
			SYS_CORPORATION_ID =
			${sysCorporationId}
		</if-equals>
		)ITEM_PRICE
		ON
		MST_ITEM.SYS_ITEM_ID = ITEM_PRICE.PRICE_SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="1" varName="setItemFlg">
			AND
			SET_ITEM_FLG = '1'
		</if-equals>
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysItemId">
				AND
				SYS_ITEM_ID =
				${sysItemId}
			</if-not-equals>

			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE = ${itemCode}
			</if-not-empty>

			<if-not-empty varName="oldItemCode">
				AND
				OLD_ITEM_CODE = ${oldItemCode}
			</if-not-empty>

		</if-equals>
		<if-equals value="1" varName="getListFlg">
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE LIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= TO_NUMBER(${itemCodeFrom}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= TO_NUMBER(${itemCodeTo}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				ITEM_NM ILIKE ${itemNm}
				OR
				ITEM_NM ILIKE ${itemNmHalf}
				OR
				ITEM_NM ILIKE ${itemNmUpper}
			</if-not-empty>
		</if-equals>
		ORDER BY
		TO_NUMBER(ITEM_CODE, '00000000000')
	</sql-template>

	<!-- 売上原価一覧のシステム売上商品ID -->
	<sql-template id="SEL_SEARCH_SYS_SALE_ITEM">
		SELECT  
		SITEM_COST.SYS_SALES_ITEM_ID
		,CASE
		WHEN  SITEM_COST.ITEM_CODE IS NOT NULL AND SITEM_COST.ITEM_CODE  = '00' AND M_ITEMS.ITEM_CODE IS NOT NULL AND  M_ITEMS.ITEM_CODE != ''  THEN
			M_ITEMS.ITEM_CODE		
		WHEN SITEM_COST.ITEM_CODE IS NOT NULL AND SITEM_COST.ITEM_CODE != ''    THEN
			SITEM_COST.ITEM_CODE
		WHEN M_ITEMS.ITEM_CODE IS NOT NULL AND  M_ITEMS.ITEM_CODE != '' THEN
			M_ITEMS.ITEM_CODE
		END AS ITEM_CODE_ORDER
		FROM
		SALES_ITEM AS SITEM_COST
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		) AS M_ITEMS
		ON
		SITEM_COST.SYS_ITEM_ID = M_ITEMS.SYS_ITEM_ID
		INNER JOIN
		<!-- 売上一覧のSQLを流用 -->
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SLIP.SYS_STORE_ID
		,SLIP.ORDER_NO
		,SLIP.ORDER_DATE
		,SLIP.ORDER_TIME
		,(SLIP.ORDER_DATE || SLIP.ORDER_TIME)AS SORT_ORDER_DATE
		,SLIP.ORDER_FAMILY_NM
		,SLIP.ORDER_FIRST_NM
		,SLIP.ORDER_FAMILY_NM_KANA
		,SLIP.ORDER_FIRST_NM_KANA
		,(SLIP.ORDER_FAMILY_NM || ' ' ||
		SLIP.ORDER_FIRST_NM)AS ORDER_FULL_NM
		,(SLIP.ORDER_FAMILY_NM_KANA || ' '
		|| SLIP.ORDER_FIRST_NM_KANA)AS ORDER_FULL_NM_KANA
		,SLIP.ORDER_MAIL_ADDRESS
		,SLIP.ORDER_ZIP
		,SLIP.ORDER_PREFECTURES
		,SLIP.ORDER_MUNICIPALITY
		,SLIP.ORDER_ADDRESS
		,SLIP.ORDER_BUILDING_NM
		,SLIP.ORDER_COMPANY_NM
		,SLIP.ORDER_QUARTER
		,SLIP.ORDER_TEL
		,SLIP.ACCOUNT_METHOD
		,SLIP.ACCOUNT_COMMISSION
		,SLIP.ORDER_REMARKS
		,SLIP.ORDER_MEMO
		,SLIP.USED_POINT
		,SLIP.GET_POINT
		,SLIP.MENBER_NO
		,SLIP.DEPOSIT_DATE
		,SLIP.REGISTRY_STAFF
		,SLIP.DESTINATION_FAMILY_NM
		,SLIP.DESTINATION_FIRST_NM
		,SLIP.DESTINATION_FAMILY_NM_KANA
		,SLIP.DESTINATION_FIRST_NM_KANA
		,(SLIP.DESTINATION_FAMILY_NM || ' ' ||
		SLIP.DESTINATION_FIRST_NM)AS DESTINATION_FULL_NM
		,(SLIP.DESTINATION_FAMILY_NM_KANA || ' ' ||
		SLIP.DESTINATION_FIRST_NM_KANA)AS DESTINATION_FULL_NM_KANA
		,SLIP.DESTINATION_ZIP
		,SLIP.DESTINATION_PREFECTURES
		,SLIP.DESTINATION_MUNICIPALITY
		,SLIP.DESTINATION_ADDRESS
		,SLIP.DESTINATION_BUILDING_NM
		,SLIP.DESTINATION_COMPANY_NM
		,SLIP.DESTINATION_QUARTER
		,SLIP.DESTINATION_TEL
		,SLIP.SENDER_MEMO
		,COALESCE(SLIP.ORDER_REMARKS_MEMO, '') AS ORDER_REMARKS_MEMO
		,SLIP.SENDER_REMARKS
		,SLIP.INVOICE_CLASSIFICATION
		,SLIP.SLIP_NO
		,SLIP.DESTINATION_APPOINT_DATE
		,SLIP.DESTINATION_APPOINT_TIME
		,SLIP.SHIPMENT_PLAN_DATE
		,SLIP.TRANSPORT_CORPORATION_SYSTEM
		,SLIP.SLIP_MEMO
		,SLIP.CASH_ON_DELIVERY_COMMISSION
		,SLIP.STATUS
		,SLIP.POSTAGE
		,SLIP.COD_COMMISSION
		,SLIP.CONSUMPTION_TAX
		,SLIP.DISCOMMONDITY
		,SLIP.GIFT
		,SLIP.SUM_CLAIM_PRICE
		,SLIP.SUM_PIECE_RATE
		,SLIP.DISPOSAL_ROUTE
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SLIP.PICKING_LIST_FLG
		,SLIP.LEAVING_FLG
		,SLIP.RETURN_FLG
		,SLIP.DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,SLIP.CHANNEL_NM
		,SLIP.CORPORATION_NM
		<!-- マスタ以外の商品数カウンター -->
		,COALESCE(S_ITEM.NOT_MST_ITEM_COUNT, 0)AS NOT_ITEM_COUNT
		,SLIP.SHIPMENT_DATE
		<!-- domestic information-->
		FROM
		(SELECT 
		SYS_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,SYS_STORE_ID
		,ORDER_NO
		,ORDER_DATE
		,ORDER_TIME
		,ORDER_FAMILY_NM
		,ORDER_FIRST_NM
		,ORDER_FAMILY_NM_KANA
		,ORDER_FIRST_NM_KANA
		,ORDER_MAIL_ADDRESS
		,ORDER_ZIP
		,ORDER_PREFECTURES
		,ORDER_MUNICIPALITY
		,ORDER_ADDRESS
		,ORDER_BUILDING_NM
		,ORDER_COMPANY_NM
		,ORDER_QUARTER
		,ORDER_TEL
		,ACCOUNT_METHOD
		,ACCOUNT_COMMISSION
		,ORDER_REMARKS
		,ORDER_MEMO
		,ORDER_REMARKS_MEMO
		,USED_POINT
		,GET_POINT
		,MENBER_NO
		,DEPOSIT_DATE
		,REGISTRY_STAFF
		,DESTINATION_FAMILY_NM
		,DESTINATION_FIRST_NM
		,DESTINATION_FAMILY_NM_KANA
		,DESTINATION_FIRST_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_TEL
		,SENDER_REMARKS
		,SENDER_MEMO
		,INVOICE_CLASSIFICATION
		,SLIP_NO
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_PLAN_DATE
		,TRANSPORT_CORPORATION_SYSTEM
		,SLIP_MEMO
		,CASH_ON_DELIVERY_COMMISSION
		,STATUS
		,POSTAGE
		,COD_COMMISSION
		,CONSUMPTION_TAX
		,DISCOMMONDITY
		,GIFT
		,DISPOSAL_ROUTE
		,SLIP.DELIVERY_REMARKS
		,SLIP.BUY_COUNT
		,SLIP.TAX_CLASS
		,SLIP.TAX_RATE
		,SLIP.TAX
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,PICKING_LIST_FLG
		<!-- ,PICKING_FLG -->
		,LEAVING_FLG
		,RETURN_FLG
		,DELETE_FLAG
		,SLIP.SYS_CHANNEL_ID
		,CHANNEL.CHANNEL_NM
		,CORPORATION.CORPORATION_NM
		<!-- 20140521 Takakuwa 出荷日を追加 -->
		,SLIP.SHIPMENT_DATE
		<!-- domestic information-->
		FROM
		SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CHANNEL_ID
		,CHANNEL_NM
		FROM
		MST_CHANNEL
		WHERE
		1 = 1
		)CHANNEL
		ON
		CHANNEL.SYS_CHANNEL_ID = SLIP.SYS_CHANNEL_ID
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		)AS
		CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysSalesSlipId">
				AND
				SYS_SALES_SLIP_ID =
				${sysSalesSlipId}
			</if-not-equals>
		</if-equals>

		<if-equals value="1" varName="getListFlg">
			<!-- <sql-ref refId="SEARCH_SALES_SLIP_WHERE_SQL_REF"/> -->

			<if-not-null varName="sysCorporationId">
				<if-not-equals value="0" varName="sysCorporationId">
					AND
					SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				</if-not-equals>
			</if-not-null>

			<if-not-empty varName="orderDateFrom">
				AND
				ORDER_DATE &gt;=
				${orderDateFrom}
			</if-not-empty>
			<if-not-empty varName="orderDateTo">
				AND
				ORDER_DATE &lt;= ${orderDateTo}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateFrom">
				AND
				SHIPMENT_PLAN_DATE &gt;=
				${shipmentPlanDateFrom}
			</if-not-empty>
			<if-not-empty varName="shipmentPlanDateTo">
				AND
				SHIPMENT_PLAN_DATE &lt;=
				${shipmentPlanDateTo}
			</if-not-empty>
			<if-not-empty varName="orderNo">
				AND
				ORDER_NO ILIKE ${orderNo}
			</if-not-empty>
			<if-not-empty varName="slipNo">
				AND
				SLIP_NO ILIKE ${slipNo}
			</if-not-empty>
			<if-equals value="1" varName="slipNoExist">
				AND
				SLIP_NO IS NOT NULL
				AND
				SLIP_NO != ''
				<if-equals value="0" varName="slipNoHyphen">
					AND
					SLIP_NO != '-'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoHyphen">
				<if-equals value="0" varName="slipNoExist">
					AND
					SLIP_NO LIKE '-%'
				</if-equals>
			</if-equals>
			<if-equals value="1" varName="slipNoNone">
				AND
				(SLIP_NO IS NULL OR SLIP_NO
				= '')
			</if-equals>

			<if-not-empty varName="orderContent">
				<if-equals value="1" varName="orderType">
					AND
					((SLIP.destination_family_nm ||
					SLIP.destination_first_nm) ILIKE ${orderContent}
					OR (SLIP.destination_family_nm_kana
					|| SLIP.destination_first_nm_kana) ILIKE
					${orderContent})
				</if-equals>			

				<if-equals value="2" varName="orderType">
					AND
					((SLIP.ORDER_FAMILY_NM ||
					SLIP.ORDER_FIRST_NM) ILIKE ${orderContent}
					OR (SLIP.ORDER_FAMILY_NM_KANA
					|| SLIP.ORDER_FIRST_NM_KANA) ILIKE
					${orderContent})
				</if-equals>			
			</if-not-empty>

			<if-not-empty varName="telContent">
				<if-equals value="1" varName="telType">
					AND
					destination_tel ILIKE ${telContent}
				</if-equals>			

				<if-equals value="2" varName="telType">
					AND
					ORDER_TEL ILIKE ${telContent}
				</if-equals>			
			</if-not-empty>

			<if-not-empty varName="invoiceClassification">
				AND
				INVOICE_CLASSIFICATION =
				${invoiceClassification}
			</if-not-empty>

			<if-not-empty varName="destinationNm">
				AND
				((SLIP.DESTINATION_FAMILY_NM ||
				SLIP.DESTINATION_FIRST_NM) ILIKE
				${destinationNm}
				OR
				(SLIP.DESTINATION_FAMILY_NM_KANA || SLIP.DESTINATION_FIRST_NM_KANA)
				ILIKE ${destinationNm})
			</if-not-empty>

			<if-not-empty varName="orderMailAddress">
				AND
				ORDER_MAIL_ADDRESS ILIKE
				${orderMailAddress}
			</if-not-empty>

			<if-not-empty varName="transportCorporationSystem">
				AND
				TRANSPORT_CORPORATION_SYSTEM =
				${transportCorporationSystem}
			</if-not-empty>

			<if-not-empty varName="destinationTel">
				AND
				DESTINATION_TEL ILIKE
				${destinationTel}
			</if-not-empty>

			<if-not-empty varName="accountMethod">
				AND
				ACCOUNT_METHOD =
				${accountMethod}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &gt;=
				${destinationAppointDateFrom}
			</if-not-empty>

			<if-not-empty varName="destinationAppointDateFrom">
				AND
				DESTINATION_APPOINT_DATE &lt;=
				${destinationAppointDateTo}
			</if-not-empty>

			<if-not-empty varName="disposalRoute">
				AND
				DISPOSAL_ROUTE =
				${disposalRoute}
			</if-not-empty>

			<if-not-empty varName="memo">
				AND
				(ORDER_MEMO || SENDER_MEMO)
				ILIKE ${memo}
			</if-not-empty>

			<if-not-empty varName="sumClaimPriceFrom">
				AND
				SUM_CLAIM_PRICE &gt;=
				${sumClaimPriceFrom}
			</if-not-empty>
			<if-not-empty varName="sumClaimPriceTo">
				AND
				SUM_CLAIM_PRICE &lt;=
				${sumClaimPriceTo}
			</if-not-empty>
			<if-not-equals value="1" varName="searchAllFlg">
				<if-not-empty varName="pickingListFlg">
					AND
					PICKING_LIST_FLG =
					${pickingListFlg}
				</if-not-empty>
				<if-not-empty varName="leavingFlg">
					AND
					LEAVING_FLG = ${leavingFlg}
				</if-not-empty>
				<if-not-empty varName="returnFlg">
					AND
					RETURN_FLG = ${returnFlg}
				</if-not-empty>
			</if-not-equals>
			
			<if-not-empty varName="sysChannelIdOne">
				<if-not-empty varName="sysChannelIdTwo">
					<if-not-equals value="1" varName="sysChannelIdOther">
						AND	(SLIP.SYS_CHANNEL_ID = 10 OR SLIP.SYS_CHANNEL_ID = 13)
					</if-not-equals>
				</if-not-empty>

				<if-not-equals value="1" varName="sysChannelIdTwo">
					<if-not-empty varName="sysChannelIdOther">
						AND	(SLIP.SYS_CHANNEL_ID > 0 AND SLIP.SYS_CHANNEL_ID != 13)
					</if-not-empty>
					<if-not-equals value="1" varName="sysChannelIdOther">
						AND	(SLIP.SYS_CHANNEL_ID = 10)
					</if-not-equals>
				</if-not-equals>
			</if-not-empty>

			<if-not-empty varName="sysChannelIdTwo">
				<if-not-equals value="1" varName="sysChannelIdOne">
					<if-not-empty varName="sysChannelIdOther">
						AND	(SLIP.SYS_CHANNEL_ID > 0 AND SLIP.SYS_CHANNEL_ID != 10)
					</if-not-empty>
					
					<if-not-equals value="1" varName="sysChannelIdOther">
						AND	(SLIP.SYS_CHANNEL_ID = 13)
					</if-not-equals>
				</if-not-equals>
			</if-not-empty>

			<if-not-empty varName="sysChannelIdOther">

				<if-not-equals value="1" varName="sysChannelIdOne">
					<if-not-equals value="1" varName="sysChannelIdTwo">
						AND	(SLIP.SYS_CHANNEL_ID != 13 AND SLIP.SYS_CHANNEL_ID != 10)
					</if-not-equals>
				</if-not-equals>
			</if-not-empty>
		</if-equals>
		)AS SLIP
		INNER JOIN
		(SELECT
		S_ITEM.SYS_SALES_SLIP_ID
		,COUNT(NOT_ITEM.SYS_ITEM_ID)AS NOT_MST_ITEM_COUNT
		FROM
		SALES_ITEM AS
		S_ITEM
		<if-equals value="1" varName="itemCodeAreaFlg">
			INNER JOIN
			(SELECT
			SYS_ITEM_ID
			FROM
			MST_ITEM
			WHERE
			1 = 1
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE LIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				ITEM_NM LIKE ${itemNm}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= ${itemCodeFrom}
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= ${itemCodeTo}
			</if-not-empty>
			)AS M_ITEM
			ON
			M_ITEM.SYS_ITEM_ID = S_ITEM.SYS_ITEM_ID
		</if-equals>
		LEFT JOIN
		(SELECT
		SYS_SALES_SLIP_ID
		,SYS_ITEM_ID
		FROM
		SALES_ITEM
		WHERE
		DELETE_FLAG= '0'
		AND
		SYS_ITEM_ID = 0
		)AS NOT_ITEM
		ON
		NOT_ITEM.SYS_SALES_SLIP_ID = S_ITEM.SYS_SALES_SLIP_ID
		WHERE
		DELETE_FLAG
		= '0'
		<if-not-empty varName="salesItemCode">
			AND
			S_ITEM.ITEM_CODE ILIKE
			${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			S_ITEM.ITEM_NM ILIKE ${salesItemNm}
		</if-not-empty>
		GROUP BY
		S_ITEM.SYS_SALES_SLIP_ID
		)AS S_ITEM
		ON
		S_ITEM.SYS_SALES_SLIP_ID =
		SLIP.SYS_SALES_SLIP_ID
		ORDER BY
		1 = 1
		<!-- 売上一覧のSQLを流用 ここまで -->
		) AS S_SLIP
		ON
		SITEM_COST.SYS_SALES_SLIP_ID = S_SLIP.SYS_SALES_SLIP_ID
		<if-not-empty varName="wholseSalerName">
			LEFT JOIN
			(SELECT management_code, purchasing_cost, wholsesaler_nm FROM exhibit_manage where delete_flag='0') as exm
			ON(SITEM_COST.item_code=exm.management_code)
		</if-not-empty>
		WHERE
		1 = 1
		AND
		SITEM_COST.DELETE_FLAG = '0'
		AND
		SITEM_COST.SYS_ITEM_ID != 5194
		AND
		SITEM_COST.SYS_ITEM_ID != 5193
		AND
		SITEM_COST.SYS_ITEM_ID != 5192
		AND
		SITEM_COST.SYS_ITEM_ID != 11298
		<!-- BONCRE-2468 quoカード -->
		AND
 		SITEM_COST.SYS_ITEM_ID != 15067
		<!-- BONCRE-3007 品番EDC-CANを法人間請求書に表示しない 売上原価一覧 -->
		AND
		SITEM_COST.ITEM_CODE != 'EDC-CAN'
		AND
		<!-- 品番 01011293006 -->
		SITEM_COST.SYS_ITEM_ID != 18758
		AND
		<!-- 品番 01011293005 -->
		SITEM_COST.SYS_ITEM_ID != 18757

		<if-not-empty varName="wholseSalerName">
			AND
			exm.wholsesaler_nm ILIKE ${wholseSalerName}
		</if-not-empty>
		
		<!-- 原価条件条件 -->
		<if-equals value="1" varName="costMakerItemFlg">
			AND
			SITEM_COST.SYS_ITEM_ID = 0
		</if-equals>
		<if-equals value="1" varName="costNoRegistry">
			AND
			<if-null varName="costZeroRegistry">
				SITEM_COST.COST IS NULL
			</if-null>
			<if-equals value="1" varName="costZeroRegistry">
				(SITEM_COST.COST IS NULL OR
				SITEM_COST.COST = 0)
			</if-equals>
		</if-equals>
		<if-null varName="costNoRegistry">
			<if-equals value="1" varName="costZeroRegistry">
				AND
				SITEM_COST.COST = 0
			</if-equals>
		</if-null>
		<if-equals value="1" varName="costNoCheckFlg">
			AND
			<if-null varName="costCheckedFlg">
				SITEM_COST.COST_CHECK_FLAG = '0'
			</if-null>
			<if-equals value="1" varName="costCheckedFlg">
				(SITEM_COST.COST_CHECK_FLAG =
				'0' OR SITEM_COST.COST_CHECK_FLAG = '1')
			</if-equals>
		</if-equals>
		<if-null varName="costNoCheckFlg">
			<if-equals value="1" varName="costCheckedFlg">
				AND
				SITEM_COST.COST_CHECK_FLAG
				= '1'
			</if-equals>
		</if-null>
		ORDER BY
		1 = 1
		<!-- ソート条件 -->
		<if-not-empty varName="sortValue">
			<!-- 伝票番号 -->
			<if-equals value="1" varName="sortValue">
				,S_SLIP.ORDER_NO
			</if-equals>
			<!-- 取引先法人ID -->
			<if-equals value="2" varName="sortValue">
				,S_SLIP.SYS_CORPORATION_ID
			</if-equals>
			<!-- 出庫予定日 -->
			<if-equals value="3" varName="sortValue">
				,S_SLIP.SHIPMENT_PLAN_DATE
			</if-equals>
			<!-- 品番 -->
			<if-equals value="4" varName="sortValue">
				,ITEM_CODE_ORDER
			</if-equals>
			<!-- 商品名 -->
			<if-equals value="5" varName="sortValue">
				,SITEM_COST.ITEM_NM
			</if-equals>
			<!-- 昇順・降順 -->
			<if-equals value="1" varName="sortOrder">ASC</if-equals>
			<if-equals value="2" varName="sortOrder">DESC</if-equals>
		</if-not-empty>
		,SITEM_COST.SYS_SALES_ITEM_ID
		<if-equals value="1" varName="sortOrder">ASC</if-equals>
		<if-equals value="2" varName="sortOrder">DESC</if-equals>
	</sql-template>

	<sql-template id="SEL_SEARCH_SALES_COST">
		SELECT
			SITEM.SYS_SALES_ITEM_ID
			,SITEM.SYS_SALES_SLIP_ID
			,SITEM.SYS_ITEM_ID
			,CASE
				WHEN SITEM.ITEM_CODE IS NOT NULL AND  SITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
					M_ITEM.ITEM_CODE
				WHEN SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE != ''  THEN
					SITEM.ITEM_CODE
				WHEN M_ITEM.ITEM_CODE IS NOT  NULL and  M_ITEM.ITEM_CODE != '' THEN
					M_ITEM.ITEM_CODE
			END AS ITEM_CODE
			,SITEM.ITEM_NM
			,SITEM.UPDATED_FLAG
			,SITEM.PROFIT
			,SITEM.PIECE_RATE
			,SITEM.COST_CHECK_FLAG
			,SITEM.ORDER_NUM
			,COALESCE(SITEM.COST,0) AS COST
			,CASE
				WHEN SITEM.UPDATED_FLAG = 1 THEN
					SITEM.POSTAGE
				WHEN SITEM.UPDATED_FLAG IS NULL OR SITEM.UPDATED_FLAG = 0 THEN
					exm.POSTAGE
			END AS POSTAGE
			,COALESCE(SITEM.KIND_COST,0) AS KIND_COST
			,COALESCE(SITEM.LIST_PRICE,0) AS LIST_PRICE
			,COALESCE(SITEM.ITEM_RATE_OVER,0) AS ITEM_RATE_OVER
			,S_SLIP.ORDER_NO AS SALE_SLIP_NO
			,S_SLIP.SHIPMENT_PLAN_DATE
			,S_SLIP.CORPORATION_NM
			,COALESCE(S_SLIP.CORPORATION_RATE_OVER,0) AS CORPORATION_RATE_OVER
			,COALESCE(I_COST.KIND_COST,0) AS ITEM_KIND_COST
		FROM
		SALES_ITEM AS SITEM
		INNER JOIN
		(SELECT
			SLIP.SYS_SALES_SLIP_ID
			,SLIP.SYS_CORPORATION_ID
			,SLIP.ORDER_NO
			,SLIP.SHIPMENT_PLAN_DATE
			,CORPORATION.CORPORATION_NM
			,CORPORATION.CORPORATION_RATE_OVER
		FROM
			SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
			SYS_CORPORATION_ID
			,CORPORATION_NM
			,CORPORATION_RATE_OVER
		FROM
			MST_CORPORATION
			WHERE
			1 = 1
		) AS CORPORATION
		ON
			CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		) AS S_SLIP
		ON
		SITEM.SYS_SALES_SLIP_ID = S_SLIP.SYS_SALES_SLIP_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		SITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,KIND_COST
		FROM
		ITEM_COST
		WHERE
		SYS_CORPORATION_ID = 99
		) AS I_COST
		ON
		SITEM.SYS_ITEM_ID = I_COST.SYS_ITEM_ID
		LEFT JOIN
		(SELECT postage, management_code, purchasing_cost FROM exhibit_manage where delete_flag='0') as exm
		ON(SITEM.item_code=exm.management_code)
		WHERE
		SITEM.DELETE_FLAG = '0'
		AND SYS_SALES_ITEM_ID = ${sysSaleItemId}
	</sql-template>

	<sql-template id="UPD_SALES_ITEM_COST">
		UPDATE SALES_ITEM SET
		COST = ${cost}
		,KIND_COST = ${kindCost}
		,PROFIT = ${profit}
		,POSTAGE = ${postage}
		,LIST_PRICE = ${listPrice}
		<if-not-equals value="0" varName="itemRateOver">
			,ITEM_RATE_OVER = ${itemRateOver}
		</if-not-equals>
		,COST_CHECK_FLAG = ${costCheckFlag}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,UPDATED_FLAG = ${updatedFlag}
		WHERE
		SYS_SALES_ITEM_ID =
		${sysSalesItemId}
	</sql-template>

	<sql-template id="SEL_SEARCH_LATEST_SALES_COST">
		SELECT
		S_ITEM.SYS_SALES_ITEM_ID
		,S_ITEM.ITEM_CODE
		,S_ITEM.COST
		,S_ITEM.LIST_PRICE
		,S_ITEM.ITEM_RATE_OVER
		,CASE
			WHEN S_ITEM.UPDATED_FLAG = 1 THEN
				S_ITEM.POSTAGE
			WHEN S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0 THEN
				exm.POSTAGE
		END AS POSTAGE
		,COALESCE(S_ITEM.KIND_COST,0) AS KIND_COST
		FROM
		(
		SELECT
		SITEM.SYS_SALES_ITEM_ID
		,SITEM.SYS_SALES_SLIP_ID
		,SITEM.SYS_ITEM_ID
		,CASE
			WHEN SITEM.ITEM_CODE IS NOT NULL AND  SITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
				M_ITEM.ITEM_CODE
			WHEN SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE != ''  THEN
				SITEM.ITEM_CODE
			WHEN M_ITEM.ITEM_CODE IS NOT  NULL and  M_ITEM.ITEM_CODE != '' THEN
				M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,SITEM.ITEM_NM
		,SITEM.UPDATED_FLAG
		,SITEM.POSTAGE
		,SITEM.KIND_COST
		,SITEM.PROFIT
		,SITEM.PIECE_RATE
		,SITEM.COST_CHECK_FLAG
		,SITEM.ORDER_NUM
		,COALESCE(SITEM.COST,0) AS COST
		,COALESCE(SITEM.LIST_PRICE,0) AS LIST_PRICE
		,COALESCE(SITEM.ITEM_RATE_OVER,0) AS ITEM_RATE_OVER
		,SITEM.UPDATE_DATE
		FROM
		SALES_ITEM AS SITEM
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		SITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		) AS S_ITEM
		LEFT JOIN
		(SELECT management_code, postage, purchasing_cost, wholsesaler_nm FROM exhibit_manage where delete_flag='0') as exm
		ON(S_ITEM.item_code=exm.management_code)
		WHERE
		S_ITEM.ITEM_CODE = ${itemCode}
		ORDER BY
		S_ITEM.UPDATE_DATE DESC
		OFFSET 0 LIMIT 1;
	</sql-template>

	<!-- 業販原価一覧のシステム売上商品ID -->
	<sql-template id="SEL_SEARCH_SYS_CORP_SALES_ITEM">
		SELECT
		C_SITEM_COST.SYS_CORPORATE_SALES_ITEM_ID
		,CASE
			WHEN C_SITEM_COST.ITEM_CODE IS NOT NULL AND  C_SITEM_COST.ITEM_CODE = '00' AND M_ITEMS.ITEM_CODE IS NOT NULL AND  M_ITEMS.ITEM_CODE != ''  THEN
				M_ITEMS.ITEM_CODE
			WHEN C_SITEM_COST.ITEM_CODE IS NOT NULL AND C_SITEM_COST.ITEM_CODE != ''  THEN
				C_SITEM_COST.ITEM_CODE
			WHEN M_ITEMS.ITEM_CODE IS NOT NULL AND M_ITEMS.ITEM_CODE != '' THEN
				M_ITEMS.ITEM_CODE
		END AS ITEM_CODE_ORDER
		FROM
		CORPORATE_SALES_ITEM AS C_SITEM_COST
		<if-not-empty varName="wholseSalerName">
			LEFT JOIN
			(SELECT management_code, postage, purchasing_cost, wholsesaler_nm FROM exhibit_manage where delete_flag='0') as exm
			ON(C_SITEM_COST.item_code=exm.management_code)
		</if-not-empty>
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		WHERE
		DELETE_FLAG = '0'
		) AS M_ITEMS
		ON
		C_SITEM_COST.SYS_ITEM_ID = M_ITEMS.SYS_ITEM_ID
		INNER JOIN
		<!-- 業販一覧のSQLを流用 -->
		(SELECT
		C_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,C_SLIP.SYS_CORPORATION_ID
		,C_SLIP.ORDER_NO
		,C_SLIP.SLIP_STATUS
		,C_SLIP.PERSON_IN_CHARGE
		,C_SLIP.INVALID_FLAG
		,C_SLIP.ESTIMATE_DATE
		,C_SLIP.ORDER_DATE
		,C_SLIP.SALES_DATE
		,C_SLIP.BILLING_DATE
		,C_SLIP.SYS_CLIENT_ID
		,C_SLIP.PAYMENT_METHOD
		,C_SLIP.PAYMENT_METHOD_NM
		,C_SLIP.DELIVERY_DEADLINE
		,C_SLIP.SYS_ACCOUNT_ID
		,C_SLIP.SUM_SALES_PRICE
		,C_SLIP.RECEIVE_PRICE
		,C_SLIP.RECEIVE_DATE
		,C_SLIP.ORDER_REMARKS
		,C_SLIP.ORDER_FIX_REMARKS
		,C_SLIP.ESTIMATE_REMARKS
		,C_SLIP.BILLING_REMARKS
		,C_SLIP.DEPOSIT_DATE
		,C_SLIP.DESTINATION_NM
		,C_SLIP.DESTINATION_NM_KANA
		,C_SLIP.DESTINATION_ZIP
		,C_SLIP.DESTINATION_PREFECTURES
		,C_SLIP.DESTINATION_MUNICIPALITY
		,C_SLIP.DESTINATION_ADDRESS
		,C_SLIP.DESTINATION_BUILDING_NM
		,C_SLIP.DESTINATION_COMPANY_NM
		,C_SLIP.DESTINATION_QUARTER
		,C_SLIP.DESTINATION_POSITION
		,C_SLIP.DESTINATION_CONTACT_PERSON_NM
		,C_SLIP.DESTINATION_TEL
		,C_SLIP.DESTINATION_FAX
		,C_SLIP.SENDER_REMARKS
		,C_SLIP.SLIP_NO
		,C_SLIP.TRANSPORT_CORPORATION_SYSTEM
		,C_SLIP.INVOICE_CLASSIFICATION
		,C_SLIP.DESTINATION_APPOINT_DATE
		,C_SLIP.DESTINATION_APPOINT_TIME
		,C_SLIP.SHIPMENT_DATE
		,C_SLIP.SUM_CLAIM_PRICE
		,C_SLIP.SUM_PIECE_RATE
		,C_SLIP.TAX_RATE
		,C_SLIP.TAX
		,C_SLIP.CURRENCY
		,C_SLIP.RETURN_FLG
		,C_SLIP.CREATE_DATE
		,C_SLIP.CREATE_USER_ID
		,C_SLIP.UPDATE_DATE
		,C_SLIP.UPDATE_USER_ID
		,C_SLIP.SLIP_STATUS_NM
		,C_SLIP.CORPORATION_NM
		,C_SLIP.CLIENT_NM

		<!-- マスタ以外の商品数カウンター -->
		,COALESCE(C_ITEM.NOT_MST_ITEM_COUNT, 0)AS NOT_ITEM_COUNT
		FROM
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.SYS_CORPORATION_ID
		,ORDER_NO
		,SLIP_STATUS
		,PERSON_IN_CHARGE
		,INVALID_FLAG
		,ESTIMATE_DATE
		,ORDER_DATE
		,SALES_DATE
		,BILLING_DATE
		,SLIP.SYS_CLIENT_ID
		,PAYMENT_METHOD
		,CASE PAYMENT_METHOD
		WHEN '1' THEN '掛売'
		WHEN '2' THEN '代引き'
		WHEN '3' THEN '銀行振込'
		ELSE ''
		END AS PAYMENT_METHOD_NM
		,DELIVERY_DEADLINE
		,SYS_ACCOUNT_ID
		,SUM_SALES_PRICE
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,ORDER_REMARKS
		,ORDER_FIX_REMARKS
		,ESTIMATE_REMARKS
		,BILLING_REMARKS
		,DEPOSIT_DATE
		,DESTINATION_NM
		,DESTINATION_NM_KANA
		,DESTINATION_ZIP
		,DESTINATION_PREFECTURES
		,DESTINATION_MUNICIPALITY
		,DESTINATION_ADDRESS
		,DESTINATION_BUILDING_NM
		,DESTINATION_COMPANY_NM
		,DESTINATION_QUARTER
		,DESTINATION_POSITION
		,DESTINATION_CONTACT_PERSON_NM
		,DESTINATION_TEL
		,DESTINATION_FAX
		,SENDER_REMARKS
		,SLIP_NO
		,TRANSPORT_CORPORATION_SYSTEM
		,INVOICE_CLASSIFICATION
		,DESTINATION_APPOINT_DATE
		,DESTINATION_APPOINT_TIME
		,SHIPMENT_DATE
		,SUM_CLAIM_PRICE
		,SUM_PIECE_RATE
		,TAX_RATE
		,TAX
		,CURRENCY
		,RETURN_FLG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,CASE SLIP_STATUS
		WHEN '1' THEN '見積'
		WHEN '2' THEN '受注'
		ELSE ''
		END AS SLIP_STATUS_NM

		,CORPORATION_NM

		,CLIENT_NM
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		INNER JOIN
		(SELECT
		SYS_CLIENT_ID
		,CLIENT_NM
		,CLIENT_NO
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		) AS CLIENT
		ON
		SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			<if-not-equals value="0" varName="sysCorporateSalesSlipId">
				AND
				SLIP.SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
			</if-not-equals>
		</if-equals>

		<if-not-empty varName="orderNo">
			AND
			ORDER_NO ILIKE ${orderNo}
		</if-not-empty>

		<if-not-null varName="sysCorporateSalesSlipId">
			<if-not-equals value="0" varName="sysCorporateSalesSlipId">
				AND
				SLIP.SYS_CORPORATE_SALES_SLIP_ID = ${sysCorporateSalesSlipId}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="sysClientId">
			<if-not-equals value="0" varName="sysClientId">
				AND
				SLIP.SYS_CLIENT_ID = ${sysClientId}
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="clientNo">
			AND
			CLIENT_NO LIKE ${clientNo}
		</if-not-empty>

		<if-equals value="1" varName="getListFlg">
			<if-not-null varName="sysCorporationId">
				<if-not-equals value="0" varName="sysCorporationId">
					AND
					SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				</if-not-equals>
			</if-not-null>

			<if-not-empty varName="estimateDateFrom">
				AND
				ESTIMATE_DATE &gt;= ${estimateDateFrom}
			</if-not-empty>
			<if-not-empty varName="estimateDateTo">
				AND
				ESTIMATE_DATE &lt;= ${estimateDateTo}
			</if-not-empty>

			<if-not-empty varName="orderDateFrom">
				AND
				ORDER_DATE &gt;= ${orderDateFrom}
			</if-not-empty>
			<if-not-empty varName="orderDateTo">
				AND
				ORDER_DATE &lt;= ${orderDateTo}
			</if-not-empty>

			<if-not-empty varName="billingDateFrom">
				AND
				BILLING_DATE &gt;= ${billingDateFrom}
			</if-not-empty>
			<if-not-empty varName="billingDateTo">
				AND
				BILLING_DATE &lt;= ${billingDateTo}
			</if-not-empty>

			<if-not-empty varName="clientNm">
				AND
				CLIENT_NM ILIKE ${clientNm}
			</if-not-empty>

			<if-not-empty varName="personInCharge">
				AND
				PERSON_IN_CHARGE ILIKE ${personInCharge}
			</if-not-empty>

			<if-not-empty varName="paymentMethod">
				<if-not-equals value="0" varName="paymentMethod">
					AND
					PAYMENT_METHOD = ${paymentMethod}
				</if-not-equals>
			</if-not-empty>

			<if-not-empty varName="transportCorporationSystem">
				AND
				TRANSPORT_CORPORATION_SYSTEM != ''
				AND
				TRANSPORT_CORPORATION_SYSTEM = ${transportCorporationSystem}
			</if-not-empty>

			<if-not-empty varName="receivableBalance">
				<if-equals value="1" varName="receivableBalance">
					AND
					(SUM_SALES_PRICE - RECEIVE_PRICE) &gt; 0
				</if-equals>
				<if-equals value="2" varName="receivableBalance">
					AND
					(SUM_SALES_PRICE - RECEIVE_PRICE) &lt;= 0
				</if-equals>
			</if-not-empty>

			<if-not-empty varName="slipStatus">
				<if-equals value="1" varName="slipStatus">
					AND
					SLIP_STATUS = '1'
				</if-equals>
				<if-equals value="2" varName="slipStatus">
					AND
					SLIP_STATUS = '2'
				</if-equals>
			</if-not-empty>

			<if-not-equals value="1" varName="searchAllFlg">
				<if-not-empty varName="returnFlg">
					AND
					RETURN_FLG = ${returnFlg}
				</if-not-empty>
			</if-not-equals>
			<if-not-empty varName="invalidFlag">
				AND
				INVALID_FLAG = ${invalidFlag}
			</if-not-empty>

			<if-not-empty varName="currency">
				<if-not-equals value="0" varName="currency">
					AND
					CURRENCY = ${currency}
				</if-not-equals>
			</if-not-empty>

		</if-equals>

		) AS C_SLIP
		INNER JOIN
		(SELECT
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,COUNT(NOT_ITEM.SYS_ITEM_ID) AS NOT_MST_ITEM_COUNT
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		<if-not-empty varName="itemCodeAreaFlg">
			<if-equals value="1" varName="itemCodeAreaFlg">
				INNER JOIN
				(SELECT
				SYS_ITEM_ID
				FROM
				MST_ITEM
				WHERE
				1 = 1
				<if-not-empty varName="itemCode">
					AND
					ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND
					ITEM_NM LIKE ${itemNm}
				</if-not-empty>
				<if-not-empty varName="itemCodeFrom">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &gt;= ${itemCodeFrom}
				</if-not-empty>
				<if-not-empty varName="itemCodeTo">
					AND
					TO_NUMBER(ITEM_CODE, '00000000000') &lt;= ${itemCodeTo}
				</if-not-empty>
				AND
				ITEM_CODE != '11'
				AND
				ITEM_CODE != '77'
				AND
				ITEM_CODE != '88'
				AND
				ITEM_CODE != '99'
				<!-- BONCRE-2468 quoカード -->
				AND
				ITEM_CODE != '01011293004'
				<!-- BONCRE-3491 特定の品番を弾く -->
				AND
				ITEM_CODE != '01011293006'
				AND
				ITEM_CODE != '01011293005'
				<!---->
				)AS M_ITEM
				ON
				M_ITEM.SYS_ITEM_ID = ITEM.SYS_ITEM_ID
			</if-equals>
		</if-not-empty>
		LEFT JOIN
		(SELECT
		SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		FROM
		CORPORATE_SALES_ITEM
		WHERE
		DELETE_FLAG= '0'
		AND
		SYS_ITEM_ID = 0
		)AS NOT_ITEM
		ON
		NOT_ITEM.SYS_CORPORATE_SALES_SLIP_ID = ITEM.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		DELETE_FLAG ='0'
		
		<if-not-empty varName="salesItemCode">
			AND
			ITEM.ITEM_CODE ILIKE ${salesItemCode}
		</if-not-empty>
		<if-not-empty varName="salesItemNm">
			AND
			ITEM.ITEM_NM ILIKE ${salesItemNm}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateFrom">
			AND
			SCHEDULED_LEAVING_DATE &gt;= ${scheduledLeavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="scheduledLeavingDateTo">
			AND
			SCHEDULED_LEAVING_DATE &lt;= ${scheduledLeavingDateTo}
		</if-not-empty>

		<if-not-empty varName="leavingDateFrom">
			AND
			LEAVING_DATE &gt;= ${leavingDateFrom}
		</if-not-empty>
		<if-not-empty varName="leavingDateTo">
			AND
			LEAVING_DATE &lt;= ${leavingDateTo}
		</if-not-empty>

		<if-not-empty varName="salesDateFrom">
			AND
			SALES_DATE &gt;= ${salesDateFrom}
		</if-not-empty>
		<if-not-empty varName="salesDateTo">
			AND
			SALES_DATE &lt;= ${salesDateTo}
		</if-not-empty>

		<if-not-empty varName="slipStatus">
			<if-equals value="3" varName="slipStatus">
				AND
				SALES_DATE != ''
			</if-equals>
		</if-not-empty>
		<if-not-empty varName="otherItemFlag">
			<if-equals value="1" varName="otherItemFlag">
				AND
				ITEM.SYS_ITEM_ID = 0
				<if-not-empty varName="itemCode">
					AND
					ITEM.ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND
					ITEM.ITEM_NM LIKE ${itemNm}
				</if-not-empty>
			</if-equals>
		</if-not-empty>
		GROUP BY
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		HAVING
		1 = 1
		<if-not-equals value="1" varName="searchAllFlg">
			<if-not-empty varName="pickingListFlg">
				<if-equals value="0" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '0' OR NULL) &gt;= 1
				</if-equals>
				<if-equals value="1" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '0' OR NULL) = 0
				</if-equals>
				<if-equals value="2" varName="pickingListFlg">
					AND
					COUNT(PICKING_LIST_FLG = '1' OR NULL) = 0
				</if-equals>
			</if-not-empty>
			<if-not-empty varName="leavingFlg">
				<if-equals value="0" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE = '' OR NULL) &gt;= 1
				</if-equals>
				<if-equals value="1" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE = '' OR NULL) = 0
				</if-equals>
				<if-equals value="2" varName="leavingFlg">
					AND
					COUNT(LEAVING_DATE != '' OR NULL) = 0
				</if-equals>
			</if-not-empty>
		</if-not-equals>
		) AS C_ITEM
		ON
		C_SLIP.SYS_CORPORATE_SALES_SLIP_ID = C_ITEM.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		1 = 1
		<!-- 業販一覧のSQLを流用 -->
		) AS C_SALE_SLIP
		ON
		C_SITEM_COST.SYS_CORPORATE_SALES_SLIP_ID = C_SALE_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		WHERE
		1 = 1
		<if-not-empty varName="wholseSalerName">
			AND
			exm.wholsesaler_nm ILIKE ${wholseSalerName}
		</if-not-empty>
		AND
		C_SITEM_COST.DELETE_FLAG = '0'
		AND
		C_SITEM_COST.SYS_ITEM_ID != 5194
		AND
		C_SITEM_COST.SYS_ITEM_ID != 5193
		AND
		C_SITEM_COST.SYS_ITEM_ID != 5192
		AND
		C_SITEM_COST.SYS_ITEM_ID != 11298
		<!-- BONCRE-2468 quoカード -->
		AND
		C_SITEM_COST.SYS_ITEM_ID != 15067
		<!-- BONCRE-3491 特定の品番を弾く -->
		AND
		C_SITEM_COST.SYS_ITEM_ID != 01011293006
		AND
		C_SITEM_COST.SYS_ITEM_ID != 01011293005
		<!-- BONCRE-3007 品番EDC-CANを法人間請求書に表示しない 業販原価一覧 -->
		AND
		C_SITEM_COST.ITEM_CODE != 'EDC-CAN'
		AND
		C_SITEM_COST.SYS_ITEM_ID != 18758
		AND
		C_SITEM_COST.SYS_ITEM_ID != 18757
		<!-- 原価条件条件 -->
		<if-equals value="1" varName="costMakerItemFlg">
			AND
			C_SITEM_COST.SYS_ITEM_ID = 0
		</if-equals>
		<if-equals value="1" varName="costNoRegistry">
			AND
			<if-null varName="costZeroRegistry">
				C_SITEM_COST.COST IS NULL
			</if-null>
			<if-equals value="1" varName="costZeroRegistry">
				(C_SITEM_COST.COST IS NULL OR
				C_SITEM_COST.COST = 0)
			</if-equals>
		</if-equals>
		<if-null varName="costNoRegistry">
			<if-equals value="1" varName="costZeroRegistry">
				AND
				C_SITEM_COST.COST = 0
			</if-equals>
		</if-null>
		<if-equals value="1" varName="costNoCheckFlg">
			AND
			<if-null varName="costCheckedFlg">
				C_SITEM_COST.COST_CHECK_FLAG = '0'
			</if-null>
			<if-equals value="1" varName="costCheckedFlg">
				(C_SITEM_COST.COST_CHECK_FLAG
				= '0' OR
				C_SITEM_COST.COST_CHECK_FLAG = '1')
			</if-equals>
		</if-equals>
		<if-null varName="costNoCheckFlg">
			<if-equals value="1" varName="costCheckedFlg">
				AND
				C_SITEM_COST.COST_CHECK_FLAG = '1'
			</if-equals>
		</if-null>
		ORDER BY
		1 = 1
		<!-- ソート条件 -->
		<if-not-empty varName="sortValue">
			<!-- 伝票番号 -->
			<if-equals value="1" varName="sortValue">
				,C_SALE_SLIP.ORDER_NO
			</if-equals>
			<!-- 取引先法人ID -->
			<if-equals value="2" varName="sortValue">
				,C_SALE_SLIP.SYS_CORPORATION_ID
			</if-equals>
			<!-- 出庫予定日 -->
			<if-equals value="3" varName="sortValue">
				,C_SITEM_COST.SCHEDULED_LEAVING_DATE
			</if-equals>
			<!-- 品番 -->
			<if-equals value="4" varName="sortValue">
				,ITEM_CODE_ORDER
			</if-equals>
			<!-- 商品名 -->
			<if-equals value="5" varName="sortValue">
				,C_SITEM_COST.ITEM_NM
			</if-equals>
			<!-- 昇順・降順 -->
			<if-equals value="1" varName="sortOrder">ASC</if-equals>
			<if-equals value="2" varName="sortOrder">DESC</if-equals>
		</if-not-empty>
		,C_SITEM_COST.SYS_CORPORATE_SALES_ITEM_ID
		<if-equals value="1" varName="sortOrder">ASC</if-equals>
		<if-equals value="2" varName="sortOrder">DESC</if-equals>
	</sql-template>

	<!-- 業販原価一覧 -->
	<sql-template id="SEL_SEARCH_CORPRATE_SALES_COST">
		SELECT
		SITEM.SYS_CORPORATE_SALES_ITEM_ID
		,SITEM.UPDATED_FLAG
		,SITEM.PROFIT
		,SITEM.SYS_CORPORATE_SALES_SLIP_ID
		,SITEM.SYS_ITEM_ID
		,CASE
		
		WHEN SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE	
		WHEN SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE != '' THEN
			SITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,CASE
			WHEN SITEM.UPDATED_FLAG = 1 THEN
				SITEM.POSTAGE
			WHEN SITEM.UPDATED_FLAG IS NULL OR SITEM.UPDATED_FLAG = 0 THEN
				exm.POSTAGE
		END AS POSTAGE
		,COALESCE(SITEM.KIND_COST,0) AS KIND_COST
		,SITEM.ITEM_NM
		,SITEM.PIECE_RATE
		,SITEM.COST_CHECK_FLAG
		,SITEM.ORDER_NUM
		,COALESCE(SITEM.COST,0) AS COST
		,COALESCE(SITEM.LIST_PRICE,0) AS LIST_PRICE
		,COALESCE(SITEM.ITEM_RATE_OVER,0) AS ITEM_RATE_OVER
		,S_SLIP.ORDER_NO AS SALE_SLIP_NO
		,SITEM.SCHEDULED_LEAVING_DATE
		,S_SLIP.CORPORATION_NM
		,COALESCE(S_SLIP.CORPORATION_RATE_OVER,0) AS CORPORATION_RATE_OVER
		,COALESCE(I_COST.KIND_COST,0) AS ITEM_KIND_COST
		, wholsesaler_nm
		, purchasing_cost
		, exm.postage as dome_postage 
		,1 as store_flag
		FROM
		CORPORATE_SALES_ITEM AS SITEM
		INNER JOIN
		(SELECT
			SLIP.SYS_CORPORATE_SALES_SLIP_ID
			,SLIP.SYS_CORPORATION_ID
			,SLIP.ORDER_NO
			,CORPORATION.CORPORATION_NM
			,CORPORATION.CORPORATION_RATE_OVER
			FROM
			CORPORATE_SALES_SLIP AS SLIP
			INNER JOIN
			(SELECT
			SYS_CORPORATION_ID
			,CORPORATION_NM
			,CORPORATION_RATE_OVER
			FROM
			MST_CORPORATION
			WHERE
			1 = 1
			) AS CORPORATION
			ON
			CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
			
		) AS S_SLIP
		ON
		SITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		SITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,KIND_COST
		FROM
		ITEM_COST
		WHERE
		SYS_CORPORATION_ID = 99
		) AS I_COST
		ON
		SITEM.SYS_ITEM_ID = I_COST.SYS_ITEM_ID
		LEFT JOIN
		(SELECT management_code, postage, purchasing_cost, wholsesaler_nm FROM exhibit_manage where delete_flag='0') as exm
		ON(SITEM.item_code=exm.management_code)
		WHERE
		DELETE_FLAG = '0'
		AND SYS_CORPORATE_SALES_ITEM_ID = ${sysCorpSaleItemId}
	</sql-template>

	<sql-template id="UPD_CORP_SALES_ITEM_COST">
		UPDATE CORPORATE_SALES_ITEM SET
		COST = ${cost}
		,KIND_COST = ${kindCost}
		,POSTAGE = ${postage}
		,PROFIT = ${profit}
		,LIST_PRICE = ${listPrice}
		<if-not-equals value="0" varName="itemRateOver">
			,ITEM_RATE_OVER = ${itemRateOver}
		</if-not-equals>
		,COST_CHECK_FLAG = ${costCheckFlag}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,UPDATED_FLAG = ${updatedFlag}
		WHERE
		SYS_CORPORATE_SALES_ITEM_ID =
		${sysCorporateSalesItemId}
	</sql-template>

	<sql-template id="SEL_SEARCH_LATEST_CORP_SALES_COST">
		SELECT
		S_ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,S_ITEM.ITEM_CODE
		,S_ITEM.COST
		,S_ITEM.LIST_PRICE
		,S_ITEM.ITEM_RATE_OVER
		,CASE
			WHEN S_ITEM.UPDATED_FLAG = 1 THEN
				S_ITEM.POSTAGE
			WHEN S_ITEM.UPDATED_FLAG IS NULL OR S_ITEM.UPDATED_FLAG = 0 THEN
				exm.POSTAGE
		END AS POSTAGE
		,COALESCE(S_ITEM.KIND_COST,0) AS KIND_COST
		FROM
		(
		SELECT
		SITEM.SYS_CORPORATE_SALES_ITEM_ID
		,SITEM.SYS_CORPORATE_SALES_SLIP_ID
		,SITEM.SYS_ITEM_ID
		,CASE
		HEN  SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE
		WHEN SITEM.ITEM_CODE IS NOT NULL AND SITEM.ITEM_CODE != ''  THEN
			SITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,COALESCE(SITEM.COST,0) AS COST
		,COALESCE(SITEM.LIST_PRICE,0) AS LIST_PRICE
		,COALESCE(SITEM.ITEM_RATE_OVER,0) AS ITEM_RATE_OVER
		,SITEM.PROFIT
		,SITEM.UPDATED_FLAG
		,SITEM.POSTAGE
		,SITEM.KIND_COST
		,SITEM.UPDATE_DATE
		FROM
		CORPORATE_SALES_ITEM AS SITEM
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		SITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		) AS S_ITEM
		LEFT JOIN
		(SELECT management_code, postage, purchasing_cost, wholsesaler_nm FROM exhibit_manage where delete_flag='0') as exm
		ON(S_ITEM.item_code=exm.management_code)
		WHERE
		S_ITEM.ITEM_CODE = ${itemCode}
		ORDER BY
		S_ITEM.UPDATE_DATE DESC
		OFFSET 0 LIMIT 1;
	</sql-template>

	<sql-template id="SEL_SEARCH_SYS_BTOBILL_ID_LIST">
		SELECT
		SYS_BTOB_BILL_ID
		FROM
		BTOB_BILL
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysCorporationId">
			AND SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		ORDER BY
		BILLDATA_CREATE_DATE DESC, SYS_CORPORATION_ID ASC, BTOB_BILL_NO DESC;
	</sql-template>

	<sql-template id="SEL_SEARCH_SYS_CORPORATION_NM">
		SELECT
			SYS_CORPORATION_ID
		FROM
			MST_CORPORATION
		WHERE
			CORPORATION_FULL_NM ILIKE = ${corporationFullNm}
	</sql-template>

	<!-- 請求書作成画面初期表示時 -->
	<sql-template id="SEL_SEARCH_SYS_CORPBILL_ID_LIST">
		SELECT
		SYS_CORPORATE_BILL_ID
		FROM
		CORPORATE_BILL
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysCorporationId">
			AND SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		<if-not-null varName="dispCutoffDate">
			AND CLIENT_CUTOFF_DATE = ${dispCutoffDate}
		</if-not-null>
		ORDER BY
		BILLDATA_CREATE_DATE DESC, SYS_CORPORATION_ID ASC, CORPORATE_BILL_NO DESC;
	</sql-template>

	<sql-template id="SEL_CLIENE_NAME">
	SELECT
		CLIENT_NM
	FROM
		MST_CLIENT
	WHERE
		DELETE_FLAG = '0'
	AND
		CLIENT_NO = ${clientNo}
	</sql-template>

	<sql-template id="SEL_SEARCH_CORPORATEBILL_ID_LIST">
		SELECT
			SYS_CORPORATE_BILL_ID
		FROM
			CORPORATE_BILL AS CORPBILL
		<if-not-empty varName="clientNo">
		LEFT JOIN
			MST_CLIENT AS MC
		ON
			CORPBILL.CLIENT_BILLING_NM = MC.CLIENT_NM
		</if-not-empty>
		WHERE
			CORPBILL.DELETE_FLAG = '0'
		<if-not-empty varName="billingMonthFrom">
		AND
			DEMAND_MONTH &gt;= ${billingMonthFrom}
		</if-not-empty>
		<if-not-empty varName="billingMonthTo">
		AND
			DEMAND_MONTH &lt;= ${billingMonthTo}
		</if-not-empty>
		<if-not-equals varName="sysCorporationId" value="0">
		AND
			CORPBILL.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		<if-not-empty varName="clientNo">
		AND
			MC.CLIENT_NO LIKE ${clientNo}
		</if-not-empty>
		<if-not-empty varName="clientNm">
		AND
			CLIENT_BILLING_NM LIKE ${clientNm}
		</if-not-empty>
		<if-not-empty varName="totalBillingAmountFrom">
		AND
			BILL_AMOUNT &gt;= ${totalBillingAmountFrom}
		</if-not-empty>
		<if-not-empty varName="totalBillingAmountTo">
		AND
			BILL_AMOUNT &lt;= ${totalBillingAmountTo}
		</if-not-empty>
		<if-equals value="1" varName="sortOrder">
		ORDER BY
			BILLDATA_CREATE_DATE DESC, CORPBILL.SYS_CORPORATION_ID ASC, CORPORATE_BILL_NO DESC;
		</if-equals>
		<if-equals value="2" varName="sortOrder">
		ORDER BY
			BILLDATA_CREATE_DATE ASC, CORPBILL.SYS_CORPORATION_ID ASC, CORPORATE_BILL_NO DESC;
		</if-equals>
	</sql-template>

	<sql-template id="SEL_SEARCH_BTOBILL">
		SELECT
		SYS_BTOB_BILL_ID
		,SYS_CORPORATION_ID
		,BTOB_BILL_NO
		,DEMAND_MONTH
		,DEMAND_MONTH_NO
		,BILLDATA_CREATE_DATE
		,CLIENT_CORPORATION_NM
		,CLIENT_TEL_NO
		,CLIENT_FAX_NO
		,PRE_MONTH_BILL_AMOUNT
		,BILL_AMOUNT
		,FREE_WORD
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CHARGE
		,CARRY_OVER_AMOUNT
		,SUM_PIECE_RATE
		,CONSUMPTION_TAX
		,SUM_CLAIM_PRICE
		FROM
		BTOB_BILL
		WHERE
		DELETE_FLAG = '0'
		AND SYS_BTOB_BILL_ID = ${sysBtobBillId}
	</sql-template>

	<sql-template id="SEL_SEARCH_BTOBILL_LIST">
		SELECT
		SYS_BTOB_BILL_ID
		,SYS_CORPORATION_ID
		,BTOB_BILL_NO
		,DEMAND_MONTH
		,DEMAND_MONTH_NO
		,BILLDATA_CREATE_DATE
		,CLIENT_CORPORATION_NM
		,CLIENT_TEL_NO
		,CLIENT_FAX_NO
		,PRE_MONTH_BILL_AMOUNT
		,BILL_AMOUNT
		,FREE_WORD
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CHARGE
		,CARRY_OVER_AMOUNT
		,SUM_PIECE_RATE
		,CONSUMPTION_TAX
		,SUM_CLAIM_PRICE
		FROM
		BTOB_BILL
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="demandMonth">
			AND DEMAND_MONTH = ${demandMonth}
		</if-not-empty>
		<if-not-equals value="0" varName="sysCorporationId">
			AND SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		ORDER BY
		DEMAND_MONTH_NO DESC
<!-- 		OFFSET 0 LIMIT 1; -->

	</sql-template>

	<sql-template id="SEL_SEARCH_CORPBILL">
	SELECT	DISTINCT
		CB.SYS_CORPORATE_BILL_ID
		,CB.SYS_CORPORATION_ID
		,CB.CLIENT_CORPORATION_NM
		,CB.CLIENT_BILLING_NM
		,CB.CLIENT_CUTOFF_DATE
		,CB.CLIENT_TEL_NO
		,CB.CLIENT_FAX_NO
		,CB.CORPORATE_BILL_NO
		,CB.DEMAND_MONTH
		,CB.DEMAND_MONTH_NO
		,CB.BILLDATA_CREATE_DATE
		,CB.PRE_MONTH_BILL_AMOUNT
		,CB.RECEIVE_DATE
		,CB.CARRY_OVER_AMOUNT
		,CB.BILL_AMOUNT
		,CB.CHARGE
		,CB.SUM_PIECE_RATE
		,CB.CONSUMPTION_TAX
		,CB.SUM_CLAIM_PRICE
		,CB.FREE_WORD
		,CB.RECEIVE_PRICE
		,CB.FREE_WORD2
		,CB.CHARGE2
		,CB.FREE_WORD3
		,CB.CHARGE3
		,CB.MEMO
		<!-- 口座名取得 -->
		,CB.SYS_ACCOUNT_ID
	FROM
		CORPORATE_BILL CB
		LEFT JOIN CORPORATE_BILL_ITEM CBI
		ON CB.SYS_CORPORATE_BILL_ID = CBI.SYS_CORPORATE_BILL_ID
		LEFT JOIN CORPORATE_SALES_SLIP CSS
		ON CBI.SLIP_NO = CSS.ORDER_NO
	WHERE
		CB.DELETE_FLAG = '0'
		AND CB.SYS_CORPORATE_BILL_ID = ${sysCorporateBillId}
	</sql-template>

	<sql-template id="CHECK_CORP_BILL">
		SELECT distinct
			CB.SYS_CORPORATE_BILL_ID
			,CSS.SYS_ACCOUNT_ID
			,CB.SYS_CORPORATION_ID
			,CB.CLIENT_CORPORATION_NM
			,CB.CLIENT_BILLING_NM
			,CB.CLIENT_TEL_NO
			,CB.CLIENT_FAX_NO
			,CB.CORPORATE_BILL_NO
			,CB.DEMAND_MONTH
			,CB.DEMAND_MONTH_NO
			,CB.BILLDATA_CREATE_DATE
			,CB.PRE_MONTH_BILL_AMOUNT
			,CB.RECEIVE_PRICE
			,CB.RECEIVE_DATE
			,CB.CARRY_OVER_AMOUNT
			,CB.BILL_AMOUNT
			,CB.CHARGE
			,CB.SUM_PIECE_RATE
			,CB.CONSUMPTION_TAX
			,CB.SUM_CLAIM_PRICE
		,FREE_WORD
		FROM
			CORPORATE_BILL CB
			LEFT JOIN CORPORATE_BILL_ITEM CBI
			ON CB.SYS_CORPORATE_BILL_ID = CBI.SYS_CORPORATE_BILL_ID
			LEFT JOIN CORPORATE_SALES_SLIP CSS
			ON CBI.SLIP_NO = CSS.ORDER_NO
		WHERE
			CB.DELETE_FLAG = '0'
			AND CB.CLIENT_CORPORATION_NM = ${clientCorporationNm}
			AND CB.CLIENT_BILLING_NM = ${clientBillingNm}
			AND CB.DEMAND_MONTH =  ${demandMonth}
			AND CB.SYS_ACCOUNT_ID = ${sysAccountId}
	</sql-template>


<!-- 	<sql-template id="SEL_LAST_PRICE_SEARCH_CORPBILL"> -->
<!-- 		SELECT DISTINCT -->
<!-- 			CB.BILL_AMOUNT -->
<!-- 		FROM -->
<!-- 			CORPORATE_BILL CB -->
<!-- 			LEFT JOIN CORPORATE_BILL_ITEM CBI -->
<!-- 			ON CB.SYS_CORPORATE_BILL_ID = CBI.SYS_CORPORATE_BILL_ID -->
<!-- 			LEFT JOIN CORPORATE_SALES_SLIP CSS -->
<!-- 			ON CBI.SLIP_NO = CSS.ORDER_NO -->
<!-- 		WHERE -->
<!-- 			CB.DELETE_FLAG = '0' -->
<!-- 			AND CB.CLIENT_BILLING_NM = ${clientBillingNm} -->
<!-- 			AND CB.DEMAND_MONTH = ${demandMonth} -->
<!-- 			AND CSS.SYS_ACCOUNT_ID = ${sysAccountId} -->
<!-- 	</sql-template> -->
	<sql-template id="SEL_LAST_PRICE_SEARCH_CORPBILL">
		SELECT DISTINCT
			CB.BILL_AMOUNT
		FROM
			CORPORATE_BILL CB
			LEFT JOIN CORPORATE_BILL_ITEM CBI
			ON CB.SYS_CORPORATE_BILL_ID = CBI.SYS_CORPORATE_BILL_ID
			LEFT JOIN CORPORATE_SALES_SLIP CSS
			ON CBI.SLIP_NO = CSS.ORDER_NO
		WHERE
			CB.DELETE_FLAG = '0'
			AND CB.CLIENT_BILLING_NM =  ${clientBillingNm}
			AND CB.DEMAND_MONTH =  ${demandMonth}
			AND CB.SYS_ACCOUNT_ID = ${sysAccountId}
	</sql-template>
	<sql-template id="UPD_BTOB_BILL">
		UPDATE BTOB_BILL SET
		FREE_WORD = ${freeWord}
		,RECEIVE_PRICE =
		${receivePrice}
		,RECEIVE_DATE = ${receiveDate}
		,CHARGE = ${charge}
		,BILL_AMOUNT = ${billAmount}
		,CARRY_OVER_AMOUNT = ${carryOverAmount}
		,PRE_MONTH_BILL_AMOUNT = ${preMonthBillAmount}
		<if-equals value="1" varName="deleteFlg">
			,DELETE_FLAG = ${deleteFlg}
		</if-equals>
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_BTOB_BILL_ID = ${sysBtobBillId}
	</sql-template>

	<sql-template id="UPD_CORP_BILL">
		UPDATE CORPORATE_BILL SET
			FREE_WORD = ${freeWord}
			,FREE_WORD2 = ${freeWord2}
			,FREE_WORD3 = ${freeWord3}
			,RECEIVE_PRICE = ${receivePrice}
			,CHARGE2 = ${charge2}
			,CHARGE3 = ${charge3}
			,RECEIVE_DATE = ${receiveDate}
			,CHARGE = ${charge}
			,BILL_AMOUNT = ${billAmount}
			,CARRY_OVER_AMOUNT = ${carryOverAmount}
			,PRE_MONTH_BILL_AMOUNT = ${preMonthBillAmount}
			<if-equals value="1" varName="deleteFlg">
				,DELETE_FLAG = ${deleteFlg}
			</if-equals>
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,MEMO = ${memo}
		WHERE
			SYS_CORPORATE_BILL_ID = ${sysCorporateBillId}
	</sql-template>

	<sql-template id="UPD_DEL_BTOB_BILL_ITEM">
		UPDATE BTOB_BILL_ITEM SET
		DELETE_FLAG =
		${deleteFlg}
		,UPDATE_DATE =
		current_timestamp
		,UPDATE_USER_ID =
		${updateUserId}
		WHERE
		SYS_BTOB_BILL_ID = ${sysBtobBillId}
	</sql-template>

	<sql-template id="UPD_DEL_CORP_BILL_ITEM">
		UPDATE CORPORATE_BILL_ITEM SET
			DELETE_FLAG = ${deleteFlg}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_CORPORATE_BILL_ID = ${sysCorporateBillId}
	</sql-template>

	<sql-template id="SEL_SEARCH_BTOBILL_ITEM_LIST">
		SELECT
		SYS_BTOB_BILL_ITEM_ID
		,SYS_BTOB_BILL_ID
		,CORPORATE_SALES_FLG
		,SALES_DATE
		,SLIP_NO
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,TAX_RATE
		FROM
		BTOB_BILL_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND SYS_BTOB_BILL_ID = ${sysBtobBillId}
		ORDER BY
		CORPORATE_SALES_FLG ASC, SALES_DATE ASC, SLIP_NO ASC, ITEM_CODE ASC;
	</sql-template>

	<sql-template id="SEL_SEARCH_CORPBILL_ITEM_LIST">
		SELECT
		CBI.SYS_CORPORATE_BILL_ITEM_ID
		,CBI.SYS_CORPORATE_BILL_ID
		,CBI.CORPORATE_SALES_FLG
		,CBI.SALES_DATE
		,CBI.SLIP_NO
		,CBI.SYS_ITEM_ID
		,CBI.ITEM_CODE
		,CBI.ITEM_NM
		,CBI.ORDER_NUM
		,CBI.PIECE_RATE
		,CSS.SYS_ACCOUNT_ID
		FROM
		CORPORATE_BILL_ITEM CBI INNER JOIN CORPORATE_SALES_SLIP CSS
		ON CBI.SLIP_NO = CSS.ORDER_NO
		WHERE
		CBI.DELETE_FLAG = '0'
		AND CBI.SYS_CORPORATE_BILL_ID = ${sysCorporateBillId}
		ORDER BY
		CSS.SYS_ACCOUNT_ID ASC, CBI.CORPORATE_SALES_FLG ASC, SALES_DATE ASC, CBI.SLIP_NO ASC, CBI.ITEM_CODE ASC;
	</sql-template>

	<sql-template id="SEL_SEARCH_BTOBILL_ITEM_ALL_LIST">
		SELECT
			BBI.SYS_BTOB_BILL_ITEM_ID
			,BBI.SYS_BTOB_BILL_ID
			,BBI.CORPORATE_SALES_FLG
			,BBI.SALES_DATE
			,BBI.SLIP_NO
			,BBI.SYS_ITEM_ID
			,BBI.ITEM_CODE
			,BBI.ITEM_NM
			,BBI.ORDER_NUM
			,BBI.PIECE_RATE
			,BB.SUM_CLAIM_PRICE
			,BB.SUM_PIECE_RATE
			,BB.consumption_tax
		FROM
			BTOB_BILL_ITEM BBI LEFT JOIN BTOB_BILL BB
		ON (BBI.SYS_BTOB_BILL_ID = BB.SYS_BTOB_BILL_ID)
		WHERE
			BBI.DELETE_FLAG = '0'
		AND BB.SYS_CORPORATION_ID = ${sysCorporationId}
		ORDER BY
			CORPORATE_SALES_FLG ASC, SALES_DATE ASC, SLIP_NO ASC, ITEM_CODE ASC;
	</sql-template>

	<sql-template id="SEL_SEARCH_DEMAND_MONTH_BTOBILL">
		SELECT
		SYS_BTOB_BILL_ID
		,SYS_CORPORATION_ID
		,BTOB_BILL_NO
		,DEMAND_MONTH
		,DEMAND_MONTH_NO
		,BILLDATA_CREATE_DATE
		,CLIENT_CORPORATION_NM
		,CLIENT_TEL_NO
		,CLIENT_FAX_NO
		,PRE_MONTH_BILL_AMOUNT
		,BILL_AMOUNT
		,FREE_WORD
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CHARGE
		,CARRY_OVER_AMOUNT
		,SUM_PIECE_RATE
		,CONSUMPTION_TAX
		,SUM_CLAIM_PRICE
		FROM
		BTOB_BILL
		WHERE
		DELETE_FLAG = '0'
		AND SYS_CORPORATION_ID = ${sysCorporationId}
		AND DEMAND_MONTH = ${demandMonth}
		ORDER BY
		DEMAND_MONTH_NO DESC
		OFFSET 0 LIMIT 1;
	</sql-template>

	<sql-template id="SEL_SEARCH_DEMAND_MONTH_CORPBILL">
		SELECT DISTINCT
		CB.SYS_CORPORATE_BILL_ID
		,CB.SYS_CORPORATION_ID
		,CB.CORPORATE_BILL_NO
		,CB.DEMAND_MONTH
		,CB.DEMAND_MONTH_NO
		,CB.BILLDATA_CREATE_DATE
		,CB.CLIENT_CORPORATION_NM
		,CB.CLIENT_BILLING_NM
		,CB.CLIENT_TEL_NO
		,CB.CLIENT_FAX_NO
		,CB.PRE_MONTH_BILL_AMOUNT
		,CB.BILL_AMOUNT
		,CB.FREE_WORD
		,CB.RECEIVE_PRICE
		,CB.FREE_WORD2
		,CB.CHARGE2
		,CB.FREE_WORD3
		,CB.CHARGE3
		,CB.RECEIVE_DATE
		,CB.CHARGE
		,CB.CARRY_OVER_AMOUNT
		,CB.SUM_PIECE_RATE
		,CB.CONSUMPTION_TAX
		,CB.SUM_CLAIM_PRICE
		,CSS.SYS_ACCOUNT_ID
		FROM
		CORPORATE_BILL CB
			LEFT JOIN CORPORATE_BILL_ITEM CBI
			ON CB.SYS_CORPORATE_BILL_ID = CBI.SYS_CORPORATE_BILL_ID
			LEFT JOIN CORPORATE_SALES_SLIP CSS
			ON CBI.SLIP_NO = CSS.ORDER_NO
		WHERE
		CB.DELETE_FLAG = '0'
		AND CB.SYS_CORPORATION_ID = ${sysCorporationId}
		AND CB.DEMAND_MONTH = ${demandMonth}
		<if-not-null varName="clientBillingNm">
			AND CB.CLIENT_BILLING_NM = ${clientBillingNm}
		</if-not-null>
		<if-not-null varName="sysAccountId">
			AND CSS.SYS_ACCOUNT_ID = ${sysAccountId}
		</if-not-null>
		ORDER BY
		CB.DEMAND_MONTH_NO DESC
		OFFSET 0 LIMIT 1;
	</sql-template>

	<sql-template id="SEL_SEARCH_SALE_COST_BTOBILL">
		SELECT
		ITEM.SYS_SALES_ITEM_ID
		,ITEM.SYS_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,CASE
		WHEN  ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE
		WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != ''  THEN
			ITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.ITEM_NM
		,ITEM.ORDER_NUM
		,ITEM.KIND_COST
		,ITEM.COST
		,ITEM.PROFIT
		,ITEM.POSTAGE
		,ITEM.UPDATED_FLAG
		,ORDER_NO
		,SHIPMENT_PLAN_DATE
		,CORPORATION_NM
		,COST_CHECK_FLAG
		,RETURN_FLG
		,TAX_RATE
		,exm.postage AS DOME_POSTAGE
		FROM
		SALES_ITEM AS ITEM
		INNER JOIN
		(SELECT
		SLIP.SYS_SALES_SLIP_ID
		,SLIP.ORDER_NO
		,SLIP.SHIPMENT_PLAN_DATE
		,CORPORATION.CORPORATION_NM
		,SLIP.RETURN_FLG
		,SLIP.TAX_RATE
		FROM
		SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		1 = 1
		AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
		AND SHIPMENT_PLAN_DATE LIKE ${shipmentDate}
		AND LEAVING_FLG = '1'
		) AS S_SLIP
		ON
		ITEM.SYS_SALES_SLIP_ID = S_SLIP.SYS_SALES_SLIP_ID
		LEFT JOIN
		(SELECT management_code, purchasing_cost, POSTAGE FROM exhibit_manage where delete_flag='0') as exm
		ON(ITEM.ITEM_CODE=exm.management_code)
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		AND
		ITEM.SYS_ITEM_ID != 5194
		AND
		ITEM.SYS_ITEM_ID != 5193
		AND
		ITEM.SYS_ITEM_ID != 5192
		AND
		ITEM.SYS_ITEM_ID != 11298
		AND
		ITEM.SYS_ITEM_ID != 15067
		<!-- BONCRE-3007 品番EDC-CANを法人間請求書に表示しない 法人間請求書作成時、売上商品 -->
		AND
		ITEM.ITEM_CODE != 'EDC-CAN'
		AND
		<!-- 品番 01011293006 -->
		ITEM.SYS_ITEM_ID !=  18758
		AND
		<!-- 品番 01011293005 -->
		ITEM.SYS_ITEM_ID !=  18757
		AND
		(ITEM.INVOICE_FLAG != 1 OR ITEM.INVOICE_FLAG IS NULL)
		AND
		ITEM.SYS_ITEM_ID != 88
		AND
		ITEM.SYS_ITEM_ID != 99
	</sql-template>

	<sql-template id="SEL_SEARCH_SALE_COST_CORPBILL">
		SELECT
		S_SLIP.SYS_ACCOUNT_ID
		,ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,CASE
		WHEN   ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE
		WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != ''  THEN
			ITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL OR M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.ITEM_NM
		,ITEM.ORDER_NUM
		,ITEM.KIND_COST
		,ITEM.COST
		,ITEM.SCHEDULED_LEAVING_DATE
		,ORDER_NO
		,CORPORATION_NM
		,COST_CHECK_FLAG
		,RETURN_FLG
		,CLIENT.CUTOFF_DATE
		,SALES_DATE
		,LEAVING_NUM
		,PIECE_RATE
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		INNER JOIN
			(SELECT
			SLIP.SYS_CORPORATE_SALES_SLIP_ID
			,SLIP.SYS_ACCOUNT_ID
			,SLIP.ORDER_NO
			,CORPORATION.CORPORATION_NM
			,SLIP.RETURN_FLG
			,SLIP.SYS_CLIENT_ID
			FROM
			CORPORATE_SALES_SLIP AS SLIP
			INNER JOIN
				(SELECT
				SYS_CORPORATION_ID
				,CORPORATION_NM
				FROM
				MST_CORPORATION
				WHERE
				1 = 1
				) AS CORPORATION
			ON
			CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
			WHERE
			1 = 1
			AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
			) AS S_SLIP
		ON
		ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
			(SELECT
			SYS_ITEM_ID
			,ITEM_CODE
			FROM
			MST_ITEM
			) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
			(SELECT
			SYS_CLIENT_ID,
			CUTOFF_DATE
			FROM
			MST_CLIENT
			WHERE
			DELETE_FLAG = '0'
			<!-- AND CLIENT_NM = ${clientNm} -->
			)AS CLIENT
		ON
		S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
	WHERE
		DELETE_FLAG = '0'
		AND LEAVING_NUM != 0
		AND
		ITEM.SYS_ITEM_ID != 5194
		AND
		ITEM.SYS_ITEM_ID != 5193
		AND
		ITEM.SYS_ITEM_ID != 5192
		AND
		ITEM.SYS_ITEM_ID != 11298
		AND SCHEDULED_LEAVING_DATE LIKE ${shipmentDate}
		AND
		CLIENT.CUTOFF_DATE = 0
		UNION ALL
		(SELECT
			S_SLIP.SYS_ACCOUNT_ID
			,ITEM.SYS_CORPORATE_SALES_ITEM_ID
			,ITEM.SYS_CORPORATE_SALES_SLIP_ID
			,ITEM.SYS_ITEM_ID
			,CASE
			WHEN   ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
				M_ITEM.ITEM_CODE
			WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != '' THEN
				ITEM.ITEM_CODE
			WHEN M_ITEM.ITEM_CODE IS NOT  NULL AND M_ITEM.ITEM_CODE != '' THEN
				M_ITEM.ITEM_CODE
			END AS ITEM_CODE
			,ITEM.ITEM_NM
			,ITEM.ORDER_NUM
			,ITEM.KIND_COST
			,ITEM.COST
			,ITEM.SCHEDULED_LEAVING_DATE
			,ORDER_NO
			,CORPORATION_NM
			,COST_CHECK_FLAG
			,RETURN_FLG
			,CLIENT.CUTOFF_DATE
			,SALES_DATE
			,LEAVING_NUM
			,PIECE_RATE
		FROM
			CORPORATE_SALES_ITEM AS ITEM
			INNER JOIN
				(SELECT
				SLIP.SYS_CORPORATE_SALES_SLIP_ID
				,SLIP.SYS_ACCOUNT_ID
				,SLIP.ORDER_NO
				,CORPORATION.CORPORATION_NM
				,SLIP.RETURN_FLG
				,SLIP.SYS_CLIENT_ID
				FROM
				CORPORATE_SALES_SLIP AS SLIP
				INNER JOIN
					(SELECT
					SYS_CORPORATION_ID
					,CORPORATION_NM
					FROM
					MST_CORPORATION
					WHERE
					1 = 1
					) AS CORPORATION
				ON
				CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
				WHERE
				1 = 1
				AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				) AS S_SLIP
			ON
			ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
			LEFT JOIN
				(SELECT
				SYS_ITEM_ID
				,ITEM_CODE
				FROM
				MST_ITEM
				) AS M_ITEM
			ON
			ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
				SYS_CLIENT_ID,
				CUTOFF_DATE
				FROM
				MST_CLIENT
				WHERE
				DELETE_FLAG = '0'
				)AS CLIENT
			ON
			S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		ITEM.SYS_ITEM_ID IN (5194,5193,5192,11298)
		AND ITEM.DELETE_FLAG = '0'
		AND
		ITEM.SYS_CORPORATE_SALES_SLIP_ID IN
			(SELECT
				ITEM.SYS_CORPORATE_SALES_SLIP_ID
			FROM
				CORPORATE_SALES_ITEM AS ITEM
				INNER JOIN
				(SELECT
					SLIP.SYS_CORPORATE_SALES_SLIP_ID
					,SLIP.ORDER_NO
					,CORPORATION.CORPORATION_NM
					,SLIP.RETURN_FLG
					,SLIP.SYS_CLIENT_ID
				FROM
					CORPORATE_SALES_SLIP AS SLIP
					INNER JOIN
					(SELECT
						SYS_CORPORATION_ID
						,CORPORATION_NM
					FROM
						MST_CORPORATION
					WHERE
						1 = 1
					) AS CORPORATION
					ON
					CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
				WHERE
					1 = 1
					AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
				) AS S_SLIP
			ON
			ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
			LEFT JOIN
				(SELECT
				SYS_ITEM_ID
				,ITEM_CODE
				FROM
				MST_ITEM
				) AS M_ITEM
			ON
			ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
				SYS_CLIENT_ID,
				CUTOFF_DATE
				FROM
				MST_CLIENT
				WHERE
				DELETE_FLAG = '0'
				)AS CLIENT
			ON
			S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
			WHERE
				DELETE_FLAG = '0'
				AND LEAVING_NUM != 0
				AND
				ITEM.SYS_ITEM_ID != 5194
				AND
				ITEM.SYS_ITEM_ID != 5193
				AND
				ITEM.SYS_ITEM_ID != 11298
				AND SCHEDULED_LEAVING_DATE LIKE ${shipmentDate}
				AND
				CLIENT.CUTOFF_DATE = 0
				)) ORDER BY SYS_ACCOUNT_ID

	</sql-template>

	<sql-template id="SEL_SEARCH_LAST_CORPBILL">
		SELECT DISTINCT
			COALESCE(CORP_SLIP.SYS_ACCOUNT_ID,(SELECT
								SYS_ACCOUNT_ID
							FROM
								MST_ACCOUNT
							WHERE
								SYS_CORPORATION_ID = ${sysCorporationId}
								AND DELETE_FLAG = '0'
							ORDER BY
								PRIOR_FLAG
							DESC LIMIT 1)) AS SYS_ACCOUNT_ID
			,BILL_SLIP.SYS_CORPORATION_ID
			,BILL_SLIP.SYS_CORPORATE_BILL_ID
			,BILL_SLIP.CLIENT_CUTOFF_DATE
			,BILL_SLIP.DEMAND_MONTH
			,BILL_SLIP.CLIENT_BILLING_NM
			,BILL_SLIP.CORPORATE_BILL_NO
			,BILL_SLIP.BILL_AMOUNT
			,BILL_SLIP.CHARGE
			,BILL_SLIP.SUM_PIECE_RATE
			,BILL_SLIP.CONSUMPTION_TAX
			,BILL_SLIP.SUM_CLAIM_PRICE
			,BILL_SLIP.FREE_WORD
			,MC.SYS_CLIENT_ID
		FROM
			CORPORATE_BILL BILL_SLIP
			LEFT JOIN CORPORATE_BILL_ITEM BILL_ITEM
			ON BILL_SLIP.SYS_CORPORATE_BILL_ID = BILL_ITEM.SYS_CORPORATE_BILL_ID
			LEFT JOIN CORPORATE_SALES_SLIP CORP_SLIP
			ON CORP_SLIP.ORDER_NO = BILL_ITEM.SLIP_NO
			LEFT JOIN MST_CLIENT MC
			ON MC.SYS_CORPORATION_ID = BILL_SLIP.SYS_CORPORATION_ID
			AND MC.CLIENT_NM = BILL_SLIP.CLIENT_BILLING_NM
		WHERE
			BILL_SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
			AND BILL_SLIP.CLIENT_CUTOFF_DATE = ${selectedCutoff}
			AND BILL_SLIP.DEMAND_MONTH = ${exportMonth}
			AND BILL_SLIP.DELETE_FLAG = '0'
			AND BILL_SLIP.BILL_AMOUNT != 0
	</sql-template>

	<sql-template id="SEL_SEARCH_SALE_COST_CORPBILL_CUTOFF">
		SELECT
		ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,S_SLIP.SYS_ACCOUNT_ID
		,CASE
		WHEN   ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE	
		WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != '' THEN
			ITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.ITEM_NM
		,ITEM.ORDER_NUM
		,ITEM.KIND_COST
		,ITEM.COST
		,ITEM.SCHEDULED_LEAVING_DATE
		,ORDER_NO
		,CORPORATION_NM
		,COST_CHECK_FLAG
		,RETURN_FLG
		,CLIENT.CUTOFF_DATE
		,SALES_DATE
		,LEAVING_NUM
		,PIECE_RATE
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		INNER JOIN
		(SELECT
		SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.ORDER_NO
		,CORPORATION.CORPORATION_NM
		,SLIP.RETURN_FLG
		,SLIP.SYS_ACCOUNT_ID
		,SLIP.SYS_CLIENT_ID
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		1 = 1
		AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
		) AS S_SLIP
		ON
		ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_CLIENT_ID,
		CUTOFF_DATE
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		)AS CLIENT
		ON
		S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		DELETE_FLAG = '0'
		AND LEAVING_NUM != 0
		AND
		ITEM.SYS_ITEM_ID != 5194
		AND
		ITEM.SYS_ITEM_ID != 5193
		AND
		ITEM.SYS_ITEM_ID != 5192
		AND
		ITEM.SYS_ITEM_ID != 11298
		AND to_date(SCHEDULED_LEAVING_DATE, 'yyyy-mm-dd') BETWEEN
		to_date(${shipmentDateFrom}, 'yyyy-mm-dd')
		AND to_date(${shipmentDateTo}, 'yyyy-mm-dd')
		<if-not-null varName="cutoffDateCd">
			AND
			CLIENT.CUTOFF_DATE =
			${cutoffDateCd}
		</if-not-null>
		UNION ALL
		(SELECT
		ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,S_SLIP.SYS_ACCOUNT_ID
		,CASE
		WHEN  ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE  = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE
		WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != ''  THEN
			ITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.ITEM_NM
		,ITEM.ORDER_NUM
		,ITEM.KIND_COST
		,ITEM.COST
		,ITEM.SCHEDULED_LEAVING_DATE
		,ORDER_NO
		,CORPORATION_NM
		,COST_CHECK_FLAG
		,RETURN_FLG
		,CLIENT.CUTOFF_DATE
		,SALES_DATE
		,LEAVING_NUM
		,PIECE_RATE
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		INNER JOIN
		(SELECT
		SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.ORDER_NO
		,CORPORATION.CORPORATION_NM
		,SLIP.RETURN_FLG
		,SLIP.SYS_ACCOUNT_ID
		,SLIP.SYS_CLIENT_ID
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		1 = 1
		AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
		) AS S_SLIP
		ON
		ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_CLIENT_ID,
		CUTOFF_DATE
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		)AS CLIENT
		ON
		S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		ITEM.SYS_ITEM_ID IN (5194,5193,5192,11298)
		AND ITEM.DELETE_FLAG = '0'
		AND
		ITEM.SYS_CORPORATE_SALES_SLIP_ID IN (SELECT
		ITEM.SYS_CORPORATE_SALES_SLIP_ID
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		INNER JOIN
		(SELECT
		SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.ORDER_NO
		,CORPORATION.CORPORATION_NM
		,SLIP.RETURN_FLG
		,SLIP.SYS_CLIENT_ID
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		1 = 1
		AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
		) AS S_SLIP
		ON
		ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		LEFT JOIN
		(SELECT
		SYS_CLIENT_ID,
		CUTOFF_DATE
		FROM
		MST_CLIENT
		WHERE
		DELETE_FLAG = '0'
		)AS CLIENT
		ON
		S_SLIP.SYS_CLIENT_ID = CLIENT.SYS_CLIENT_ID
		WHERE
		DELETE_FLAG = '0'
		AND LEAVING_NUM != 0
		AND
		to_date(SCHEDULED_LEAVING_DATE, 'yyyy-mm-dd') BETWEEN to_date(${shipmentDateFrom}, 'yyyy-mm-dd')
		AND to_date(${shipmentDateTo}, 'yyyy-mm-dd')
		<if-not-null varName="cutoffDateCd">
			AND
			CLIENT.CUTOFF_DATE =
			${cutoffDateCd}
		</if-not-null>
		))

	</sql-template>

	<sql-template id="INS_BTOB_BILL_ITEM">
		INSERT INTO BTOB_BILL_ITEM (
		SYS_BTOB_BILL_ITEM_ID
		,SYS_BTOB_BILL_ID
		,CORPORATE_SALES_FLG
		,SALES_DATE
		,SLIP_NO
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,TAX_RATE)
		VALUES (
		${sysBtobBillItemId}
		,${sysBtobBillId}
		,${corporateSalesFlg}
		,${salesDate}
		,${slipNo}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${taxRate})
	</sql-template>

	<sql-template id="INS_CORP_BILL_ITEM">
		INSERT INTO CORPORATE_BILL_ITEM (
		SYS_CORPORATE_BILL_ITEM_ID
		,SYS_CORPORATE_BILL_ID
		,CORPORATE_SALES_FLG
		,SALES_DATE
		,SLIP_NO
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES (
		${sysCorporateBillItemId}
		,${sysCorporateBillId}
		,${corporateSalesFlg}
		,${salesDate}
		,${orderNo}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SEL_SEARCH_MAX_DEMAND_MONTH_NO">
		SELECT
		MAX(DEMAND_MONTH_NO) AS DEMAND_MONTH_NO
		FROM
		BTOB_BILL
		WHERE
		SYS_CORPORATION_ID = ${sysCorporationId}
		AND DEMAND_MONTH = ${demandMonth}
	</sql-template>

	<sql-template id="SEL_SEARCH_CORP_MAX_DEMAND_MONTH_NO">
		SELECT
		MAX(DEMAND_MONTH_NO) AS DEMAND_MONTH_NO
		FROM
		CORPORATE_BILL
		WHERE
		SYS_CORPORATION_ID = ${sysCorporationId}
		AND DEMAND_MONTH = ${demandMonth}
	</sql-template>

	<sql-template id="SEL_SEARCH_CALC_SUM_PIECE_RATE">
		SELECT
		SUM(ITEM.PIECE_RATE) AS SUM_PIECE_RATE
		FROM
		(SELECT
		ORDER_NUM * PIECE_RATE AS PIECE_RATE
		FROM
		BTOB_BILL_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND SYS_BTOB_BILL_ID = ${sysBtobBillId}) AS ITEM
	</sql-template>


	<sql-template id="SEL_SEARCH_CALC_SUM_PIECE_RATE_OF_TAX">
		SELECT
			SUM(ITEM.PIECE_RATE) AS SUM_PIECE_RATE
		FROM
		(SELECT
			ORDER_NUM * PIECE_RATE AS PIECE_RATE
		FROM
			BTOB_BILL_ITEM
		WHERE
			DELETE_FLAG = '0'
			AND SYS_BTOB_BILL_ID = ${sysBtobBillId}
			AND TAX_RATE = ${taxRate}) AS ITEM
	</sql-template>

	<sql-template id="SEL_SEARCH_CORP_CALC_SUM_PIECE_RATE">
		SELECT
		SUM(ITEM.PIECE_RATE) AS SUM_PIECE_RATE
		FROM
		(SELECT
		ORDER_NUM * PIECE_RATE AS PIECE_RATE
		FROM
		CORPORATE_BILL_ITEM
		WHERE
		DELETE_FLAG = '0'
		AND SYS_CORPORATE_BILL_ID = ${sysCorporateBillId}) AS ITEM
	</sql-template>

	<sql-template id="SEL_SEARCH_SYS_PAYMENT_MANAGE_ID_LIST">
		SELECT
			SYS_PAYMENT_MANAGEMENT_ID
		FROM
			PAYMENT_MANAGEMENT
		LEFT JOIN
				MST_CLIENT
			ON
				PAYMENT_MANAGEMENT.SYS_CLIENT_ID = MST_CLIENT.SYS_CLIENT_ID
		WHERE
			PAYMENT_MANAGEMENT.DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysCorporationId">
		AND
			PAYMENT_MANAGEMENT.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		<if-not-empty varName="demandMonthFrom">
		AND
			DEMAND_MONTH &gt;= ${demandMonthFrom}
		</if-not-empty>
		<if-not-empty varName="demandMonthTo">
		AND
			DEMAND_MONTH &lt;= ${demandMonthTo}
		</if-not-empty>
		<if-not-empty varName="clientNo">
		AND
			CLIENT_NO ILIKE ${clientNo}
		</if-not-empty>
		<if-not-empty varName="clientNm">
		AND
			CLIENT_NM ILIKE ${clientNm}
		</if-not-empty>
		<if-not-empty varName="billAmountFrom">
		AND
			BILL_AMOUNT &gt;= ${billAmountFrom}
		</if-not-empty>
		<if-not-empty varName="billAmountTo">
		AND
			BILL_AMOUNT &lt;= ${billAmountTo}
		</if-not-empty>
		<if-not-empty varName="cutoffDate">
		AND
			CUTOFF_DATE = ${cutoffDate}
		</if-not-empty>
		<if-equals value="sortOrder" varName="2">
		ORDER BY
			CREATE_DATE DESC, SYS_CORPORATION_ID ASC
		</if-equals>
		<if-equals value="sortOrder" varName="1">
		ORDER BY
			CREATE_DATE ASC, SYS_CORPORATION_ID ASC
		</if-equals>
	</sql-template>

	<sql-template id="SEL_PAYMENT_MANAGEMENT_INFO">
		SELECT
			SYS_PAYMENT_MANAGEMENT_ID
			,MC.SYS_CORPORATION_ID
			,MC.SYS_CLIENT_ID
			,PM.SYS_ACCOUNT_ID
			,RECEIVE_PRICE
			,RECEIVE_DATE
			,DEMAND_MONTH
			,BILL_AMOUNT
			,CARRY_OVER_AMOUNT
			,FREE_WORD
			,CHARGE
			,FREE_WORD2
			,CHARGE2
			,FREE_WORD3
			,CHARGE3
			,MC.CLIENT_NO
			,MC.CLIENT_NM
			,MA.ACCOUNT_NM
		FROM
			PAYMENT_MANAGEMENT AS PM
		LEFT JOIN
			(
				SELECT
					SYS_CORPORATION_ID
					,SYS_CLIENT_ID
					,CLIENT_NM
					,CLIENT_NO
				FROM
					MST_CLIENT
			) AS MC
		ON
			PM.SYS_CLIENT_ID = MC.SYS_CLIENT_ID
		LEFT JOIN
			(
				SELECT
					SYS_ACCOUNT_ID
					,ACCOUNT_NM
				FROM
					MST_ACCOUNT
			) AS MA
		ON
			PM.SYS_ACCOUNT_ID = MA.SYS_ACCOUNT_ID
		WHERE
			DELETE_FLAG = '0'
		<if-not-empty varName="sysCorporationId">
		AND
			MC.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-empty>
		<if-not-empty varName="sysClientId">
		AND
			MC.SYS_CLIENT_ID = ${sysClientId}
		</if-not-empty>
		<if-not-empty varName="sysAccountId">
		AND
			PM.SYS_ACCOUNT_ID = ${sysAccountId}
		</if-not-empty>
		<if-not-empty varName="demandMonth">
		AND
			DEMAND_MONTH = ${demandMonth}
		</if-not-empty>
		<if-not-empty varName="sysPaymentManagementId">
		AND
			SYS_PAYMENT_MANAGEMENT_ID = ${sysPaymentManagementId}
		</if-not-empty>
	</sql-template>

	<sql-template id="INS_PAYMENT_MANAGEMENT">
		INSERT INTO
			PAYMENT_MANAGEMENT (
				SYS_PAYMENT_MANAGEMENT_ID
				,SYS_CORPORATION_ID
				,SYS_CLIENT_ID
				,SYS_ACCOUNT_ID
				,RECEIVE_PRICE
				,DEMAND_MONTH
				,BILL_AMOUNT
				,CARRY_OVER_AMOUNT
				,FREE_WORD
				,CHARGE
				,FREE_WORD2
				,CHARGE2
				,FREE_WORD3
				,CHARGE3
				,DELETE_FLAG
				,CREATE_DATE
				,CREATE_USER_ID
				,UPDATE_DATE
				,UPDATE_USER_ID
			) VALUES (
				${sysPaymentManagementId}
				,${sysCorporationId}
				,${sysClientId}
				,${sysAccountId}
				,${receivePrice}
				,${demandMonth}
				,${billAmount}
				,${carryOverAmount}
				,${freeWord}
				,${charge}
				,${freeWord2}
				,${charge2}
				,${freeWord3}
				,${charge3}
				,'0'
				,current_timestamp
				,${createUserId}
				,current_timestamp
				,${updateUserId}
			)
	</sql-template>

	<sql-template id="UPD_PAYMENT_MANAGEMENT">
		UPDATE
			PAYMENT_MANAGEMENT
		SET
			SYS_CLIENT_ID = ${sysClientId}
			,RECEIVE_PRICE = ${receivePrice}
			,RECEIVE_DATE = ${receiveDate}
			,BILL_AMOUNT = ${billAmount}
			,CARRY_OVER_AMOUNT = ${carryOverAmount}
			,FREE_WORD = ${freeWord}
			,CHARGE = ${charge}
			,FREE_WORD2 = ${freeWord2}
			,CHARGE2 = ${charge2}
			,FREE_WORD3 = ${freeWord3}
			,CHARGE3 = ${charge3}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_PAYMENT_MANAGEMENT_ID = ${sysPaymentManagementId}
	</sql-template>

	<sql-template id="SEL_SEQUENCE_OF_SYS_PAYMENT_MANAGEMENT_ID">
	SELECT
		COALESCE(MAX(SYS_PAYMENT_MANAGEMENT_ID),0)
	FROM
		PAYMENT_MANAGEMENT
	</sql-template>


	<sql-template id="INS_BTOB_BILL">
		INSERT INTO BTOB_BILL (
		SYS_BTOB_BILL_ID
		,SYS_CORPORATION_ID
		,BTOB_BILL_NO
		,DEMAND_MONTH
		,DEMAND_MONTH_NO
		,BILLDATA_CREATE_DATE
		,CLIENT_CORPORATION_NM
		,CLIENT_TEL_NO
		,CLIENT_FAX_NO
		,PRE_MONTH_BILL_AMOUNT
		,BILL_AMOUNT
		,FREE_WORD
		,RECEIVE_PRICE
		,CHARGE
		,CARRY_OVER_AMOUNT
		,SUM_PIECE_RATE
		,CONSUMPTION_TAX
		,SUM_CLAIM_PRICE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES (
		${sysBtobBillId}
		,${sysCorporationId}
		,${btobBillNo}
		,${demandMonth}
		,${demandMonthNo}
		,${billdataCreateDate}
		,${clientCorporationNm}
		,${clientTelNo}
		,${clientFaxNo}
		,${preMonthBillAmount}
		,${billAmount}
		,${freeWord}
		,0
		,0
		,${carryOverAmount}
		,${sumPieceRate}
		,${consumptionTax}
		,${sumClaimPrice}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="INS_CORP_BILL">
		INSERT INTO CORPORATE_BILL (
		SYS_CORPORATE_BILL_ID
		,SYS_CORPORATION_ID
		,CLIENT_CORPORATION_NM
		,CLIENT_BILLING_NM
		,CLIENT_CUTOFF_DATE
		,CLIENT_TEL_NO
		,CLIENT_FAX_NO
		,CORPORATE_BILL_NO
		,DEMAND_MONTH
		,DEMAND_MONTH_NO
		,BILLDATA_CREATE_DATE
		,PRE_MONTH_BILL_AMOUNT
		,RECEIVE_PRICE
		,RECEIVE_DATE
		,CARRY_OVER_AMOUNT
		,BILL_AMOUNT
		,CHARGE
		,CHARGE2
		,CHARGE3
		,SUM_PIECE_RATE
		,CONSUMPTION_TAX
		,SUM_CLAIM_PRICE
		,FREE_WORD
		,FREE_WORD2
		,FREE_WORD3
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,MEMO
		,SYS_ACCOUNT_ID)
		VALUES (
		${sysCorporateBillId}
		,${sysCorporationId}
		,${clientCorporationNm}
		,${clientBillingNm}
		,${clientCutoffDate}
		,${clientTelNo}
		,${clientFaxNo}
		,${corporateBillNo}
		,${demandMonth}
		,${demandMonthNo}
		,${billdataCreateDate}
		,${preMonthBillAmount}
<!-- 		,0 -->
		,${receivePrice}
		,${receiveDate}
		,${carryOverAmount}
		,${billAmount}
		,${charge}
		,${charge2}
		,${charge3}
		,${sumPieceRate}
		,${consumptionTax}
		,${sumClaimPrice}
		,${freeWord}
		,${freeWord2}
		,${freeWord3}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,''
		,${sysAccountId})
	</sql-template>

	<sql-template id="INS_SALES_ITEM_KIND">
		INSERT INTO SALES_ITEM (
		SYS_SALES_ITEM_ID
		,SYS_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,KIND_COST
		,COST_CHECK_FLAG
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,RSL_LEAVE_FLAG)
		VALUES (
		${sysSalesItemId}
		,${sysSalesSlipId}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,${cost}
		,${kindCost}
		,'1'
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,${rslLeaveFlag})
	</sql-template>

	<sql-template id="INS_CORP_SALES_ITEM_KIND">
		INSERT INTO CORPORATE_SALES_ITEM(
		SYS_CORPORATE_SALES_ITEM_ID
		,SYS_CORPORATE_SALES_SLIP_ID
		,SYS_ITEM_ID
		,ITEM_CODE
		,ITEM_NM
		,ORDER_NUM
		,PIECE_RATE
		,COST
		,KIND_COST
		,SCHEDULED_LEAVING_DATE
		,PICKING_LIST_FLG
		,LEAVING_DATE
		,LEAVING_NUM
		,SALES_DATE
		,COST_CHECK_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		) VALUES (
		${sysCorporateSalesItemId}
		,${sysCorporateSalesSlipId}
		,${sysItemId}
		,${itemCode}
		,${itemNm}
		,${orderNum}
		,${pieceRate}
		,${cost}
		,${kindCost}
		,${scheduledLeavingDate}
		,${pickingListFlg}
		,${leavingDate}
		,${leavingNum}
		,${salesDate}
		,'1'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		)
	</sql-template>

	<!-- 本番障害対応20160203 -->
	<sql-template id="SEL_ITEM_COST_CSV">
		SELECT
		M_CORPORATION.SYS_CORPORATION_ID
		,M_CORPORATION.CORPORATION_NM
		,COALESCE(COST.SYS_ITEM_COST_ID, 0)AS SYS_ITEM_COST_ID
		,COALESCE(COST.COST, 0)AS COST
		,COST.SYS_ITEM_ID
		FROM
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		DELETE_FLAG = '0')AS M_CORPORATION
		INNER JOIN
		(SELECT
		COST
		,SYS_ITEM_ID
		,SYS_CORPORATION_ID
		,SYS_ITEM_COST_ID
		FROM
		ITEM_COST
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysItemId">
			AND
			SYS_ITEM_ID = ${sysItemId}
		</if-not-equals>
		)AS COST
		ON
		M_CORPORATION.SYS_CORPORATION_ID = COST.SYS_CORPORATION_ID
		<if-not-null varName="sysCorporationId">
			AND
			COST.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-null>
		ORDER BY
		M_CORPORATION.SYS_CORPORATION_ID
	</sql-template>
	<!-- 本番障害対応20160203 -->

	<!-- 法人間請求書対応 -->
	<sql-template id="UPD_SALE_COST_CHECK_FLAG">
		UPDATE SALES_ITEM SET
		COST_CHECK_FLAG = ${costCheckFlag}
		WHERE
		SYS_SALES_SLIP_ID = ${sysSaleSlipId}
	</sql-template>

	<sql-template id="UPD_CORP_SALE_COST_CHECK_FLAG">
		UPDATE CORPORATE_SALES_ITEM SET
		COST_CHECK_FLAG = ${costCheckFlag}
		WHERE
		SYS_CORPORATE_SALES_SLIP_ID = ${sysSaleSlipId}
	</sql-template>
	<!-- 法人間請求書対応 -->

	<!-- 取引先番号カウント -->
	<sql-template id="CNT_SYS_CLIENT_NO">
		SELECT
		COUNT(CLIENT_NO)
		FROM
		MST_CLIENT
		WHERE
		CLIENT_NO = ${clientNo}
		<if-not-null varName="sysCorporationId">
			AND
			SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-null>
		AND DELETE_FLAG = '0'
	</sql-template>
	<!-- 取引先番号カウント -->

	<!-- 納入先電話番号カウント -->
	<sql-template id="CNT_MST_DELIVERY_TEL">
		SELECT
		COUNT(TEL)
		FROM
		MST_DELIVERY
		WHERE
		TEL = ${telNo}
		AND SYS_CLIENT_ID = ${sysClientId}
		AND DELETE_FLAG = '0'
		AND TEL != ''
	</sql-template>
	<!-- 納入先電話番号カウント -->

	<!-- 業販請求書出力時の備考欄取得 -->
	<sql-template id="CORPBILL_REMARKS">
		SELECT
		BILLING_REMARKS
		FROM
		CORPORATE_SALES_SLIP
		WHERE
		ORDER_NO = ${slipNo}
		AND DELETE_FLAG = '0'
	</sql-template>
	<!-- 業販請求書出力時の備考欄取得 -->

	<!-- 業販請求書出力時の消費税率取得 -->
	<sql-template id="CORPSLIP_TAXRATE">
		SELECT
			TAX_RATE
		FROM
			CORPORATE_SALES_SLIP
		WHERE
			ORDER_NO = ${slipNo}
		AND DELETE_FLAG = '0'
	</sql-template>
	<!-- 業販請求書出力時の備考欄取得 -->





	<sql-template id="SEL_SEARCH_CORP_SALE_COST_BTOBILL">
		SELECT
		ITEM.SYS_CORPORATE_SALES_ITEM_ID
		,ITEM.SYS_CORPORATE_SALES_SLIP_ID
		,ITEM.SYS_ITEM_ID
		,CASE
		WHEN  ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE  = '00' AND M_ITEM.ITEM_CODE IS NOT NULL AND  M_ITEM.ITEM_CODE != ''  THEN
			M_ITEM.ITEM_CODE
		WHEN ITEM.ITEM_CODE IS NOT NULL AND ITEM.ITEM_CODE != '' THEN
			ITEM.ITEM_CODE
		WHEN M_ITEM.ITEM_CODE IS NOT NULL AND M_ITEM.ITEM_CODE != '' THEN
			M_ITEM.ITEM_CODE
		END AS ITEM_CODE
		,ITEM.ITEM_NM
		,ITEM.ORDER_NUM
		,ITEM.KIND_COST
		,ITEM.COST
		,ITEM.PROFIT
		,ITEM.POSTAGE
		,ITEM.UPDATED_FLAG
		,ITEM.SCHEDULED_LEAVING_DATE
		,ORDER_NO
		,CORPORATION_NM
		,COST_CHECK_FLAG
		,RETURN_FLG
		,TAX_RATE
		,exm.postage AS DOME_POSTAGE
		FROM
		CORPORATE_SALES_ITEM AS ITEM
		INNER JOIN
		(SELECT
		SLIP.SYS_CORPORATE_SALES_SLIP_ID
		,SLIP.ORDER_NO
		,CORPORATION.CORPORATION_NM
		,SLIP.RETURN_FLG
		,SLIP.TAX_RATE
		FROM
		CORPORATE_SALES_SLIP AS SLIP
		INNER JOIN
		(SELECT
		SYS_CORPORATION_ID
		,CORPORATION_NM
		FROM
		MST_CORPORATION
		WHERE
		1 = 1
		) AS CORPORATION
		ON
		CORPORATION.SYS_CORPORATION_ID = SLIP.SYS_CORPORATION_ID
		WHERE
		1 = 1
		AND SLIP.SYS_CORPORATION_ID = ${sysCorporationId}
		) AS S_SLIP
		ON
		ITEM.SYS_CORPORATE_SALES_SLIP_ID = S_SLIP.SYS_CORPORATE_SALES_SLIP_ID
		LEFT JOIN
		(SELECT management_code, purchasing_cost, POSTAGE FROM exhibit_manage where delete_flag='0') as exm
		ON(ITEM.item_code=exm.management_code)
		LEFT JOIN
		(SELECT
		SYS_ITEM_ID
		,ITEM_CODE
		FROM
		MST_ITEM
		) AS M_ITEM
		ON
		ITEM.SYS_ITEM_ID = M_ITEM.SYS_ITEM_ID
		WHERE
		DELETE_FLAG = '0'
		AND SCHEDULED_LEAVING_DATE LIKE ${shipmentDate}
		AND LEAVING_NUM != 0
		AND
		ITEM.SYS_ITEM_ID != 5194
		AND
		ITEM.SYS_ITEM_ID != 5193
		AND
		ITEM.SYS_ITEM_ID != 5192
		AND
		ITEM.SYS_ITEM_ID != 11298
		AND
		ITEM.SYS_ITEM_ID != 15067
		<!-- BONCRE-3007 品番EDC-CANを法人間請求書に表示しない 法人間請求書作成時、業販商品 -->
		AND
		ITEM.ITEM_CODE != 'EDC-CAN'
		AND
		<!-- 品番 01011293006 -->
		ITEM.SYS_ITEM_ID != 18758
		AND
		<!-- 品番 01011293005 -->
		ITEM.SYS_ITEM_ID != 18757
		AND
		(ITEM.INVOICE_FLAG != 1 OR ITEM.INVOICE_FLAG IS NULL)
		AND
		ITEM.SYS_ITEM_ID != 88
		AND
		ITEM.SYS_ITEM_ID != 99
		<!---->
	</sql-template>
	<!-- 新規倉庫登録時、全商品検索 -->
	<sql-template id="SEARCH_SYS_ITEM_ID">
		SELECT
		DISTINCT
		SYS_ITEM_ID,
		count(PRIORITY) AS WAREHOUSE_COUNT
		FROM
		WAREHOUSE_STOCK
		WHERE
		DELETE_FLAG = '0'
		GROUP BY
		SYS_ITEM_ID
	</sql-template>

	<sql-template id="SELECT_DL_STOCK_INFO">
		SELECT
		WS.SYS_ITEM_ID
		,WS.SYS_WAREHOUSE_ID
		,WS.STOCK_NUM
		,WS.LOCATION_NO
		,WS.PRIORITY
		,MW.WAREHOUSE_NM
		,MI.ITEM_CODE
		FROM
		WAREHOUSE_STOCK WS
		INNER JOIN MST_WAREHOUSE MW
		ON (WS.SYS_WAREHOUSE_ID = MW.SYS_WAREHOUSE_ID)
		INNER JOIN MST_ITEM MI
		ON (WS.SYS_ITEM_ID = MI.SYS_ITEM_ID)
		WHERE
		WS.SYS_ITEM_ID IN (${sysItemIdList})
		AND WS.DELETE_FLAG = '0'
		ORDER BY
		MI.ITEM_CODE
		,PRIORITY
	</sql-template>

	<sql-template id="SEARCH_ITEM_COST_PRICE">
		SELECT
		MI.ITEM_CODE AS ITEM_CODE
		,MI.SYS_ITEM_ID AS SYS_ITEM_ID
		<!-- 原価情報 -->
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '1' AND DELETE_FLAG = '0') AS ITEM_COST_1
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '2' AND DELETE_FLAG = '0') AS ITEM_COST_2
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '3' AND DELETE_FLAG = '0') AS ITEM_COST_3
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '4' AND DELETE_FLAG = '0') AS ITEM_COST_4
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '5' AND DELETE_FLAG = '0') AS ITEM_COST_5
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '6' AND DELETE_FLAG = '0') AS ITEM_COST_6
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '7' AND DELETE_FLAG = '0') AS ITEM_COST_7
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '8' AND DELETE_FLAG = '0') AS ITEM_COST_8
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '10' AND DELETE_FLAG = '0') AS ITEM_COST_10
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '11' AND DELETE_FLAG = '0') AS ITEM_COST_11
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '12' AND DELETE_FLAG = '0') AS ITEM_COST_12
		,(SELECT COST FROM ITEM_COST WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '99' AND DELETE_FLAG = '0') AS KIND_COST

		<!-- 売価情報 -->
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '1' AND DELETE_FLAG = '0') AS ITEM_PRICE_1
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '2' AND DELETE_FLAG = '0') AS ITEM_PRICE_2
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '3' AND DELETE_FLAG = '0') AS ITEM_PRICE_3
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '4' AND DELETE_FLAG = '0') AS ITEM_PRICE_4
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '5' AND DELETE_FLAG = '0') AS ITEM_PRICE_5
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '6' AND DELETE_FLAG = '0') AS ITEM_PRICE_6
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '7' AND DELETE_FLAG = '0') AS ITEM_PRICE_7
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '8' AND DELETE_FLAG = '0') AS ITEM_PRICE_8
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '10' AND DELETE_FLAG = '0') AS ITEM_PRICE_10
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '11' AND DELETE_FLAG = '0') AS ITEM_PRICE_11
		,(SELECT PRICE FROM ITEM_PRICE WHERE SYS_ITEM_ID = MI.SYS_ITEM_ID AND
		SYS_CORPORATION_ID = '12' AND DELETE_FLAG = '0') AS ITEM_PRICE_12

		FROM
		MST_ITEM MI
		WHERE
		MI.SYS_ITEM_ID IN (${sysItemIdList})
		AND MI.DELETE_FLAG = '0'

		ORDER BY
		MI.ITEM_CODE
	</sql-template>

	<sql-template id="SEL_ITEM_COST_DL">
		SELECT
		SYS_CORPORATION_ID AS SYS_CORPORATION_ID
		,COST AS ITEM_COST
		,MST_ITEM.SYS_ITEM_ID AS SYS_ITEM_ID
		,ITEM_CODE AS ITEM_CODE
		FROM
		ITEM_COST
		,MST_ITEM
		WHERE
		ITEM_COST.SYS_ITEM_ID = ${sysItemId}
		AND MST_ITEM.SYS_ITEM_ID = ITEM_COST.SYS_ITEM_ID
		AND ITEM_COST.DELETE_FLAG = '0'
		AND SYS_CORPORATION_ID != '9'
		ORDER BY SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="SEL_ITEM_PRICE_DL">
		SELECT
		SYS_CORPORATION_ID AS SYS_CORPORATION_ID
		,PRICE AS ITEM_PRICE
		,MST_ITEM.SYS_ITEM_ID AS SYS_ITEM_ID
		,ITEM_CODE AS ITEM_CODE
		FROM
		ITEM_PRICE
		,MST_ITEM
		WHERE
		ITEM_PRICE.SYS_ITEM_ID = ${sysItemId}
		AND MST_ITEM.SYS_ITEM_ID = ITEM_PRICE.SYS_ITEM_ID
		AND ITEM_PRICE.DELETE_FLAG = '0'
		AND SYS_CORPORATION_ID != '9'
		ORDER BY SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="UPDATE_COST_INFO">
		UPDATE
		ITEM_COST
		SET
		COST = ${itemCost}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND SYS_CORPORATION_ID = ${sysCorporationId}
		AND DELETE_FLAG = ${deleteFlag}

	</sql-template>

	<sql-template id="UPDATE_PRICE_INFO">
		UPDATE
		ITEM_PRICE
		SET
		PRICE = ${itemPrice}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_ITEM_ID = ${sysItemId}
		AND SYS_CORPORATION_ID = ${sysCorporationId}
		AND DELETE_FLAG = ${deleteFlag}

	</sql-template>

	<!-- ============================================仕入管理============================================== -->
	<!-- ============================================通貨マスタ============================================== -->
	<sql-template id="SEL_CURRENCYLEDGER">
		SELECT
		CURRENCY_ID
		,CURRENCY_TYPE
		,CURRENCY_NM
		,RATE
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		FROM
		CURRENCY_LEDGER
		WHERE
		DELETE_FLAG = '0'
		ORDER BY
		CURRENCY_ID
	</sql-template>

	<sql-template id="SEL_CURRENCY_RATE">
		SELECT
		RATE
		FROM
		CURRENCY_LEDGER
		WHERE
		DELETE_FLAG = '0'
		AND CURRENCY_ID = ${currencyId}
	</sql-template>

	<sql-template id="UP_CURRENCYLEDGER">
		UPDATE
		CURRENCY_LEDGER
		SET
		CURRENCY_TYPE = ${currencyType}
		,CURRENCY_NM = ${currencyNm}
		,RATE = ${rate}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		CURRENCY_ID = ${currencyId}
	</sql-template>

	<sql-template id="UP_DEL_CURRENCYLEDGER">
		UPDATE
		CURRENCY_LEDGER
		SET
		DELETE_FLAG ='1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		CURRENCY_ID = ${currencyId}
	</sql-template>

	<sql-template id="INS_CURRENCYLEDGER">
		INSERT INTO
		CURRENCY_LEDGER(
		CURRENCY_ID
		,CURRENCY_TYPE
		,CURRENCY_NM
		,RATE
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID)
		VALUES(
		${currencyId}
		,${currencyType}
		,${currencyNm}
		,${rate}
		,'0'
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId})
	</sql-template>

	<sql-template id="SEL_MAX_CURRENCYLEDGER_STOCK_ID">
		SELECT
		COALESCE(MAX(CURRENCY_ID),0)
		FROM
		CURRENCY_LEDGER
	</sql-template>

	<!-- ============================================出品マスタ============================================== -->
	<sql-template id="SEL_DOMESTICEXHIBITION">
		SELECT
		EM.SYS_MANAGEMENT_ID
		,EM.MANAGEMENT_CODE
		,EM.MANAGEMENT_CODE AS BEFORE_MANAGEMENT_CODE
		,EM.LIST_PRICE
		,EM.ITEM_RATE_OVER
		,EM.SYS_MAKER_ID
		,EM.MAKER_CODE
		,EM.ITEM_NM
		,EM.WHOLSESALER_ID
		,EM.WHOLSESALER_NM
		,EM.PURCHASING_COST
		,EM.POSTAGE
		,EM.OPEN_PRICE_FLG
		,EM.DELETE_FLAG
		,to_char(EM.UPDATE_DATE, 'YYYY/MM/DD') as UPDATE_DATE
		,EM.UPDATE_USER_ID
		,EM.CREATE_DATE
		,EM.CREATE_USER_ID
		,EM.SET_ITEM_FLG
		,EM.DEPARTMENT_NM
		,MM.MAKER_NM
		,MM.MAKER_NM_KANA
		FROM
		EXHIBIT_MANAGE EM
		LEFT JOIN MST_MAKER MM
		ON (EM.SYS_MAKER_ID = MM.SYS_MAKER_ID)
		WHERE
		EM.DELETE_FLAG = '0'
		<if-not-null varName="sysManagementId">
			<if-not-equals value="0" varName="sysManagementId">
				AND EM.SYS_MANAGEMENT_ID = ${sysManagementId}
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="managementCode">
			AND EM.MANAGEMENT_CODE ILIKE
			${managementCode}
		</if-not-empty>

		<if-not-null varName="listPriceFrom">
			<if-not-equals value="0" varName="listPriceFrom">
				AND EM.LIST_PRICE &gt;=
				${listPriceFrom}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="listPriceTo">
			<if-not-equals value="0" varName="listPriceTo">
				AND EM.LIST_PRICE &lt;=
				${listPriceTo}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="itemRateOver">
			<if-not-equals value="0" varName="itemRateOver">
				<if-equals value="1" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER =
					${itemRateOver}
				</if-equals>
				<if-equals value="2" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER &gt;=
					${itemRateOver}
				</if-equals>
				<if-equals value="3" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER &lt;=
					${itemRateOver}
				</if-equals>
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="updateDateFrom">
			AND EM.UPDATE_DATE &gt;= ${updateDateFrom}
		</if-not-empty>
		<if-not-empty varName="updateDateTo">
			AND EM.UPDATE_DATE &lt;= ${updateDateTo}
		</if-not-empty>

		<if-not-empty varName="sysMakerId">
			AND EM.SYS_MAKER_ID = ${sysMakerId}
		</if-not-empty>
		<if-not-empty varName="makerCode">
			AND EM.MAKER_CODE ILIKE ${makerCode}
		</if-not-empty>
		<if-not-empty varName="wholsesalerNm">
			AND EM.WHOLSESALER_NM ILIKE
			${wholsesalerNm}
		</if-not-empty>
		<if-not-empty varName="itemNm">
			AND EM.ITEM_NM ILIKE ${itemNm}
		</if-not-empty>
		<if-not-empty varName="departmentNm">
			AND EM.DEPARTMENT_NM ILIKE ${departmentNm}
		</if-not-empty>

		<if-not-null varName="purchasingCostFrom">
			<if-not-equals value="0" varName="purchasingCostFrom">
				AND
				EM.PURCHASING_COST
				&gt;= ${purchasingCostFrom}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="purchasingCostTo">
			<if-not-equals value="0" varName="purchasingCostTo">
				AND
				EM.PURCHASING_COST
				&lt;= ${purchasingCostTo}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="setItemFlg">
			<if-equals value="1" varName="setItemFlg">
					AND
					SET_ITEM_FLG = ${setItemFlg}
			</if-equals>
		</if-not-null>

		<if-not-null varName="sortFirst">
			ORDER BY
			<if-equals value="1" varName="sortFirst">
				EM.MANAGEMENT_CODE
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				EM.MAKER_CODE
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				MM.MAKER_NM
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				EM.ITEM_NM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				EM.WHOLSESALER_NM
			</if-equals>
			<if-equals value="6" varName="sortFirst">
				EM.UPDATE_DATE
			</if-equals>
		</if-not-null>

		<if-not-null varName="sortFirstSub">
			<if-equals value="1" varName="sortFirstSub">
				ASC
			</if-equals>
			<if-equals value="2" varName="sortFirstSub">
				DESC
			</if-equals>
		</if-not-null>
	</sql-template>

	<sql-template id="UPD_DOMESTICEXHIBITION">
		UPDATE
			EXHIBIT_MANAGE
		SET
			MANAGEMENT_CODE = ${managementCode}
			,SYS_MAKER_ID = ${sysMakerId}
			,MAKER_CODE = ${makerCode}
			,ITEM_NM = ${itemNm}
			,WHOLSESALER_NM = ${wholsesalerNm}
			,LIST_PRICE = ${listPrice}
			,ITEM_RATE_OVER = ${itemRateOver}
			,POSTAGE = ${postage}
			,PURCHASING_COST = ${purchasingCost}
			,OPEN_PRICE_FLG = ${openPriceFlg}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,DEPARTMENT_NM = ${departmentNm}
		WHERE
			SYS_MANAGEMENT_ID = ${sysManagementId}
	</sql-template>

	<sql-template id="UPD_DOMESTICEXHIBITION_ITEM_CODE">
		UPDATE
			EXHIBIT_MANAGE
		SET
			POSTAGE = ${postage}
		WHERE
			MANAGEMENT_CODE = ${managementCode}
	</sql-template>

	<sql-template id="INS_DOMESTICEXHIBITION">
		INSERT INTO
		EXHIBIT_MANAGE(
			SYS_MANAGEMENT_ID
			,MANAGEMENT_CODE
			,LIST_PRICE
			,ITEM_RATE_OVER
			,SYS_MAKER_ID
			,MAKER_CODE
			,ITEM_NM
			,WHOLSESALER_ID
			,WHOLSESALER_NM
			,PURCHASING_COST
			,POSTAGE
			,OPEN_PRICE_FLG
			,DELETE_FLAG
			,UPDATE_DATE
			,UPDATE_USER_ID
			,CREATE_DATE
			,CREATE_USER_ID
			,SET_ITEM_FLG
			,DEPARTMENT_NM)
		VALUES(
			${sysManagementId}
			,${managementCode}
			,${listPrice}
			,${itemRateOver}
			,${sysMakerId}
			,${makerCode}
			,${itemNm}
			,${wholsesalerId}
			,${wholsesalerNm}
			,${purchasingCost}
			,${postage}
			,${openPriceFlg}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId}
			,${setItemFlg}
			,${departmentNm})
	</sql-template>

	<sql-template id="SEL_DOMESTIC_ORDER_ITEM_TARGET">
		SELECT
			DI.SYS_DOMESTIC_ITEM_ID
			,DI.MAKER_CODE
			,DI.MANAGEMENT_CODE
			,DS.SYS_DOMESTIC_SLIP_ID
			,DS.ORDER_NO
		FROM
			DOMESTIC_ITEM DI
			LEFT JOIN DOMESTIC_SLIP DS
			ON (DI.SYS_DOMESTIC_SLIP_ID = DS.SYS_DOMESTIC_SLIP_ID)
		WHERE
			DI.DELETE_FLAG = '0'
			AND DI.MANAGEMENT_CODE = ${managementCode}
			AND DI.STATUS != '6'
			AND DI.STATUS != '7'
	</sql-template>

	<sql-template id="UPD_DOMESTIC_ORDER_ITEM_COST">
		UPDATE
			DOMESTIC_ITEM
		SET
			POSTAGE = ${postage}
			,PURCHASING_COST = ${purchasingCost}
			,LIST_PRICE = ${listPrice}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,MANAGEMENT_CODE = ${managementCode}
			,WHOLSESALER_NM = ${wholsesalerNm}
			,MAKER_ID = ${sysMakerId}
			,MAKER_CODE = ${makerCode}
			,ITEM_NM = ${itemNm}
		WHERE
			SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
	</sql-template>

	<sql-template id="SEL_UPD_TARGET_SALES_ITEM_COST">
		SELECT
			SS.SYS_SALES_SLIP_ID
			,SS.SYS_CORPORATION_ID
			,SI.SYS_SALES_ITEM_ID
			,SI.ITEM_CODE
			,SS.ORDER_NO
		FROM
			SALES_SLIP SS
			LEFT JOIN SALES_ITEM SI
			ON (SS.SYS_SALES_SLIP_ID = SI.SYS_SALES_SLIP_ID)
		WHERE
			SI.DELETE_FLAG = '0'
			AND SS.ORDER_NO = ${orderNo}
			AND SI.ITEM_CODE = ${managementCode}
	</sql-template>

	<sql-template id="UPD_SALES_ITEM_TARGET_COST">
		UPDATE
			SALES_ITEM
		SET
			KIND_COST = ${kindCost}
			,LIST_PRICE = ${listPrice}
			,ITEM_RATE_OVER = ${itemRateOver}
			,COST = ${cost}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			DELETE_FLAG = '0'
			AND SYS_SALES_ITEM_ID = ${sysSalesItemId}
	</sql-template>

	<sql-template id="UPD_DOMESTIC_SALES_ITEM_COST">
		UPDATE
			SALES_ITEM
		SET
			KIND_COST = ${kindCost}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			DELETE_FLAG = '0'
			AND SYS_SALES_ITEM_ID = ${sysSalesItemId}
	</sql-template>

	<sql-template id="DELETE_DOMESTICEXHIBITION">
		UPDATE
		EXHIBIT_MANAGE
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MANAGEMENT_ID = ${sysManagementId}
	</sql-template>
	<sql-template id="SEL_MAX_DOMESTIC_ECHIBITION_ID">
		SELECT
		COALESCE(MAX(SYS_MANAGEMENT_ID),0)
		FROM
		EXHIBIT_MANAGE
	</sql-template>
	<sql-template id="SEL_DMSTCXHBTN_DL">
		SELECT
			EM.SYS_MANAGEMENT_ID
			,EM.MANAGEMENT_CODE
			,EM.LIST_PRICE
			,EM.ITEM_RATE_OVER
			,EM.SYS_MAKER_ID
			,EM.MAKER_CODE
			,EM.ITEM_NM
			,EM.WHOLSESALER_ID
			,EM.WHOLSESALER_NM
			,EM.PURCHASING_COST
			,EM.POSTAGE
			,EM.OPEN_PRICE_FLG
			,EM.DEPARTMENT_NM
			,to_char(EM.UPDATE_DATE, 'YYYY/MM/DD') AS UPDATE_DATE
			,MM.MAKER_NM
			,MM.MAKER_NM_KANA
		FROM
			EXHIBIT_MANAGE EM
			LEFT JOIN MST_MAKER MM
			ON (EM.SYS_MAKER_ID = MM.SYS_MAKER_ID)
		WHERE
			EM.DELETE_FLAG = '0'
		<if-not-empty varName="managementCode">
			AND EM.MANAGEMENT_CODE ILIKE ${managementCode}
		</if-not-empty>

		<if-not-null varName="listPriceFrom">
			<if-not-equals value="0" varName="listPriceFrom">
				AND EM.LIST_PRICE &gt;= ${listPriceFrom}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="listPriceTo">
			<if-not-equals value="0" varName="listPriceTo">
				AND EM.LIST_PRICE &lt;= ${listPriceTo}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="itemRateOver">
			<if-not-equals value="0" varName="itemRateOver">
				<if-equals value="1" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER = ${itemRateOver}
				</if-equals>
				<if-equals value="2" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER &gt;= ${itemRateOver}
				</if-equals>
				<if-equals value="3" varName="numberOrderType">
					AND EM.ITEM_RATE_OVER &lt;= ${itemRateOver}
				</if-equals>
			</if-not-equals>
		</if-not-null>

		<if-not-empty varName="updateDateFrom">
			AND EM.UPDATE_DATE &gt;= ${updateDateFrom}
		</if-not-empty>
		<if-not-empty varName="updateDateTo">
			AND EM.UPDATE_DATE &lt;= ${updateDateTo}
		</if-not-empty>

		<if-not-empty varName="sysMakerId">
			AND EM.SYS_MAKER_ID = ${sysMakerId}
		</if-not-empty>
		<if-not-empty varName="makerCode">
			AND EM.MAKER_CODE ILIKE ${makerCode}
		</if-not-empty>
		<if-not-empty varName="wholsesalerNm">
			AND EM.WHOLSESALER_NM ILIKE ${wholsesalerNm}
		</if-not-empty>
		<if-not-empty varName="itemNm">
			AND EM.ITEM_NM ILIKE ${itemNm}
		</if-not-empty>
		<if-not-empty varName="departmentNm">
			AND EM.DEPARTMENT_NM ILIKE ${departmentNm}
		</if-not-empty>

		<if-not-null varName="purchasingCostFrom">
			<if-not-equals value="0" varName="purchasingCostFrom">
				AND EM.PURCHASING_COST &gt;= ${purchasingCostFrom}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="purchasingCostTo">
			<if-not-equals value="0" varName="purchasingCostTo">
				AND EM.PURCHASING_COST &lt;= ${purchasingCostTo}
			</if-not-equals>
		</if-not-null>

		<if-not-null varName="setItemFlg">
			<if-equals value="1" varName="setItemFlg">
					AND
					SET_ITEM_FLG = ${setItemFlg}
			</if-equals>
		</if-not-null>

		<if-not-null varName="sortFirst">
			ORDER BY
			<if-equals value="1" varName="sortFirst">
				MANAGEMENT_CODE
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				MAKER_CODE
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				MAKER_NM
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				ITEM_NM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				WHOLSESALER_NM
			</if-equals>
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_DOMESTIC_MANAGEMENT_CD">

		SELECT
		SYS_MANAGEMENT_ID
		,MANAGEMENT_CODE
		,LIST_PRICE
		,ITEM_RATE_OVER
		,SYS_MAKER_ID
		,MAKER_CODE
		,ITEM_NM
		,WHOLSESALER_ID
		,WHOLSESALER_NM
		,PURCHASING_COST
		,POSTAGE
		,OPEN_PRICE_FLG
		,DEPARTMENT_NM
		FROM
		EXHIBIT_MANAGE
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="managementCode">
			AND MANAGEMENT_CODE =
			${managementCode}
		</if-not-empty>
	</sql-template>

	<sql-template id="SEL_DOMESTIC_EXHIBITION_DTO_LIST">
		SELECT
		SYS_MANAGEMENT_ID
		,MANAGEMENT_CODE
		,LIST_PRICE
		,ITEM_RATE_OVER
		,SYS_MAKER_ID
		,MAKER_CODE
		,ITEM_NM
		,WHOLSESALER_ID
		,WHOLSESALER_NM
		,PURCHASING_COST
		,POSTAGE
		,OPEN_PRICE_FLG
		,DEPARTMENT_NM
		FROM
		EXHIBIT_MANAGE
		WHERE
		DELETE_FLAG = '0'
		AND
		LOWER(MANAGEMENT_CODE) IN
		(${managementCodesSet})
	</sql-template>

	<sql-template id="SEL_CNT_MANAGEMENT_CODE">
		SELECT
		COUNT(MANAGEMENT_CODE)
		FROM
		EXHIBIT_MANAGE
		WHERE
		DELETE_FLAG = '0'
		AND MANAGEMENT_CODE = ${managementCode}
	</sql-template>

	<sql-template id="SEL_EXHIBITION_ITEM">
		SELECT
			SYS_MANAGEMENT_ID
			,MANAGEMENT_CODE
			,LIST_PRICE
			,ITEM_RATE_OVER
			,SYS_MAKER_ID
			,MAKER_CODE
			,ITEM_NM
			,WHOLSESALER_ID
			,WHOLSESALER_NM
			,PURCHASING_COST
			,POSTAGE
			,OPEN_PRICE_FLG
			,DEPARTMENT_NM
		FROM
			EXHIBIT_MANAGE
		WHERE
			DELETE_FLAG = '0'
			AND MANAGEMENT_CODE = ${managementCode}
	</sql-template>

	<sql-template id="SEL_CNT_DOMESTIC_ORDER_ITEM">
		SELECT
			COUNT(SYS_DOMESTIC_ITEM_ID) AS ORDER_ITEM_CNT
		FROM
			DOMESTIC_ITEM
		WHERE
			MANAGEMENT_CODE = ${managementCode}
			AND DELETE_FLAG = '0'
	</sql-template>

	<!--================================ 国内セット商品 ================================-->
	<sql-template id="SEL_MAX_SET_EXHIBIT_MANAGE_ID">
		SELECT
		COALESCE(MAX(sys_set_management_id),0)
		FROM
		SET_EXHIBIT_MANAGE
	</sql-template>

	<sql-template id="INS_SET_EXHIBIT_MANAGE">
		INSERT INTO
		SET_EXHIBIT_MANAGE(
			SYS_SET_MANAGEMENT_ID
			,SYS_MANAGEMENT_ID
			,FORM_SYS_MANAGEMENT_ID
			,ITEM_NUM
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES(
			${sysSetManagementId}
			,${sysManagementId}
			,${formSysManagementId}
			,${itemNum}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="SEL_SET_EXHIBIT_MANAGE">
		SELECT
			EM.SYS_MANAGEMENT_ID
			,EM.MANAGEMENT_CODE
			,EM.MANAGEMENT_CODE AS BEFORE_MANAGEMENT_CODE
			,EM.LIST_PRICE
			,EM.ITEM_RATE_OVER
			,EM.SYS_MAKER_ID
			,EM.MAKER_CODE
			,EM.ITEM_NM
			,EM.WHOLSESALER_ID
			,EM.WHOLSESALER_NM
			,EM.PURCHASING_COST
			,EM.POSTAGE
			,EM.OPEN_PRICE_FLG
			,EM.DEPARTMENT_NM
			,EM.DELETE_FLAG
			,to_char(EM.UPDATE_DATE, 'YYYY/MM/DD') as UPDATE_DATE
			,EM.UPDATE_USER_ID
			,EM.CREATE_DATE
			,EM.CREATE_USER_ID
			,EM.SET_ITEM_FLG
		FROM
			EXHIBIT_MANAGE EM
		WHERE
			EM.SYS_MANAGEMENT_ID = ${sysManagementId}
			AND EM.DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_FROM_EXHIBIT_MANAGE">
		SELECT
			EM.SYS_MANAGEMENT_ID
			,EM.MANAGEMENT_CODE
			,EM.LIST_PRICE
			,EM.ITEM_RATE_OVER
			,EM.SYS_MAKER_ID
			,EM.MAKER_CODE
			,EM.ITEM_NM
			,EM.WHOLSESALER_ID
			,EM.WHOLSESALER_NM
			,EM.PURCHASING_COST
			,EM.POSTAGE
			,EM.OPEN_PRICE_FLG
			,EM.DEPARTMENT_NM
			,SEM.SYS_SET_MANAGEMENT_ID
			,SEM.SYS_MANAGEMENT_ID
			,SEM.FORM_SYS_MANAGEMENT_ID
			,SEM.ITEM_NUM
		FROM
		EXHIBIT_MANAGE EM
		INNER JOIN SET_EXHIBIT_MANAGE SEM
		ON (EM.SYS_MANAGEMENT_ID = SEM.FORM_SYS_MANAGEMENT_ID)
		WHERE SEM.SYS_MANAGEMENT_ID = ${sysManagementId}
		AND SEM.DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="DELETE_SET_DOMESTICEXHIBITION">
		UPDATE
		SET_EXHIBIT_MANAGE
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_SET_MANAGEMENT_ID = ${sysSetManagementId}
	</sql-template>

	<sql-template id="DELETE_SET_DOMESTICEXHIBITION_OF_SYSMANAGEMENTID">
		UPDATE
		SET_EXHIBIT_MANAGE
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MANAGEMENT_ID = ${sysManagementId}
	</sql-template>


	<sql-template id="UPD_SET_EXHIBIT_MANAGE">
		UPDATE
			SET_EXHIBIT_MANAGE
		SET
			ITEM_NUM = ${itemNum}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_SET_MANAGEMENT_ID = ${sysSetManagementId}
			AND DELETE_FLAG = '0'

	</sql-template>

	<sql-template id="SEL_DOMESTIC_EXHIBITION_CODE_SEARCH">
	SELECT
		SYS_MANAGEMENT_ID
	FROM
		EXHIBIT_MANAGE
	WHERE
		MANAGEMENT_CODE = ${managementCode}
		AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="UPD_DOMESTIC_SET_ITEM_FLG">
		UPDATE
			EXHIBIT_MANAGE
		SET
			SET_ITEM_FLG = ${setItemFlg}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_MANAGEMENT_ID = ${sysManagementId}
	</sql-template>
	<!-- ======================================国内注文書作成============================================== -->

	<sql-template id="SEL_ORDER_DOMESTICEXHIBITION">
		SELECT
		EM.SYS_MANAGEMENT_ID
		,EM.MANAGEMENT_CODE
		,EM.LIST_PRICE
		,EM.ITEM_RATE_OVER
		,EM.SYS_MAKER_ID
		,EM.MAKER_CODE
		,EM.ITEM_NM
		,MM.MAKER_NM
		,EM.WHOLSESALER_ID
		,EM.WHOLSESALER_NM
		,EM.PURCHASING_COST
		,EM.POSTAGE
		,EM.OPEN_PRICE_FLG
		,EM.DELETE_FLAG
		,EM.UPDATE_DATE
		,EM.UPDATE_USER_ID
		,EM.CREATE_DATE
		,EM.CREATE_USER_ID
		,EM.DEPARTMENT_NM
		,EM.SET_ITEM_FLG
		FROM

		EXHIBIT_MANAGE EM INNER JOIN MST_MAKER MM
		ON
		(EM.SYS_MAKER_ID = MM.SYS_MAKER_ID)

		WHERE
		EM.DELETE_FLAG = '0'
		<if-not-empty varName="managementCode">
			AND EM.MANAGEMENT_CODE ILIKE ${managementCode}
		</if-not-empty>
		<if-not-empty varName="sysMakerId">
			AND EM.SYS_MAKER_ID = ${sysMakerId}
		</if-not-empty>
		<if-not-empty varName="itemNm">
			AND EM.ITEM_NM ILIKE ${itemNm}
		</if-not-empty>
		<if-not-empty varName="wholsesalerNm">
			AND EM.WHOLSESALER_NM ILIKE ${wholsesalerNm}
		</if-not-empty>
		<if-not-null varName="setItemFlg">
			<if-not-equals value="0" varName="setItemFlg">
			AND EM.SET_ITEM_FLG = ${setItemFlg}
			</if-not-equals>
		</if-not-null>
		ORDER BY
		EM.SYS_MANAGEMENT_ID
	</sql-template>

		<sql-template id="SEL_FORM_DOMESTICEXHIBITION">
		SELECT
			EM.SYS_MANAGEMENT_ID
			,EM.MANAGEMENT_CODE
			,EM.LIST_PRICE
			,EM.ITEM_RATE_OVER
			,EM.SYS_MAKER_ID
			,EM.MAKER_CODE
			,EM.ITEM_NM
			,MM.MAKER_NM
			,EM.WHOLSESALER_ID
			,EM.WHOLSESALER_NM
			,EM.PURCHASING_COST
			,EM.POSTAGE
			,EM.OPEN_PRICE_FLG
			,EM.DEPARTMENT_NM
			,EM.DELETE_FLAG
			,EM.UPDATE_DATE
			,EM.UPDATE_USER_ID
			,EM.CREATE_DATE
			,EM.CREATE_USER_ID
			,EM.SET_ITEM_FLG
			,SEM.ITEM_NUM
		FROM
			EXHIBIT_MANAGE EM INNER JOIN MST_MAKER MM
			ON (EM.SYS_MAKER_ID = MM.SYS_MAKER_ID)
			INNER JOIN SET_EXHIBIT_MANAGE SEM
			ON (EM.SYS_MANAGEMENT_ID = SEM.FORM_SYS_MANAGEMENT_ID
				AND SEM.SYS_MANAGEMENT_ID = ${sysSetManagementId})

		WHERE
			EM.DELETE_FLAG = '0'
		<if-not-empty varName="sysFormManagementId">
			AND EM.SYS_MANAGEMENT_ID = ${sysFormManagementId}
		</if-not-empty>
		ORDER BY
			EM.SYS_MANAGEMENT_ID
	</sql-template>

	<sql-template id="SEL_DETAIL_DOMESTIC_ORDER_ITEM">
		SELECT
			DI.SYS_DOMESTIC_ITEM_ID
			,DI.SYS_DOMESTIC_SLIP_ID
			,DI.MANAGEMENT_CODE
			,DI.ORDER_NUM
			,DI.WHOLSESALER_ID
			,DI.WHOLSESALER_NM
			,DI.ORDER_REMARKS
			,DI.LIST_REMARKS
			,DI.ARRIVAL_SCHEDULE_DATE
			,DI.ARRIVAL_DATE
			,DI.MAKER_ID
			,MM.MAKER_NM
			,DI.MAKER_CODE
			,DI.ITEM_NM
			,DI.SEREAL_NUM
			,DI.PURCHASING_COST
			,DI.COST_COMF_FLAG
			,DI.LIST_PRICE
			,DI.POSTAGE
			,DI.DELETE_FLAG
			,DI.CREATE_DATE
			,DI.CREATE_USER_ID
			,DI.UPDATE_DATE
			,DI.UPDATE_USER_ID
			,DI.STATUS
			,DI.ITEM_TYPE
			,DI.SET_SYS_DOMESTIC_ITEM_ID
			,EM.OPEN_PRICE_FLG
			,EM.SYS_MANAGEMENT_ID
		FROM
			DOMESTIC_ITEM DI inner join EXHIBIT_MANAGE EM
		ON	(DI.MANAGEMENT_CODE = EM.MANAGEMENT_CODE
		AND EM.DELETE_FLAG = '0')
		LEFT JOIN MST_MAKER MM
		ON	(EM.SYS_MAKER_ID = MM.SYS_MAKER_ID)
		WHERE
			DI.SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
		AND
			DI.DELETE_FLAG = '0'
		ORDER BY
			DI.SET_SYS_DOMESTIC_ITEM_ID
			,DI.ITEM_TYPE
			,DI.MAKER_ID
			,DI.MANAGEMENT_CODE
		</sql-template>

	<sql-template id="UPD_DELETE_FOMR_DOMESTIC_ITEM">
		UPDATE
			DOMESTIC_ITEM
		SET
			DELETE_FLAG = '1'
		WHERE
			SET_SYS_DOMESTIC_ITEM_ID = ${setSysDomesticItemId}
			AND DELETE_FLAG = '0'
			AND ITEM_TYPE = '2'
	</sql-template>

	<sql-template id="SEL_DETAIL_DOMESTIC_ORDER_ITEM_PDF">
		SELECT
			DI.SYS_DOMESTIC_ITEM_ID
			,DI.SYS_DOMESTIC_SLIP_ID
			,DI.MANAGEMENT_CODE
			,DI.ORDER_NUM
			,DI.WHOLSESALER_ID
			,DI.WHOLSESALER_NM
			,coalesce(DI.ORDER_REMARKS, ' ') AS ORDER_REMARKS
			,DI.LIST_REMARKS
			,DI.ARRIVAL_SCHEDULE_DATE
			,DI.ARRIVAL_DATE
			,DI.MAKER_ID
			,DI.MAKER_CODE
			,DI.ITEM_NM
			,DI.SEREAL_NUM
			,DI.PURCHASING_COST
			,DI.COST_COMF_FLAG
			,DI.LIST_PRICE
			,DI.POSTAGE
			,DI.DELETE_FLAG
			,DI.CREATE_DATE
			,DI.CREATE_USER_ID
			,DI.UPDATE_DATE
			,DI.UPDATE_USER_ID
			,DI.STATUS
			,DI.ITEM_TYPE
			,EM.OPEN_PRICE_FLG
			,MI.MAKER_NM
		FROM
			DOMESTIC_ITEM DI inner join EXHIBIT_MANAGE EM
		ON
			(DI.MANAGEMENT_CODE = EM.MANAGEMENT_CODE
			AND EM.DELETE_FLAG = '0')
			left join mst_maker MI
		ON
			(DI.MAKER_ID = MI.SYS_MAKER_ID)
		WHERE
			DI.SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
			AND DI.DELETE_FLAG = '0'
<!-- 			AND DI.ITEM_TYPE != '1' -->
		ORDER BY
			DI.SET_SYS_DOMESTIC_ITEM_ID
			,DI.MAKER_ID
			,DI.MANAGEMENT_CODE
	</sql-template>
	<sql-template id="SEL_DOMESTIC_ITEM_CSV_INFO">

		SELECT
			DI.SYS_DOMESTIC_ITEM_ID
			,DI.SYS_DOMESTIC_SLIP_ID
			,DI.MANAGEMENT_CODE
			,DI.ORDER_NUM
			,DI.WHOLSESALER_ID
			,DI.WHOLSESALER_NM
			,DI.ORDER_REMARKS
			,DI.LIST_REMARKS
			,DI.ARRIVAL_SCHEDULE_DATE
			,DI.ARRIVAL_DATE
			,DI.MAKER_ID
			,DI.MAKER_CODE
			,DI.ITEM_NM
			,DI.SEREAL_NUM
			,DI.PURCHASING_COST
			,DI.COST_COMF_FLAG
			,DI.LIST_PRICE
			,DI.POSTAGE
			,DI.DELETE_FLAG
			,DI.CREATE_DATE
			,DI.CREATE_USER_ID
			,DI.UPDATE_DATE
			,DI.UPDATE_USER_ID
			,EM.ITEM_RATE_OVER
		FROM
			DOMESTIC_ITEM DI INNER JOIN DOMESTIC_SLIP DS
			ON (DI.SYS_DOMESTIC_SLIP_ID = DS.SYS_DOMESTIC_SLIP_ID
				AND DS.DELETE_FLAG = '0')
			 INNER JOIN EXHIBIT_MANAGE EM
			ON (DI.MANAGEMENT_CODE = EM.MANAGEMENT_CODE
				AND EM.DELETE_FLAG = '0')
		WHERE
			DI.DELETE_FLAG = '0'
			AND DI.MANAGEMENT_CODE = ${managementCode}
			AND DS.ORDER_NO = ${orderNo}
			AND DI.DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_DETAIL_DOMESTIC_ORDER_SLIP">
		SELECT
		SYS_DOMESTIC_SLIP_ID
		,TO_CHAR(PURCHASE_ORDER_NO, 'FM000000') AS PURCHASE_ORDER_NO_PDF
		,ITEM_ORDER_DATE
		,SYS_CORPORATION_ID
		,MALL
		,ORDER_NO
		,NOTE_TURN
		,SENDER_REMARKS
		,SYS_WAREHOUSE_ID
		,WAREHOUSE_NM
		,ZIP
		,ADDRESS_FST
		,ADDRESS_NXT
		,ADDRESS_NXT2
		,TELL_NO
		,LOGISTIC_NM
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,ORDER_SLIP_DATE
		,PRINT_CHECK_FLAG
		,SYS_DOMESTIC_IMPORT_ID
		FROM
		DOMESTIC_SLIP
		WHERE
		SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
	</sql-template>

	<sql-template id="INS_DOMESTIC_ORDER_SLIP">
		INSERT INTO
		DOMESTIC_SLIP (
			SYS_DOMESTIC_SLIP_ID
			,PURCHASE_ORDER_NO
			,ITEM_ORDER_DATE
			,SYS_CORPORATION_ID
			,MALL
			,ORDER_NO
			,NOTE_TURN
			,SENDER_REMARKS
			,SYS_WAREHOUSE_ID
			,WAREHOUSE_NM
			,ZIP
			,ADDRESS_FST
			,ADDRESS_NXT
			,ADDRESS_NXT2
			,TELL_NO
			,LOGISTIC_NM
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,ORDER_SLIP_DATE
			,HISTORY_INFO
			,PRINT_CHECK_FLAG
			,SYS_DOMESTIC_IMPORT_ID
		) VALUES (
			${sysDomesticSlipId}
			,${purchaseOrderNo}
			,${itemOrderDate}
			,${sysCorporationId}
			,${mall}
			,${orderNo}
			,${noteTurn}
			,${senderRemarks}
			,${sysWarehouseId}
			,${warehouseNm}
			,${zip}
			,${addressFst}
			,${addressNxt}
			,${addressNxt2}
			,${tellNo}
			,${logisticNm}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId}
			,${orderSlipDate}
			,${historyInfo}
			,'0'
			,${sysDomesticImportId})
	</sql-template>

	<sql-template id="INS_DOMESTIC_ORDER_ITEM">
		INSERT INTO
		DOMESTIC_ITEM (
			SYS_DOMESTIC_ITEM_ID
			,SYS_DOMESTIC_SLIP_ID
			,MANAGEMENT_CODE
			,ORDER_NUM
			,WHOLSESALER_ID
			,WHOLSESALER_NM
			,ORDER_REMARKS
			,LIST_REMARKS
			,MAKER_ID
			,ITEM_NM
			,MAKER_CODE
			,SEREAL_NUM
			,STATUS
			,PURCHASING_COST
			,CORRESPONDENCE
			,ORDER_CHARGE
			,COST_COMF_FLAG
			,LIST_PRICE
			,POSTAGE
			,ARRIVAL_SCHEDULE_DATE
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,HISTORY_INFO
			,ITEM_TYPE
			,SET_SYS_DOMESTIC_ITEM_ID
		) VALUES (
			${sysDomesticItemId}
			,${sysDomesticSlipId}
			,${managementCode}
			,${orderNum}
			,${wholsesalerId}
			,${wholsesalerNm}
			,${orderRemarks}
			,${listRemarks}
			,${makerId}
			,${itemNm}
			,${makerCode}
			,${serealNum}
			,'1'
			,${purchasingCost}
			,'1'
			,${orderCharge}
			,'0'
			,${listPrice}
			,${postage}
			,${arrivalScheduleDate}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId}
			,${historyInfo}
			,${itemType}
			,${setSysDomesticItemId})
	</sql-template>

	<sql-template id="UPD_DOMESTIC_ORDER_SLIP">
		UPDATE
			DOMESTIC_SLIP
		SET
			ITEM_ORDER_DATE = ${itemOrderDate}
			,SYS_CORPORATION_ID = ${sysCorporationId}
			,MALL = ${mall}
			,ORDER_NO = ${orderNo}
			,NOTE_TURN = ${noteTurn}
			,SENDER_REMARKS = ${senderRemarks}
			,SYS_WAREHOUSE_ID = ${sysWarehouseId}
			,WAREHOUSE_NM = ${warehouseNm}
			,ZIP = ${zip}
			,ADDRESS_FST = ${addressFst}
			,ADDRESS_NXT = ${addressNxt}
			,ADDRESS_NXT2 = ${addressNxt2}
			,TELL_NO = ${tellNo}
			,LOGISTIC_NM = ${logisticNm}
			,DELETE_FLAG = '0'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
			SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
			AND DELETE_FLAG = '0'

	</sql-template>

	<sql-template id="UPD_DOMESTIC_PRINT_FLG">
		UPDATE
			DOMESTIC_SLIP
		SET
			PRINT_CHECK_FLAG = ${printCheckFlag}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
			SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
			AND DELETE_FLAG = '0'

	</sql-template>

	<sql-template id="UPD_DOMESTIC_ORDER_ITEM">
		UPDATE
			DOMESTIC_ITEM
		SET
			ORDER_NUM = ${orderNum}
			,WHOLSESALER_ID = ${wholsesalerId}
			,WHOLSESALER_NM = ${wholsesalerNm}
			,ORDER_REMARKS = ${orderRemarks}
			,LIST_REMARKS = ${listRemarks}
			,MAKER_ID = ${makerId}
			,MAKER_CODE = ${makerCode}
			,ITEM_NM = ${itemNm}
			,PURCHASING_COST = ${purchasingCost}
			,COST_COMF_FLAG = '0'
			,POSTAGE = ${postage}
			,ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,DELETE_FLAG = '0'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO,${historyInfo})
		WHERE
			SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_MAX_SYS_DOMESTIC_SLIP_ID">
		SELECT
		COALESCE(MAX(SYS_DOMESTIC_SLIP_ID),0)
		FROM
		DOMESTIC_SLIP
	</sql-template>

	<sql-template id="SEL_MAX_SYS_DOMESTIC_PURCHASE_ORDER_NO">
		SELECT
		COALESCE(MAX(PURCHASE_ORDER_NO),0)
		FROM
		DOMESTIC_SLIP
	</sql-template>

	<sql-template id="SEL_MAX_SYS_DOMESTIC_ITEM_ID">
		SELECT
		COALESCE(MAX(SYS_DOMESTIC_ITEM_ID),0)
		FROM
		DOMESTIC_ITEM
	</sql-template>

	<sql-template id="SEL_MAX_SEREAL_NUM">
		SELECT
			CASE WHEN MAX(SEREAL_NUM) = '' THEN 170000
			ELSE TO_NUMBER(MAX(SEREAL_NUM), '000000')
			END
		FROM
			DOMESTIC_ITEM
	</sql-template>

	<sql-template id="SEL_MANAGEMENT_CODE_CHECK">
		SELECT
		MANAGEMENT_CODE
		FROM
		EXHIBIT_MANAGE
		WHERE
		DELETE_FLAG ='0'
		AND
		MANAGEMENT_CODE
		<if-not-empty varName="managementCode">
			ILIKE
			${managementCode}
		</if-not-empty>
	</sql-template>

	<sql-template id="SEL_ORDER_NO_CHECK">
		SELECT
			ORDER_NO
		FROM
			DOMESTIC_SLIP
		WHERE
			DELETE_FLAG ='0'
			AND ORDER_NO ILIKE ${orderNo}
	</sql-template>

	<sql-template id="DEL_UPD_DOMESTIC_ORDER_ITEM">
		UPDATE
		DOMESTIC_ITEM
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
		SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
	</sql-template>

	<sql-template id="SEL_DOMESTIC_WAREHOUSE">
		SELECT
		SYS_WAREHOUSE_ID
		,WAREHOUSE_NM
		,ADDRESS
		,DELETE_FLAG
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,LOGISTIC_NM
		,TELL_NO
		,ADDRESS_FST
		,ADDRESS_NXT
		,ADDRESS_NXT2
		,ZIP
		FROM
		DOMESTIC_WAREHOUSE
		WHERE
		DELETE_FLAG = '0'
		<if-equals value="0" varName="getListFlg">
			AND SYS_WAREHOUSE_ID =
			${sysWarehouseId}
		</if-equals>
		ORDER BY
		SYS_WAREHOUSE_ID
	</sql-template>
	<!-- ======================================仕入先台帳============================================== -->
	<sql-template id="SEL_MST_SUPPLIER">
		SELECT
			SYS_SUPPLIER_ID
			,SUPPLIER_NO
			,COMPANY_FACTORY_NM
			,PO_NO_INITIAL
			,COUNTRY
			,ADDRESS
			,TEL
			,FAX
			,CONTACT_PERSON_NM
			,MAIL_ADDRESS
			,TRADE_TERMS
			,PAYMENT_TERMS1
			,PAYMENT_TERMS2
			,CURRENCY_ID
			,LEAD_TIME
			,BANK_NM
			,BRANCH_NM
			,BANK_ADDRESS
			,SWIFT_CODE
			,ACCOUNT_NO
			,SUPPLIER_REMARKS
			,DELETE_FLAG
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			MST_SUPPLIER
		WHERE
			DELETE_FLAG ='0'
		<if-not-equals value="0" varName="sysSupplierId">
			AND SYS_SUPPLIER_ID = ${sysSupplierId}
		</if-not-equals>
		ORDER BY SYS_SUPPLIER_ID
	</sql-template>

	<sql-template id="INS_MST_SUPPLIER">
		INSERT INTO MST_SUPPLIER (
			SYS_SUPPLIER_ID
			,SUPPLIER_NO
			,COMPANY_FACTORY_NM
			,PO_NO_INITIAL
			,COUNTRY
			,ADDRESS
			,TEL
			,FAX
			,CONTACT_PERSON_NM
			,MAIL_ADDRESS
			,TRADE_TERMS
			,PAYMENT_TERMS1
			,PAYMENT_TERMS2
			,CURRENCY_ID
			,LEAD_TIME
			,BANK_NM
			,BRANCH_NM
			,BANK_ADDRESS
			,SWIFT_CODE
			,ACCOUNT_NO
			,SUPPLIER_REMARKS
			,DELETE_FLAG
			,UPDATE_DATE
			,UPDATE_USER_ID
			)
		VALUES (
			${sysSupplierId}
			,${supplierNo}
			,${companyFactoryNm}
			,${poNoInitial}
			,${country}
			,${address}
			,${tel}
			,${fax}
			,${contactPersonNm}
			,${mailAddress}
			,${tradeTerms}
			,${paymentTerms1}
			,${paymentTerms2}
			,${currencyId}
			,${leadTime}
			,${bankNm}
			,${branchNm}
			,${bankAddress}
			,${swiftCode}
			,${accountNo}
			,${supplierRemarks}
			,'0'
			,current_timestamp
			,${updateUserId}
			)
	</sql-template>

	<sql-template id="UPD_MST_SUPPLIER">
		UPDATE
			MST_SUPPLIER
		SET
			SUPPLIER_NO = ${supplierNo}
			,COMPANY_FACTORY_NM = ${companyFactoryNm}
			,PO_NO_INITIAL = ${poNoInitial}
			,COUNTRY = ${country}
			,ADDRESS = ${address}
			,TEL = ${tel}
			,FAX = ${fax}
			,CONTACT_PERSON_NM = ${contactPersonNm}
			,MAIL_ADDRESS = ${mailAddress}
			,TRADE_TERMS = ${tradeTerms}
			,PAYMENT_TERMS1 = ${paymentTerms1}
			,PAYMENT_TERMS2 = ${paymentTerms2}
			,CURRENCY_ID = ${currencyId}
			,LEAD_TIME = ${leadTime}
			,BANK_NM = ${bankNm}
			,BRANCH_NM = ${branchNm}
			,BANK_ADDRESS = ${bankAddress}
			,SWIFT_CODE = ${swiftCode}
			,ACCOUNT_NO = ${accountNo}
			,SUPPLIER_REMARKS = ${supplierRemarks}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_SUPPLIER_ID = ${sysSupplierId}
	</sql-template>

	<sql-template id="SEL_SEARCH_SUPPLIER">
		SELECT
			MS.SYS_SUPPLIER_ID
			,MS.SUPPLIER_NO
			,MS.COMPANY_FACTORY_NM
			,MS.PO_NO_INITIAL
			,MS.COUNTRY
			,MS.ADDRESS
			,MS.TEL
			,MS.FAX
			,MS.CONTACT_PERSON_NM
			,MS.MAIL_ADDRESS
			,MS.TRADE_TERMS
			,MS.PAYMENT_TERMS1
			,MS.PAYMENT_TERMS2
			,MS.CURRENCY_ID
			,MS.LEAD_TIME
			,MS.BANK_NM
			,MS.BRANCH_NM
			,MS.BANK_ADDRESS
			,MS.SWIFT_CODE
			,MS.ACCOUNT_NO
			,MS.SUPPLIER_REMARKS
			,MS.DELETE_FLAG
			,MS.UPDATE_DATE
			,MS.UPDATE_USER_ID
			,CR.CURRENCY_NM
			,CR.CURRENCY_TYPE
			,CR.RATE

		FROM
			MST_SUPPLIER MS
			LEFT JOIN CURRENCY_LEDGER CR
			ON (MS.CURRENCY_ID = CR.CURRENCY_ID)
		WHERE
			MS.DELETE_FLAG = '0'
			<if-not-equals value="0" varName="sysSupplierId">
				AND MS.SYS_SUPPLIER_ID = ${sysSupplierId}
			</if-not-equals>
<!-- 			<if-not-equals value="0" varName="paymentTerms1"> -->
<!-- 				AND MS.PAYMENT_TERMS1 = ${paymentTerms1} -->
<!-- 			</if-not-equals> -->
<!-- 			<if-not-equals value="0" varName="paymentTerms2"> -->
<!-- 				AND MS.PAYMENT_TERMS2 = ${paymentTerms2} -->
<!-- 			</if-not-equals> -->
<!-- 			<if-not-equals value="" varName="leadTime"> -->
<!-- 				AND MS.LEAD_TIME = ${leadTime} -->
<!-- 			</if-not-equals> -->
		ORDER BY
			MS.SYS_SUPPLIER_ID ASC
	</sql-template>

	<sql-template id="DEL_MST_SUPPLIER">
		UPDATE
			MST_SUPPLIER
		SET
			DELETE_FLAG = '1'
			,UPDATE_USER_ID = ${updateUserId}
			,UPDATE_DATE = current_timestamp
		WHERE
			SYS_SUPPLIER_ID = ${sysSupplierId}
	</sql-template>

	<sql-template id="CNT_SUPPLIER_NO">
		SELECT
			COUNT(SUPPLIER_NO)
		FROM
			MST_SUPPLIER
		WHERE
			SUPPLIER_NO = ${supplierNo}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="CNT_PO_NO_INITIAL">
		SELECT
			COUNT(PO_NO_INITIAL)
		FROM
			MST_SUPPLIER
		WHERE
			PO_NO_INITIAL = ${poNoInitial}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_MAX_SYS_SUPPLIER_ID">
		SELECT
			COALESCE(MAX(SYS_SUPPLIER_ID),0)
		FROM
			MST_SUPPLIER
	</sql-template>

	<sql-template id="SEL_CNT_CURRNCY_ID">
		SELECT
			COUNT(CURRENCY_ID)
		FROM
			MST_SUPPLIER
		WHERE
			CURRENCY_ID = ${currencyId}
		AND
			DELETE_FLAG = '0'
	</sql-template>

	<!-- ======================================メーカーマスタ============================================== -->
	<sql-template id="SEL_MST_MAKER">
		SELECT
		SYS_MAKER_ID
		,MAKER_NM
		,MAKER_NM_KANA
		,CONTACT_PERSON_NM
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DELETE_FLAG
		FROM
		MST_MAKER
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysMakerId">
			AND SYS_MAKER_ID =
			${sysMakerId}
		</if-not-equals>
		ORDER BY
		SYS_MAKER_ID
	</sql-template>

	<sql-template id="SEL_MST_MAKER_ID">
		SELECT
		SYS_MAKER_ID
		,MAKER_NM
		,MAKER_NM_KANA
		,CONTACT_PERSON_NM
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DELETE_FLAG
		FROM
		MST_MAKER
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="makerNm">
			<if-not-null varName="makerNm">
				AND MAKER_NM = ${makerNm}
			</if-not-null>
		</if-not-empty>
		<if-not-empty varName="makerNmKana">
			<if-not-null varName="makerNmKana">
				AND MAKER_NM_KANA = ${makerNmKana}
			</if-not-null>
		</if-not-empty>
	</sql-template>

	<sql-template id="SEL_MST_MAKER_ID_LIST">
		SELECT
		SYS_MAKER_ID
		,MAKER_NM
		,MAKER_NM_KANA
		,CONTACT_PERSON_NM
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DELETE_FLAG
		FROM
		MST_MAKER
		WHERE
		DELETE_FLAG = '0'
		<if-not-empty varName="makerNmSet">
			<if-not-null varName="makerNmSet">
				AND MAKER_NM IN (${makerNmSet})
			</if-not-null>
		</if-not-empty>
		<if-not-empty varName="makerNmKanaSet">
			<if-not-null varName="makerNmKanaSet">
				AND MAKER_NM_KANA IN (${makerNmKanaSet})
			</if-not-null>
		</if-not-empty>
	</sql-template>

	<sql-template id="SEL_MAX_SYS_MAKER_ID">
		SELECT
		COALESCE(MAX(SYS_MAKER_ID),0)
		FROM
		MST_MAKER
	</sql-template>

	<sql-template id="INS_MAKER">
		INSERT INTO
		MST_MAKER(
		SYS_MAKER_ID
		,MAKER_NM
		,MAKER_NM_KANA
		,CONTACT_PERSON_NM
		,CREATE_DATE
		,CREATE_USER_ID
		,UPDATE_DATE
		,UPDATE_USER_ID
		,DELETE_FLAG)
		VALUES(
		${sysMakerId}
		,${makerNm}
		,${makerNmKana}
		,${contactPersonNm}
		,current_timestamp
		,${createUserId}
		,current_timestamp
		,${updateUserId}
		,'0')
	</sql-template>

	<sql-template id="UPD_MAKER">
		UPDATE
		MST_MAKER
		SET
		MAKER_NM = ${makerNm}
		,MAKER_NM_KANA = ${makerNmKana}
		,CONTACT_PERSON_NM = ${contactPersonNm}
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MAKER_ID = ${sysMakerId}
	</sql-template>

	<sql-template id="DEL_MAKER">
		UPDATE
		MST_MAKER
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		WHERE
		SYS_MAKER_ID = ${sysMakerId}
	</sql-template>
	<!-- ======================================海外注文管理============================================== -->

	<sql-template id="SEL_FOREIGN_ITEM_SEARCH">
		SELECT
			coalesce(SYS_SUPPLIER_ID,0) AS SYS_SUPPLIER_ID
			,ITEM_CODE
			,FACTORY_ITEM_CODE
			,SYS_ITEM_ID
			,ITEM_NM
			,ORDER_NUM
			,ORDER_POOL_FLG
			,FOREIGN_ITEM_NM
			,PURCHACE_COST AS UNIT_PRICE
		FROM
			MST_ITEM
		WHERE
			DELETE_FLAG = '0'
			<if-not-equals value="1" varName="setFlg">
				AND ORDER_POOL_FLG = '1'
			</if-not-equals>
			<if-not-empty varName="itemCode">
				AND
				ITEM_CODE ILIKE ${itemCode}
			</if-not-empty>
			<if-not-empty varName="itemCodeFrom">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &gt;= TO_NUMBER(${itemCodeFrom}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemCodeTo">
				AND
				TO_NUMBER(ITEM_CODE,
				'00000000000') &lt;= TO_NUMBER(${itemCodeTo}, '00000000000')
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND
				ITEM_NM ILIKE ${itemNm}
			</if-not-empty>
			<if-not-empty varName="sysSupplierId">
				AND
				SYS_SUPPLIER_ID = ${sysSupplierId}
			</if-not-empty>
		ORDER BY
			SYS_SUPPLIER_ID
			,TO_NUMBER(ITEM_CODE, '00000000000')

	</sql-template>

	<sql-template id="SEL_FOREIGN_ORDER_SLIP_ITEM_SEARCH">
SELECT
			FI.SYS_FOREIGN_SLIP_ID
			,FI.SYS_FOREIGN_SLIP_ITEM_ID
			,FI.ITEM_CODE
			,FI.FACTORY_ITEM_CODE
			,FI.ITEM_NM
			,FI.FOREIGN_ITEM_NM
			,FI.UNIT_PRICE
			,FI.SYS_SUPPLIER_ID
			,FI.SYS_ITEM_ID
			,FI.ORDER_NUM
			,FI.DELETE_FLAG
			,ARS.ARRIVAL_SCHEDULE_DATE
			,ARS.VAGUE_ARRIVAL_SCHEDULE
			,ARS.SYS_ARRIVAL_SCHEDULE_ID
			,ARS.ORDER_STATUS
			,ARS.ARRIVAL_NUM
			,ARS.ARRIVAL_FLAG
			,ARS_SUB.ARRIVAL_SCHEDULE_DATE_SUB
			,ARS_SUB.VAGUE_ARRIVAL_SCHEDULE_SUB
		FROM
			FOREIGN_ITEM FI LEFT JOIN ARRIVAL_SCHEDULE ARS
		ON
			(FI.SYS_FOREIGN_SLIP_ID = ARS.SYS_FOREIGN_SLIP_ID
			AND FI.SYS_FOREIGN_SLIP_ITEM_ID = ARS.SYS_FOREIGN_SLIP_ITEM_ID
			AND ARS.ARRIVAL_FLAG = '0'
			AND ARS.DELETE_FLAG = '0')
		LEFT JOIN
			(SELECT
				ARRIVAL_SCHEDULE_DATE AS ARRIVAL_SCHEDULE_DATE_SUB
				,VAGUE_ARRIVAL_SCHEDULE AS VAGUE_ARRIVAL_SCHEDULE_SUB
				,SYS_FOREIGN_SLIP_ITEM_ID
				,SYS_FOREIGN_SLIP_ID
				,SYS_ITEM_ID
			FROM
				ARRIVAL_SCHEDULE
			WHERE
				DELETE_FLAG = '0'
				AND ARRIVAL_FLAG = '1'
				AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
				AND SYS_ARRIVAL_SCHEDULE_ID in (SELECT MIN(SYS_ARRIVAL_SCHEDULE_ID)
							FROM
								ARRIVAL_SCHEDULE
							WHERE
								DELETE_FLAG = '0'
								AND ARRIVAL_FLAG = '1'
								AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
							GROUP BY SYS_FOREIGN_SLIP_ITEM_ID)
			)ARS_SUB
		ON (FI.SYS_FOREIGN_SLIP_ID = ARS_SUB.SYS_FOREIGN_SLIP_ID
			AND FI.SYS_FOREIGN_SLIP_ITEM_ID = ARS_SUB.SYS_FOREIGN_SLIP_ITEM_ID)
		WHERE
			FI.DELETE_FLAG = '0'
		AND
			FI.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		ORDER BY
			 SUBSTRING(FI.FACTORY_ITEM_CODE FROM '^[a-zA-Z]+')
<!--   			,TO_NUMBER(SUBSTRING(FI.FACTORY_ITEM_CODE FROM '[0-9.]+'),'999999.999999') -->
  			,SUBSTRING(FI.FACTORY_ITEM_CODE FROM '[0-9.]+')
  			,FI.FACTORY_ITEM_CODE
	</sql-template>

		<sql-template id="SEL_FOREIGN_SLIP_ITEM_SEARCH">
SELECT
			FI.SYS_FOREIGN_SLIP_ID
			,FI.SYS_FOREIGN_SLIP_ITEM_ID
			,FI.ITEM_CODE
			,FI.FACTORY_ITEM_CODE
			,FI.ITEM_NM
			,FI.FOREIGN_ITEM_NM
			,FI.UNIT_PRICE
			,FI.SYS_SUPPLIER_ID
			,FI.SYS_ITEM_ID
			,FI.ORDER_NUM
			,FI.DELETE_FLAG
			,ARS.ARRIVAL_SCHEDULE_DATE
			,ARS.VAGUE_ARRIVAL_SCHEDULE
			,ARS.SYS_ARRIVAL_SCHEDULE_ID
			,ARS.ORDER_STATUS
			,ARS.ARRIVAL_NUM
			,ARS.ARRIVAL_FLAG
			,ARS_SUB.ARRIVAL_SCHEDULE_DATE_SUB
			,ARS_SUB.VAGUE_ARRIVAL_SCHEDULE_SUB
		FROM
			FOREIGN_ITEM FI LEFT JOIN ARRIVAL_SCHEDULE ARS
		ON
			(FI.SYS_FOREIGN_SLIP_ID = ARS.SYS_FOREIGN_SLIP_ID
			AND FI.SYS_FOREIGN_SLIP_ITEM_ID = ARS.SYS_FOREIGN_SLIP_ITEM_ID
			AND ARS.ARRIVAL_FLAG = '0'
			AND ARS.DELETE_FLAG = '0')
		LEFT JOIN
			(SELECT
				ARRIVAL_SCHEDULE_DATE AS ARRIVAL_SCHEDULE_DATE_SUB
				,VAGUE_ARRIVAL_SCHEDULE AS VAGUE_ARRIVAL_SCHEDULE_SUB
				,SYS_FOREIGN_SLIP_ITEM_ID
				,SYS_FOREIGN_SLIP_ID
				,SYS_ITEM_ID
			FROM
				ARRIVAL_SCHEDULE
			WHERE
				DELETE_FLAG = '0'
				AND ARRIVAL_FLAG = '1'
				AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
				AND SYS_ARRIVAL_SCHEDULE_ID in (SELECT MIN(SYS_ARRIVAL_SCHEDULE_ID)
							FROM
								ARRIVAL_SCHEDULE
							WHERE
								DELETE_FLAG = '0'
								AND ARRIVAL_FLAG = '1'
								AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
							GROUP BY SYS_FOREIGN_SLIP_ITEM_ID)
			)ARS_SUB
		ON (FI.SYS_FOREIGN_SLIP_ID = ARS_SUB.SYS_FOREIGN_SLIP_ID
			AND FI.SYS_FOREIGN_SLIP_ITEM_ID = ARS_SUB.SYS_FOREIGN_SLIP_ITEM_ID)
		WHERE
			FI.DELETE_FLAG = '0'
		AND
			FI.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		ORDER BY
			 FI.SYS_FOREIGN_SLIP_ITEM_ID
<!-- 	↓kind品番順なくなりました -->
<!-- 			FI.ITEM_CODE -->
	</sql-template>

	<sql-template id="INS_FOREIGN_ORDER_SLIP">
		INSERT INTO
			FOREIGN_SLIP(
				SYS_FOREIGN_SLIP_ID,
				SYS_SUPPLIER_ID,
				INVOICE_NO,
				PO_NO,
				ORDER_STATUS,
				PERSON_IN_CHARGE,
				CORRECTION_FLAG,
				REGIST_DATE,
				ORDER_DATE,
				DELIVERY_DATE1,
				DELIVERY_DATE2,
				PAYMENT_DATE1,
				PAYMENT_DATE2,
				SUB_TOTAL,
				OTHER_EXPENSES,
				DISCOUNT,
				TOTAL,
				PAYMENT1,
				PAYMENT2,
				MEMO,
				PAYMENT_TERMS1,
				PAYMENT_TERMS2,
				LEAD_TIME,
				TRANSFER_REASON,
				DELIVERY_DATE1_OVER_FLAG,
				DELIVERY_DATE2_OVER_FLAG,
				DELETE_FLAG,
				CREATE_DATE,
				CREATE_USER_ID,
				UPDATE_DATE,
				UPDATE_USER_ID)
		VALUES(
			${sysForeignSlipId}
			,${sysSupplierId}
			,${invoiceNo}
			,${poNo}
			,${orderStatus}
			,${personInCharge}
			,${correctionFlag}
			,${registDate}
			,${orderDate}
			,${deliveryDate1}
			,${deliveryDate2}
			,${paymentDate1}
			,${paymentDate2}
			,${subTotal}
			,${otherExpenses}
			,${discount}
			,${total}
			,${payment1}
			,${payment2}
			,${memo}
			,${paymentTerms1}
			,${paymentTerms2}
			,${leadTime}
			,${transferReason}
			,${deliveryDate1OverFlag}
			,${deliveryDate2OverFlag}
			,'0'
			,current_timestamp
			,${updateUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>
	<sql-template id="INS_FOREIGN_ORDER_ITEM">
		INSERT INTO
			FOREIGN_ITEM(
				SYS_FOREIGN_SLIP_ID,
				SYS_FOREIGN_SLIP_ITEM_ID,
				SYS_ITEM_ID,
				SYS_SUPPLIER_ID,
				ITEM_CODE,
				FACTORY_ITEM_CODE,
				FOREIGN_ITEM_NM,
				ITEM_NM,
				ORDER_NUM,
				UNIT_PRICE,
				DELETE_FLAG,
				UPDATE_DATE,
				UPDATE_USER_ID,
				CREATE_DATE,
				CREATE_USER_ID)
		VALUES(
			${sysForeignSlipId}
			,${sysForeignSlipItemId}
			,${sysItemId}
			,${sysSupplierId}
			,${itemCode}
			,${factoryItemCode}
			,${foreignItemNm}
			,${itemNm}
			,${orderNum}
			,${unitPrice}
			,'0'
			,current_timestamp
			,${updateUserId}
			,current_timestamp
			,${updateUserId}
			)
	</sql-template>

	<sql-template id="INS_FOREIGN_ORDER_SLIP_ARRIVAL">
		INSERT INTO
			ARRIVAL_SCHEDULE(
				SYS_ARRIVAL_SCHEDULE_ID,
				SYS_FOREIGN_SLIP_ID,
				ARRIVAL_SCHEDULE_DATE,
				DELETE_FLAG,
				UPDATE_DATE,
				UPDATE_USER_ID,
				CREATE_DATE,
				CREATE_USER_ID)
		VALUES(
			${sysArrivalScheduleId}
			,${sysForeignSlipId}
			,${arrivalScheduleDate}
			,'0'
			,current_Timestamp
			,${updateUserId}
			,current_timestamp
			,${updateUserId}
			)
	</sql-template>

	<sql-template id="INS_FOREIGN_ARRIVAL_SCHEDULE">
		INSERT INTO
			ARRIVAL_SCHEDULE(
			SYS_ARRIVAL_SCHEDULE_ID
			,SYS_FOREIGN_SLIP_ID
			,SYS_FOREIGN_SLIP_ITEM_ID
			,SYS_ITEM_ID
			,ARRIVAL_SCHEDULE_DATE
			,VAGUE_ARRIVAL_SCHEDULE
			,ARRIVAL_NUM
			,ORDER_STATUS
			,ITEM_ORDER_DATE
			,ARRIVAL_FLAG
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES(
			${sysArrivalScheduleId}
			,${sysForeignSlipId}
			,${sysForeignSlipItemId}
			,${sysItemId}
			,${arrivalScheduleDate}
			,${vagueArrivalSchedule}
			,${arrivalNum}
			,${orderStatus}
			,${orderDate}
			,'0'
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="UPD_FOREIGN_ORDER_SLIP">
		UPDATE
			FOREIGN_SLIP
		SET
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			,SYS_SUPPLIER_ID = ${sysSupplierId}
			,INVOICE_NO = ${invoiceNo}
			,PO_NO = ${poNo}
			,ORDER_STATUS = ${orderStatus}
			,PERSON_IN_CHARGE = ${personInCharge}
			,CORRECTION_FLAG = ${correctionFlag}
			,REGIST_DATE = ${registDate}
			,ORDER_DATE = ${orderDate}
			,DELIVERY_DATE1 = ${deliveryDate1}
			,DELIVERY_DATE2 = ${deliveryDate2}
			,PAYMENT_DATE1 = ${paymentDate1}
			,PAYMENT_DATE2 = ${paymentDate2}
			,SUB_TOTAL = ${subTotal}
			,OTHER_EXPENSES = ${otherExpenses}
			,DISCOUNT = ${discount}
			,TOTAL = ${total}
			,PAYMENT1 = ${payment1}
			,PAYMENT2 = ${payment2}
			,MEMO = ${memo}
			,TRANSFER_REASON = ${transferReason}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,PAYMENT_TERMS1 = ${paymentTerms1}
			,PAYMENT_TERMS2 = ${paymentTerms2}
			,LEAD_TIME = ${leadTime}
			,DELIVERY_DATE1_OVER_FLAG = ${deliveryDate1OverFlag}
			,DELIVERY_DATE2_OVER_FLAG = ${deliveryDate2OverFlag}
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_ITEM_ORDER_POOL_FLAG">
		UPDATE
			MST_ITEM
		SET
			ORDER_POOL_FLG = '0',
			ORDER_NUM = MINIMUM_ORDER_QUANTITY
		WHERE
			ORDER_POOL_FLG = '1'
		AND
			SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPD_FOREIGN_ORDER_SLIP_ARRIVAL">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ITEM_ID = ${sysItemId}
	</sql-template>
	<sql-template id="UPD_FOREIGN_ORDER_ITEM">
		UPDATE
			FOREIGN_ITEM
		SET
			SYS_SUPPLIER_ID = ${sysSupplierId}
			,ITEM_CODE = ${itemCode}
			,FACTORY_ITEM_CODE = ${factoryItemCode}
			,ITEM_NM = ${itemNm}
			,FOREIGN_ITEM_NM = ${foreignItemNm}
<!-- 			,ORDER_NUM = ${orderNum} -->
			,UNIT_PRICE = ${unitPrice}
<!-- 			,ARRIVAL_DATE = ${arrivalDate} -->
<!-- 			,ARRIVAL_FLAG = '0' -->
			,DELETE_FLAG = '0'
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
	</sql-template>

	<sql-template id="UPD_FOREIGN_ORDER_ITEM_ARRIVAL">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			ARRIVAL_NUM = ${arrivalNum}
			<if-not-empty varName="sysForeignSlipId">
				,ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			</if-not-empty>
			<if-equals value="1" varName="arrivalFlag">
				,ARRIVAL_FLAG = ${arrivalFlag}
			</if-equals>
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ITEM_ID = ${sysItemId}
		AND
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_FOREIGN_ARRIVAL_SCHEDULE">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,ARRIVAL_NUM = ${arrivalNum}
			,ARRIVAL_FLAG =	${arrivalFlag}
			,DELETE_FLAG = '0'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ARRIVAL_SCHEDULE_ID = ${sysArrivalScheduleId}
	</sql-template>

	<sql-template id="DEL_FOREIGN_ORDER_ITEM">
		UPDATE
			FOREIGN_ITEM
		SET
			DELETE_FLAG = '1'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
			SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
	</sql-template>

	<sql-template id="SEL_ARRIVAL_SCHEDULE_LIST">
		SELECT
			SYS_ARRIVAl_SCHEDULE_ID
			,SYS_FOREIGN_SLIP_ID
		FROM
			ARRIVAL_SCHEDULE
		WHERE
			DELETE_FLAG = '0'
			AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_DEL_FOREIGN_ITEM_ARRIVAL">
		UPDATE
			ARRIVAL_SCHEDULE
		SET
			DELETE_FLAG = '1'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND
			ARRIVAL_FLAG = '0'
			<if-not-empty varName="sysItemId">
				<if-not-equals varName="sysItemId" value="0">
					AND
						SYS_ITEM_ID = ${sysItemId}
				</if-not-equals>
			</if-not-empty>
			<if-not-empty varName="sysForeignSlipItemId">
				<if-not-equals varName="sysForeignSlipItemId" value="0">
					AND
						SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
				</if-not-equals>
			</if-not-empty>
	</sql-template>

	<sql-template id="SEL_SEARCH_FOREIGN_ORDER_SLIP">
	</sql-template>

	<sql-template id="SEL_MAX_SYS_FOREIGN_SLIP_ID">
		SELECT
			COALESCE(MAX(SYS_FOREIGN_SLIP_ID),0)
		FROM
			FOREIGN_SLIP
	</sql-template>

	<sql-template id="SEL_MAX_PO_NO">
		SELECT
			COALESCE(MAX(SUBSTR(PO_NO,LENGTH(po_no)-4,6)),'0')
		FROM
			FOREIGN_SLIP
		WHERE
			SYS_SUPPLIER_ID = ${sysSupplierId}
	</sql-template>

	<sql-template id="SEL_MAX_SYS_FOREIGN_SLIP_ITEM_ID">
		SELECT
			COALESCE(MAX(SYS_FOREIGN_SLIP_ITEM_ID),0)
		FROM
			FOREIGN_ITEM
	</sql-template>

	<sql-template id="SEL_FOREIGN_ORDER_SLIP_ID">
		SELECT
			F_SLIP.SYS_FOREIGN_SLIP_ID
			,F_SLIP.SYS_SUPPLIER_ID
			,F_SLIP.INVOICE_NO
			,F_SLIP.PO_NO
			,F_SLIP.ORDER_DATE
			,F_SLIP.COMPANY_FACTORY_NM
			,F_SLIP.ORDER_STATUS
			,F_SLIP.PERSON_IN_CHARGE
			,F_SLIP.CORRECTION_FLAG
			,F_SLIP.REGIST_DATE
			,F_SLIP.DELIVERY_DATE1
			,F_SLIP.DELIVERY_DATE2
			,F_SLIP.PAYMENT_DATE1
			,F_SLIP.PAYMENT_DATE2
			,F_SLIP.SUB_TOTAL
			,F_SLIP.OTHER_EXPENSES
			,F_SLIP.TOTAL
			,F_SLIP.PAYMENT1
			,F_SLIP.PAYMENT2
			,F_SLIP.MEMO
			,F_SLIP.TRANSFER_REASON
			,F_SLIP.CREATE_DATE
			,F_SLIP.CREATE_USER_ID
			,F_SLIP.UPDATE_DATE
			,F_SLIP.UPDATE_USER_ID
			<if-equals value="1" varName="itemSearchFlag">
			,F_ITEM.ARRIVAL_SCHEDULE_DATE
			</if-equals>
		FROM
				(SELECT
					SLIP.SYS_FOREIGN_SLIP_ID
					,SLIP.SYS_SUPPLIER_ID
					,SLIP.INVOICE_NO
					,SLIP.PO_NO
					,SLIP.ORDER_STATUS
					,SLIP.ORDER_DATE
					,SLIP.PERSON_IN_CHARGE
					,SLIP.CORRECTION_FLAG
					,SLIP.REGIST_DATE
					,SLIP.DELIVERY_DATE1
					,SLIP.DELIVERY_DATE2
					,SLIP.PAYMENT_DATE1
					,SLIP.PAYMENT_DATE2
					,SLIP.SUB_TOTAL
					,SLIP.OTHER_EXPENSES
					,SLIP.TOTAL
					,SLIP.PAYMENT1
					,SLIP.PAYMENT2
					,SLIP.MEMO
					,SLIP.TRANSFER_REASON
					,SLIP.CREATE_DATE
					,SLIP.CREATE_USER_ID
					,SLIP.UPDATE_DATE
					,SLIP.UPDATE_USER_ID
					,MS.COMPANY_FACTORY_NM
					FROM
						FOREIGN_SLIP SLIP
						INNER JOIN MST_SUPPLIER MS
						ON (MS.SYS_SUPPLIER_ID = SLIP.SYS_SUPPLIER_ID)
					WHERE
						SLIP.DELETE_FLAG = '0'
						<if-not-null varName="sysForeignSlipId">
						<if-not-equals value="0" varName="sysForeignSlipId">
							AND SLIP.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
						</if-not-equals>
						</if-not-null>
						<if-not-empty varName="invoiceNo">
							AND SLIP.INVOICE_NO LIKE ${invoiceNo}
						</if-not-empty>
						<if-not-empty varName="poNo">
							AND SLIP.PO_NO ILIKE ${poNo}
						</if-not-empty>
						<if-not-empty varName="companyFactoryNm">
							AND MS.COMPANY_FACTORY_NM ILIKE ${companyFactoryNm}
						</if-not-empty>
						<if-not-empty varName="orderDateFrom">
							AND SLIP.ORDER_DATE &gt;= ${orderDateFrom}
						</if-not-empty>
						<if-not-empty varName="orderDateTo">
							AND SLIP.ORDER_DATE &lt;= ${orderDateTo}
						</if-not-empty>
						<if-not-empty varName="orderStatus">
							AND SLIP.ORDER_STATUS = ${orderStatus}
						</if-not-empty>
						<if-equals value="1" varName="paymentStatus1Flg">
							AND SLIP.PAYMENT_DATE1 = ''
						</if-equals>
						<if-equals value="2" varName="paymentStatus1Flg">
							AND SLIP.PAYMENT_DATE1 != ''
						</if-equals>
						<if-equals value="1" varName="paymentStatus2Flg">
							AND SLIP.PAYMENT_DATE2 = ''
						</if-equals>
						<if-equals value="2" varName="paymentStatus2Flg">
							AND SLIP.PAYMENT_DATE2 != ''
						</if-equals>
						<if-equals value="1" varName="deliveryDateOverFlg1">
							AND SLIP.DELIVERY_DATE1_OVER_FLAG = '1'
							AND SLIP.DELIVERY_DATE1 &lt;=
								to_char(current_timestamp + '-1 days','yyyy/mm/dd')
							AND SLIP.DELIVERY_DATE1 != ''
						</if-equals>
						<if-equals value="1" varName="deliveryDateOverFlg2">
							AND SLIP.DELIVERY_DATE2_OVER_FLAG = '1'
							AND SLIP.DELIVERY_DATE2 &lt;=
								to_char(current_timestamp + '-1 days','yyyy/mm/dd')
							AND SLIP.DELIVERY_DATE2 != ''
						</if-equals>
				) AS F_SLIP
			<if-equals value="1" varName="itemSearchFlag">
			INNER JOIN
				(SELECT
					ITEM.SYS_FOREIGN_SLIP_ID
					,MIN(A_SCHEDULE.ARRIVAL_SCHEDULE_DATE) AS ARRIVAL_SCHEDULE_DATE
				FROM
					FOREIGN_ITEM ITEM
					INNER JOIN
						 (SELECT
							A_SCHEDULE.SYS_FOREIGN_SLIP_ID
							,A_SCHEDULE.ARRIVAL_SCHEDULE_DATE
							,COALESCE(DATA.CNT, 0) AS CNTNIS
							,COALESCE(DATB.CNT, 0) AS CNTIS
						FROM
							(SELECT DISTINCT SYS_FOREIGN_SLIP_ID
								,ARRIVAL_SCHEDULE_DATE
								,VAGUE_ARRIVAL_SCHEDULE
							FROM ARRIVAL_SCHEDULE) A_SCHEDULE
							LEFT JOIN
								(SELECT
									SYS_FOREIGN_SLIP_ID
<!-- 									COUNT(*)でNULLを含む行数を取得することが出来る -->
									,COUNT(*) as CNT
								FROM ARRIVAL_SCHEDULE
								WHERE DELETE_FLAG = '0'
								AND ARRIVAL_FLAG = '0'
								GROUP BY SYS_FOREIGN_SLIP_ID
<!-- 								where条件に合致しなかったidは、0件として数えるための条件をHAVINGに設定 -->
								HAVING COUNT(*) >= 0) AS DATA
							ON (A_SCHEDULE.SYS_FOREIGN_SLIP_ID = DATA.SYS_FOREIGN_SLIP_ID)
							LEFT JOIN
								(SELECT
									SYS_FOREIGN_SLIP_ID
									,COUNT(*) as CNT
								FROM ARRIVAL_SCHEDULE
								WHERE DELETE_FLAG = '0'
								AND ARRIVAL_FLAG = '1'
								GROUP BY SYS_FOREIGN_SLIP_ID
								HAVING COUNT(*) >= 0) AS DATB
							ON (A_SCHEDULE.SYS_FOREIGN_SLIP_ID = DATB.SYS_FOREIGN_SLIP_ID)
						WHERE
							1 = 1
							<if-not-empty varName="arrivalScheduleDateFrom"> -->
								AND ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
							</if-not-empty>
							<if-not-empty varName="arrivalScheduleDateTo">
								AND ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
					 		</if-not-empty>
					 		<if-not-empty varName="vagueArrivalSchedule">
								AND VAGUE_ARRIVAL_SCHEDULE LIKE ${vagueArrivalSchedule}
							</if-not-empty>
					 	) AS A_SCHEDULE
					ON (ITEM.SYS_FOREIGN_SLIP_ID = A_SCHEDULE.SYS_FOREIGN_SLIP_ID)

				WHERE
					DELETE_FLAG = '0'
					<if-not-empty varName="itemCode">
						AND ITEM_CODE LIKE ${itemCode}
					</if-not-empty>
					<if-not-empty varName="factoryItemCode">
						AND FACTORY_ITEM_CODE ILIKE ${factoryItemCode}
					</if-not-empty>
					<if-not-empty varName="itemNm">
						AND ITEM_NM ILIKE ${itemNm}
					</if-not-empty>
					<if-equals value="1" varName="arriveStatusFlg">
						AND CNTNIS &gt; 0
						AND CNTIS = 0
					</if-equals>
					<if-equals value="2" varName="arriveStatusFlg">
						AND CNTNIS &gt; 0
						AND CNTIS &gt; 0
					</if-equals>
					<if-equals value="3" varName="arriveStatusFlg">
						AND CNTNIS = 0
						AND CNTIS &gt; 0
					</if-equals>
				GROUP BY ITEM.SYS_FOREIGN_SLIP_ID
				) AS F_ITEM
			ON (F_SLIP.SYS_FOREIGN_SLIP_ID = F_ITEM.SYS_FOREIGN_SLIP_ID)
			</if-equals>
		WHERE
			1=1
		ORDER BY
		1 = 1
		<!-- ソート条件 -->
		<!-- 注文日 -->
		<if-equals value="1" varName="sortFirst">
			,F_SLIP.ORDER_DATE
		</if-equals>
		<!-- 入荷日 -->
		<if-equals value="2" varName="sortFirst">
			,F_ITEM.ARRIVAL_SCHEDULE_DATE
		</if-equals>
		<!-- 工場名 -->
		<if-equals value="3" varName="sortFirst">
			,F_SLIP.COMPANY_FACTORY_NM
		</if-equals>
		<!-- ステータス -->
		<if-equals value="4" varName="sortFirst">
			,F_SLIP.ORDER_STATUS
		</if-equals>
		<!-- インボイスNo. -->
		<if-equals value="5" varName="sortFirst">
			,F_SLIP.INVOICE_NO
		</if-equals>
		<!-- PO No. -->
		<if-equals value="6" varName="sortFirst">
			,F_SLIP.PO_NO
		</if-equals>
		<!-- 昇順・降順 -->
		<if-equals value="1" varName="sortFirstSub">ASC</if-equals>
		<if-equals value="2" varName="sortFirstSub">DESC</if-equals>
	</sql-template>

	<sql-template id="SEL_FOREIGN_SLIP_SEARCH">
		SELECT
			SYS_FOREIGN_SLIP_ID
			,SYS_SUPPLIER_ID
			,INVOICE_NO
			,PO_NO
			,ORDER_STATUS
			,PERSON_IN_CHARGE
			,CORRECTION_FLAG
			,REGIST_DATE
			,ORDER_DATE
			,DELIVERY_DATE1
			,DELIVERY_DATE2
			,PAYMENT_DATE1
			,PAYMENT_DATE2
			,SUB_TOTAL
			,OTHER_EXPENSES
			,DISCOUNT
			,TOTAL
			,PAYMENT1
			,PAYMENT2
			,MEMO
			,TRANSFER_REASON
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,PAYMENT_TERMS1
			,PAYMENT_TERMS2
			,LEAD_TIME
			,DELIVERY_DATE1_OVER_FLAG
			,DELIVERY_DATE2_OVER_FLAG
		FROM
			FOREIGN_SLIP
		WHERE
			DELETE_FLAG = '0'
		<if-not-null varName="sysForeignSlipId">
			<if-not-equals value="0" varName="sysForeignSlipId">
				AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			</if-not-equals>
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_FOREIGN_ORDER_SLIP">
		SELECT
			FS.SYS_FOREIGN_SLIP_ID
			,FS.SYS_SUPPLIER_ID
			,FS.INVOICE_NO
			,FS.PO_NO
			,FS.ORDER_STATUS
			,FS.ORDER_DATE
			,FS.DELIVERY_DATE1
			,FS.DELIVERY_DATE2
			,FS.PAYMENT_DATE1
			,FS.PAYMENT_DATE2
			,MS.COMPANY_FACTORY_NM
		FROM
			FOREIGN_SLIP FS

			LEFT JOIN MST_SUPPLIER MS
			ON (FS.SYS_SUPPLIER_ID = MS.SYS_SUPPLIER_ID)
		WHERE
			FS.DELETE_FLAG = '0'
			AND MS.DELETE_FLAG = '0'
		<if-not-null varName="sysForeignSlipId">
			<if-not-equals value="0" varName="sysForeignSlipId">
				AND FS.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			</if-not-equals>
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_FOREIGN_ITEM_LIST">
		SELECT DISTINCT
			ITEM.SYS_FOREIGN_SLIP_ITEM_ID
			,ITEM.SYS_FOREIGN_SLIP_ID
			,ITEM.SYS_ITEM_ID
			,ITEM.ITEM_CODE
			,ITEM.FACTORY_ITEM_CODE
			,ITEM.ITEM_NM
			,ITEM.ORDER_NUM
			,COALESCE(ITEM.TOTAL_STOCK_NUM, 0) AS TOTAL_STOCK_NUM
			,COALESCE(ITEM.TEMPORARY_STOCK_NUM, 0) AS TEMPORARY_STOCK_NUM
			,ARS.ARRIVAL_SCHEDULE_DATE
		FROM
			(SELECT DISTINCT
				FI.SYS_FOREIGN_SLIP_ITEM_ID
				,FI.SYS_FOREIGN_SLIP_ID
				,FI.SYS_ITEM_ID
				,FI.ITEM_CODE
				,FI.FACTORY_ITEM_CODE
				,FI.ITEM_NM
				,FI.ORDER_NUM
				,MI.TOTAL_STOCK_NUM
				,MI.TEMPORARY_STOCK_NUM
			FROM
				FOREIGN_ITEM FI inner join MST_ITEM MI
				on FI.SYS_ITEM_ID = MI.SYS_ITEM_ID

			WHERE
				FI.DELETE_FLAG = '0'
				<if-not-empty varName="itemCode">
					AND ITEM_CODE LIKE ${itemCode}
				</if-not-empty>
				<if-not-empty varName="factoryItemCode">
					AND FACTORY_ITEM_CODE LIKE ${factoryItemCode}
				</if-not-empty>
				<if-not-empty varName="itemNm">
					AND ITEM_NM LIKE ${itemNm}
				</if-not-empty>
			) AS ITEM
				LEFT JOIN
				(SELECT
					SYS_FOREIGN_SLIP_ID
					,SYS_FOREIGN_SLIP_ITEM_ID
					,SYS_ITEM_ID
					,ARRIVAL_SCHEDULE_DATE
					,VAGUE_ARRIVAL_SCHEDULE
				FROM
					ARRIVAL_SCHEDULE
				WHERE
					DELETE_FLAG = '0'
					AND
					SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
					AND SYS_ARRIVAL_SCHEDULE_ID in (SELECT MIN(SYS_ARRIVAL_SCHEDULE_ID)
							FROM
								ARRIVAL_SCHEDULE
							WHERE
								DELETE_FLAG = '0'
								AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
							GROUP BY SYS_FOREIGN_SLIP_ITEM_ID)
				) AS ARS
				ON (ITEM.SYS_FOREIGN_SLIP_ITEM_ID = ARS.SYS_FOREIGN_SLIP_ITEM_ID)
		WHERE
			ITEM.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			<if-not-empty varName="arrivalScheduleDateFrom">
				AND ARS.ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
			</if-not-empty>
			<if-not-empty varName="arrivalScheduleDateTo">
				AND ARS.ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
			</if-not-empty>
			<if-not-empty varName="vagueArrivalSchedule">
				AND ARS.VAGUE_ARRIVAL_SCHEDULE LIKE ${vagueArrivalSchedule}
			</if-not-empty>

		ORDER BY ITEM.SYS_ITEM_ID
	</sql-template>

	<sql-template id="SEL_FOREIGN_ARRIVAL_SCHEDULE_LIST">
		SELECT ARRIVAL_SCHEDULE_DATE
			,ARS.SYS_ITEM_ID
			,COALESCE(ARS_SUB.ARRIVAL_NUM, 0) AS ARRIVAL_NUM
			,ARRIVAl_FLAG
		FROM
			ARRIVAl_SCHEDULE ARS
			LEFT JOIN
				(SELECT
					SUM(ARRIVAL_NUM) ARRIVAL_NUM
					,SYS_FOREIGN_SLIP_ID
				FROM
					ARRIVAl_SCHEDULE
				WHERE
					ARRIVAL_FLAG = '1'
					AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
					AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
				GROUP BY
					SYS_FOREIGN_SLIP_ID
				) ARS_SUB
			ON (ARS.SYS_FOREIGN_SLIP_ID = ARS_SUB.SYS_FOREIGN_SLIP_ID)
		WHERE
			ARS.DELETE_FLAG = '0'
			AND	ARS.SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
			AND ARS.SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			AND UPDATE_DATE in (SELECT
							MAX(UPDATE_DATE)
						FROM
							ARRIVAl_SCHEDULE
						WHERE
							SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
							AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
						GROUP BY
							SYS_FOREIGN_SLIP_ID)
	</sql-template>

<!-- 	<sql-template id="SEL_FOREIGN_ORDER_SLIP_DETAIL"> -->
<!-- 		SELECT -->
<!-- 			SYS_FOREIGN_SLIP_ID -->
<!-- 			,SYS_SUPPLIER_ID -->
<!-- 			,INVOICE_NO -->
<!-- 			,PO_NO -->
<!-- 			,ORDER_STATUS -->
<!-- 			,PERSON_IN_CHARGE -->
<!-- 			,CORRECTION_FLAG -->
<!-- 			,REGIST_DATE -->
<!-- 			,ORDER_DATE -->
<!-- 			,DELIVERY_DATE1 -->
<!-- 			,DELIVERY_DATE2 -->
<!-- 			,PAYMENT_DATE1 -->
<!-- 			,PAYMENT_DATE2 -->
<!-- 			,ARRIVAL_SCHEDULE_DATE -->
<!-- 			,VAGUE_ARRIVAL_SCHEDULE -->
<!-- 			,SUB_TOTAL -->
<!-- 			,OTHER_EXPENSES -->
<!-- 			,TOTAL -->
<!-- 			,PAYMENT1 -->
<!-- 			,PAYMENT2 -->
<!-- 			,MEMO -->
<!-- 			,TRANSFER_REASON -->
<!-- 			,CREATE_DATE -->
<!-- 			,CREATE_USER_ID -->
<!-- 			,UPDATE_DATE -->
<!-- 			,UPDATE_USER_ID -->
<!-- 		FROM -->
<!-- 			FOREIGN_SLIP -->
<!-- 		WHERE -->
<!-- 			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId} -->
<!-- 	</sql-template> -->


	<sql-template id="SEL_SEARCH_SUPPLIER_DETAIL">
		SELECT
			MS.SYS_SUPPLIER_ID
			,MS.SUPPLIER_NO
			,MS.COMPANY_FACTORY_NM
			,MS.PO_NO_INITIAL
			,MS.COUNTRY
			,MS.ADDRESS
			,MS.TEL
			,MS.FAX
			,MS.CONTACT_PERSON_NM
			,MS.MAIL_ADDRESS
			,MS.TRADE_TERMS
			,MS.CURRENCY_ID
			,MS.BANK_NM
			,MS.BRANCH_NM
			,MS.BANK_ADDRESS
			,MS.SWIFT_CODE
			,MS.ACCOUNT_NO
			,MS.SUPPLIER_REMARKS
			,MS.DELETE_FLAG
			,MS.UPDATE_DATE
			,MS.UPDATE_USER_ID
			,CR.CURRENCY_NM
			,CR.RATE
			,CR.CURRENCY_TYPE

		FROM
			MST_SUPPLIER MS
			LEFT JOIN CURRENCY_LEDGER CR
			ON (MS.CURRENCY_ID = CR.CURRENCY_ID)
		WHERE
			MS.DELETE_FLAG = '0'

		AND MS.SYS_SUPPLIER_ID = ${sysSupplierId}

		ORDER BY
			MS.SYS_SUPPLIER_ID ASC
	</sql-template>

	<sql-template id="SEL_PO_NO_INITIAL">
		SELECT
			PO_NO_INITIAL
		FROM
			MST_SUPPLIER
		WHERE
			SYS_SUPPLIER_ID = ${sysSupplierId}
	</sql-template>

	<sql-template id="UPD_DEL_FOREIGN_SLIP">
		UPDATE FOREIGN_SLIP SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_DEL_FOREIGN_ITEM">
		UPDATE FOREIGN_ITEM SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		<if-not-empty varName="deleteFlag">
			,DELETE_FLAG = ${deleteFlag}
		</if-not-empty>
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
		AND
			DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="UPDATE_FOREIGN_ORDER_STATUS">
		UPDATE
			FOREIGN_SLIP
		SET
			ORDER_STATUS = ${orderStatus}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="UPD_ARRIVAL_SCHEDULE_ORDER_STATUS">
		UPDATE
			ARRIVAl_SCHEDULE
		SET
			ORDER_STATUS = ${orderStatus}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			AND SYS_ITEM_ID = ${sysItemId}
	</sql-template>

	<sql-template id="UPDATE_FOREIGN_SLIP_PAYMENT">
		UPDATE FOREIGN_SLIP SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		<if-not-null varName="paymentDate1">
			,PAYMENT_DATE1 = ${paymentDate1}
		</if-not-null>
		<if-not-null varName="paymentDate2">
			,PAYMENT_DATE2 = ${paymentDate2}
		</if-not-null>
		WHERE
			SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
	</sql-template>

	<sql-template id="SEL_ARRIVAL_SCHEDULE_ID">
		SELECT
			SYS_ARRIVAl_SCHEDULE_ID
			,SYS_FOREIGN_SLIP_ID
			,SYS_FOREIGN_SLIP_ITEM_ID
			,SYS_ITEM_ID
		FROM
			ARRIVAL_SCHEDULE
		WHERE
			DELETE_FLAG = '0'
			AND SYS_FOREIGN_SLIP_ID = ${sysForeignSlipId}
			AND SYS_FOREIGN_SLIP_ITEM_ID = ${sysForeignSlipItemId}
			AND ARRIVAL_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_SYS_WAREHOUSE_ID">
		SELECT
			SYS_WAREHOUSE_STOCK_ID
			,SYS_WAREHOUSE_ID
		FROM
			WAREHOUSE_STOCK
		WHERE
			DELETE_FLAG = '0'
			AND SYS_ITEM_ID = ${sysItemId}
			AND PRIORITY = '1'
	</sql-template>

	<sql-template id="SEL_DOMESTIC_ORDER_ITEM_ID">
		SELECT
		DS.SYS_DOMESTIC_SLIP_ID
		,TO_CHAR(DS.PURCHASE_ORDER_NO, 'FM000000') AS PURCHASE_ORDER_NO
		,DS.ITEM_ORDER_DATE
		,DS.MALL
		,DS.ORDER_NO
		,DS.NOTE_TURN
		,DS.SYS_WAREHOUSE_ID
		,DS.SENDER_REMARKS
		,DS.DELETE_FLAG
		,DS.ORDER_SLIP_DATE
		,DS.PRINT_CHECK_FLAG
		,DI.SYS_DOMESTIC_SLIP_ID
		,DI.SYS_DOMESTIC_ITEM_ID
		,DI.MANAGEMENT_CODE
		,DI.ORDER_NUM
		,DI.WHOLSESALER_ID
		,DI.WHOLSESALER_NM
		,DI.ORDER_REMARKS
		,DI.LIST_REMARKS
		,DI.ARRIVAL_SCHEDULE_DATE
		,DI.ARRIVAL_DATE
		,DI.MAKER_ID
		,DI.MAKER_CODE
		,DI.POSTAGE
		,DI.ITEM_NM
		,DI.SEREAL_NUM
		,DI.STATUS
		,DI.STOCK_CHARGE
		,DI.ORDER_CHARGE
		,DI.PURCHASING_COST
		,DI.LIST_PRICE
		,DI.PERSON_IN_CHARGE
		,DI.CORRESPONDENCE
		,DI.CHARGE_DATE
		,DI.COST_COMF_FLAG
		,DI.DELETE_FLAG
		,DI.UPDATE_DATE
		,DI.UPDATE_USER_ID
		,DI.CREATE_DATE
		,DI.CREATE_USER_ID
		,DI.ITEM_TYPE
		,MM.MAKER_NM

		FROM
		DOMESTIC_SLIP DS
		LEFT JOIN DOMESTIC_ITEM DI
		ON (DS.SYS_DOMESTIC_SLIP_ID = DI.SYS_DOMESTIC_SLIP_ID)
		LEFT JOIN
		MST_MAKER MM
		ON (DI.MAKER_ID = MM.SYS_MAKER_ID)
		WHERE
		DS.DELETE_FLAG = '0'
		AND DI.DELETE_FLAG = '0'
		AND DI.ITEM_TYPE != '2'
		<if-not-empty varName="orderCreatDateFrom">
			AND DS.ORDER_SLIP_DATE &gt;= ${orderCreatDateFrom}
		</if-not-empty>

		<if-not-empty varName="orderCreatDateTo">
			AND DS.ORDER_SLIP_DATE != ''
			AND DS.ORDER_SLIP_DATE IS NOT NULL
			AND DS.ORDER_SLIP_DATE &lt;= ${orderCreatDateTo}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateFrom">
			AND DI.ARRIVAL_SCHEDULE_DATE &gt;= ${arrivalScheduleDateFrom}
		</if-not-empty>

		<if-not-empty varName="arrivalScheduleDateTo">
			AND DI.ARRIVAL_SCHEDULE_DATE != ''
			AND DI.ARRIVAL_SCHEDULE_DATE IS NOT NULL
			AND DI.ARRIVAL_SCHEDULE_DATE &lt;= ${arrivalScheduleDateTo}
		</if-not-empty>
		<if-not-empty varName="sysMakerId">
			<if-not-equals value="0" varName="sysMakerId">
				AND DI.MAKER_ID = ${sysMakerId}
			</if-not-equals>
		</if-not-empty>

		<if-not-empty varName="itemNm">
			AND DI.ITEM_NM LIKE ${itemNm}
		</if-not-empty>
		<if-not-empty varName="orderNo">
			AND DS.ORDER_NO LIKE ${orderNo}
		</if-not-empty>

		<if-not-empty varName="makerCode">
			AND DI.MAKER_CODE LIKE ${makerCode}
		</if-not-empty>

		<if-not-equals value="0" varName="orderNum">
			<if-equals value="1" varName="numberOrderType">
				AND DI.ORDER_NUM = ${orderNum}
			</if-equals>
			<if-equals value="2" varName="numberOrderType">
				AND DI.ORDER_NUM &gt;= ${orderNum}
			</if-equals>
			<if-equals value="3" varName="numberOrderType">
				AND DI.ORDER_NUM &lt;= ${orderNum}
			</if-equals>
		</if-not-equals>
		<if-not-empty varName="serealNum">
			AND DI.SEREAL_NUM LIKE ${serealNum}
		</if-not-empty>
		<if-not-empty varName="status">
			AND DI.STATUS = ${status}
		</if-not-empty>
		<if-not-empty varName="stockCharge">
			AND DI.STOCK_CHARGE LIKE ${stockCharge}
		</if-not-empty>
		<if-not-empty varName="orderCharge">
			AND DI.ORDER_CHARGE LIKE ${orderCharge}
		</if-not-empty>
		<if-not-null varName="purchasingCostFrom">
			AND DI.PURCHASING_COST &gt;= ${purchasingCostFrom}
		</if-not-null>
		<if-not-null varName="purchasingCostTo">
			AND DI.PURCHASING_COST &lt;= ${purchasingCostTo}
		</if-not-null>

		<if-not-empty varName="personCharge">
			AND DI.PERSON_IN_CHARGE LIKE ${personCharge}
		</if-not-empty>

		<if-not-empty varName="correspondence">
			AND DI.CORRESPONDENCE = ${correspondence}
		</if-not-empty>

		<if-not-empty varName="chargeDateFrom">
			AND DI.CHARGE_DATE &gt;= ${chargeDateFrom}
		</if-not-empty>
		
		<if-not-empty varName="chargeDateFrom">
			AND DI.CHARGE_DATE &gt;= ${chargeDateFrom}
		</if-not-empty>
		
		<if-not-empty varName="sysCorporationId">
			<if-not-equals value="0" varName="sysCorporationId">
			AND DS.SYS_CORPORATION_ID= ${sysCorporationId}
			</if-not-equals>
		</if-not-empty>

		<if-not-empty varName="deliveryType">
			<if-equals value="0" varName="deliveryType">
				AND DS.SYS_WAREHOUSE_ID != '99'
			</if-equals>
			<if-equals value="1" varName="deliveryType">
				AND DS.SYS_WAREHOUSE_ID = '99'
			</if-equals>
		</if-not-empty>

		<if-not-equals value="2" varName="printType">
			<if-equals value="0" varName="printType">
				AND DS.PRINT_CHECK_FLAG = '0'
			</if-equals>
			<if-equals value="1" varName="printType">
				AND DS.PRINT_CHECK_FLAG = '1'
			</if-equals>
		</if-not-equals>


		<if-not-empty varName="sortFirst">
			ORDER BY
			<if-equals value="1" varName="sortFirst">
				DI.ARRIVAL_SCHEDULE_DATE
			</if-equals>
			<if-equals value="2" varName="sortFirst">
				DS.ORDER_SLIP_DATE
			</if-equals>
			<if-equals value="3" varName="sortFirst">
				DS.PURCHASE_ORDER_NO
			</if-equals>
			<if-equals value="4" varName="sortFirst">
				MM.MAKER_NM
			</if-equals>
			<if-equals value="5" varName="sortFirst">
				DI.WHOLSESALER_NM
			</if-equals>
			<if-equals value="6" varName="sortFirst">
				DI.MAKER_CODE
			</if-equals>
			<if-equals value="7" varName="sortFirst">
				DI.SEREAL_NUM
			</if-equals>
			<if-equals value="8" varName="sortFirst">
				DI.ARRIVAL_DATE
			</if-equals>
			<if-equals value="9" varName="sortFirst">
				DI.ORDER_CHARGE
			</if-equals>


			<!-- 1昇順 -->
			<if-equals value="1" varName="sortFirstSub"> ASC</if-equals>
			<!-- 2降順 -->
			<if-equals value="2" varName="sortFirstSub"> DESC</if-equals>
		</if-not-empty>


	</sql-template>

	<sql-template id="SEL_DOMESTIC_ORDER_ITEM">
		SELECT
			DS.SYS_DOMESTIC_SLIP_ID
			,TO_CHAR(DS.PURCHASE_ORDER_NO, 'FM000000') AS PURCHASE_ORDER_NO
			,DS.ITEM_ORDER_DATE
			,DS.MALL
			,DS.ORDER_NO
			,DS.NOTE_TURN
			,DS.SYS_WAREHOUSE_ID
			,DS.SENDER_REMARKS
			,DS.DELETE_FLAG
			,DS.ORDER_SLIP_DATE
			,DS.PRINT_CHECK_FLAG
			,DW.WAREHOUSE_NM AS DELIVERY_NM
			,DI.SYS_DOMESTIC_SLIP_ID
			,DI.SYS_DOMESTIC_ITEM_ID
			,DI.MANAGEMENT_CODE
			,DI.ORDER_NUM
			,DI.WHOLSESALER_ID
			,DI.WHOLSESALER_NM
			,DI.ORDER_REMARKS
			,DI.LIST_REMARKS
			,DI.ARRIVAL_SCHEDULE_DATE
			,DI.ARRIVAL_DATE
			,DI.MAKER_ID
			,DI.MAKER_CODE
			,DI.POSTAGE
			,DI.ITEM_NM
			,DI.SEREAL_NUM
			,DI.STATUS
			,DI.STOCK_CHARGE
			,DI.ORDER_CHARGE
			,DI.PURCHASING_COST
			,DI.LIST_PRICE
			,DI.PERSON_IN_CHARGE
			,DI.CORRESPONDENCE
			,DI.CHARGE_DATE
			,DI.COST_COMF_FLAG
			,DI.DELETE_FLAG
			,DI.UPDATE_DATE
			,DI.UPDATE_USER_ID
			,DI.CREATE_DATE
			,DI.CREATE_USER_ID
			,DI.ITEM_TYPE
			,DI.SET_SYS_DOMESTIC_ITEM_ID
			,MM.MAKER_NM

		FROM
			DOMESTIC_SLIP DS
			LEFT JOIN
				DOMESTIC_ITEM DI
				ON (DS.SYS_DOMESTIC_SLIP_ID = DI.SYS_DOMESTIC_SLIP_ID)
			LEFT JOIN
				MST_MAKER MM
				ON (DI.MAKER_ID = MM.SYS_MAKER_ID)
			LEFT JOIN
				DOMESTIC_WAREHOUSE DW
				ON (DS.SYS_WAREHOUSE_ID = DW.SYS_WAREHOUSE_ID)
		WHERE
			DS.DELETE_FLAG = '0'
			AND DI.DELETE_FLAG = '0'
		<if-not-null varName="sysDomesticItemId">
			AND DI.SYS_DOMESTIC_ITEM_ID =
			${sysDomesticItemId}
		</if-not-null>
	</sql-template>

	<sql-template id="SEL_FOMR_DOMESTIC_ITEM">
		SELECT
			DI.SYS_DOMESTIC_SLIP_ID
			,DI.SYS_DOMESTIC_ITEM_ID
			,DI.MANAGEMENT_CODE
			,DI.ORDER_NUM
			,DI.WHOLSESALER_ID
			,DI.WHOLSESALER_NM
			,DI.ORDER_REMARKS
			,DI.LIST_REMARKS
			,DI.ARRIVAL_SCHEDULE_DATE
			,DI.ARRIVAL_DATE
			,DI.MAKER_ID
			,DI.MAKER_CODE
			,DI.POSTAGE
			,DI.ITEM_NM
			,DI.SEREAL_NUM
			,DI.STATUS
			,DI.STOCK_CHARGE
			,DI.ORDER_CHARGE
			,DI.PURCHASING_COST
			,DI.LIST_PRICE
			,DI.PERSON_IN_CHARGE
			,DI.CORRESPONDENCE
			,DI.CHARGE_DATE
			,DI.COST_COMF_FLAG
			,DI.DELETE_FLAG
			,DI.UPDATE_DATE
			,DI.UPDATE_USER_ID
			,DI.CREATE_DATE
			,DI.CREATE_USER_ID
			,DI.ITEM_TYPE
			,DI.SET_SYS_DOMESTIC_ITEM_ID
		FROM
			DOMESTIC_ITEM DI
		WHERE
			DI.SET_SYS_DOMESTIC_ITEM_ID = ${setSysDomesticItemId}
			AND DI.DELETE_FLAG = '0'
			AND DI.ITEM_TYPE = '2'
	</sql-template>

	<sql-template id="DELETE_ORDER_LIST_ITEM">
		UPDATE
		DOMESTIC_ITEM
		SET
		DELETE_FLAG = '1'
		,UPDATE_DATE = current_timestamp
		,UPDATE_USER_ID = ${updateUserId}
		,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
		SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
	</sql-template>

	<sql-template id="SEL_CNT_DELETE_SLIP">
		SELECT
			COUNT(SLIP.SYS_DOMESTIC_SLIP_ID) AS DELETE_CNT
		FROM
			(SELECT SYS_DOMESTIC_SLIP_ID,
				DELETE_FLAG
			FROM
				DOMESTIC_ITEM
			WHERE
				SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
				AND DELETE_FLAG = '0'
			) SLIP
	</sql-template>

	<sql-template id="DELETE_DOMESTIC_SLIP">
		UPDATE
			DOMESTIC_SLIP
		SET
			DELETE_FLAG = '1'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
			SYS_DOMESTIC_SLIP_ID = ${sysDomesticSlipId}
	</sql-template>

	<sql-template id="UPDATE_ORDER_LIST_ITEM">
		UPDATE
			DOMESTIC_ITEM
		SET
			ARRIVAL_SCHEDULE_DATE = ${arrivalScheduleDate}
			,ORDER_NUM = ${orderNum}
			,PURCHASING_COST = ${purchasingCost}
<!-- 			,POSTAGE = ${postage} -->
			,CORRESPONDENCE = ${correspondence}
			,LIST_REMARKS = ${listRemarks}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO,${historyInfo})
		WHERE
			SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
	</sql-template>

	<sql-template id="UPDATE_ORDER_LIST_STATUS">
		UPDATE
			DOMESTIC_ITEM
		SET
			STATUS = ${status}

			<if-equals value="2" varName="status">
				,STOCK_CHARGE = ''
				,ARRIVAL_DATE = ''
				,PERSON_IN_CHARGE = ''
				,COST_COMF_FLAG = '0'
				,CORRESPONDENCE = '1'
				,CHARGE_DATE = ''
			</if-equals>

			<if-equals value="3" varName="status">
				,STOCK_CHARGE = ''
				,ARRIVAL_DATE = ''
				,PERSON_IN_CHARGE = ''
				,COST_COMF_FLAG = '0'
				,CORRESPONDENCE = '1'
				,CHARGE_DATE = ''
			</if-equals>

			<if-equals value="4" varName="status">
				,STOCK_CHARGE = ${userNm}
				,ARRIVAL_DATE = ${arrivalDate}
				,PERSON_IN_CHARGE = ''
				,CHARGE_DATE = ''
				,COST_COMF_FLAG = '0'
				,CORRESPONDENCE = '1'
			</if-equals>

			<if-equals value="5" varName="status">
				,PERSON_IN_CHARGE = ${userNm}
				,COST_COMF_FLAG = '0'
				,CORRESPONDENCE = '2'
				,CHARGE_DATE = ${chargeDate}
			</if-equals>

			<if-equals value="6" varName="status">
				,COST_COMF_FLAG = '1'
			</if-equals>

			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
		WHERE
			SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
	</sql-template>

		<sql-template id="UPDATE_ORDER_PRINT_STATUS">
		UPDATE
			DOMESTIC_ITEM
		SET
			STATUS = ${status}
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
			,HISTORY_INFO = CONCAT(HISTORY_INFO, ${historyInfo})
			<if-equals value="2" varName="status">
				,SEREAL_NUM = ${serealNum}
			</if-equals>
		WHERE
			SYS_DOMESTIC_ITEM_ID = ${sysDomesticItemId}
		</sql-template>

	<sql-template id="SEL_MAX_UPDATE_DATA_ID">
		SELECT
			COALESCE(MAX(SYS_UPDATE_DATA_ID),0)
		FROM
			UPDATE_DATA_HISTORY
	</sql-template>

	<sql-template id="UPD_UPDATE_DATA_HISTORY">
		INSERT INTO UPDATE_DATA_HISTORY
			(SYS_UPDATE_DATA_ID
			,SYS_ITEM_ID
			,UPDATE_HISTORY
			,DELETE_FLAG
			,UPDATE_DATE
			,UPDATE_USER_ID
			,CREATE_DATE
			,CREATE_USER_ID)
		VALUES
			(${sysUpdateDataId}
			,${sysItemId}
			,${updateHistory}
			,'0'
			,current_timestamp
			,${updateUserId}
			,current_timestamp
			,${createUserId})
	</sql-template>
	<sql-template id="SEL_MST_ITEM_SYS_ITEM_ID">
		SELECT DISTINCT
			SYS_ITEM_ID
		FROM
			MST_ITEM
		WHERE
			DELETE_FLAG = '0'
		AND
			ITEM_CODE = ${itemCode}
	</sql-template>

	<sql-template id="SEL_MST_ITEM_ITEM_CODE">
		SELECT
			ITEM_CODE
		FROM
			MST_ITEM MI
		WHERE
			DELETE_FLAG = '0'
		AND
			SYS_ITEM_ID = ${formSysItemId}

	</sql-template>

	<sql-template id="SEL_MST_AND_SET_ITEM_TEMPORARY_STOCK_NUM">
		SELECT
			TEMPORARY_STOCK_NUM
		FROM
			MST_ITEM MI
		WHERE
			DELETE_FLAG = '0'
		AND
			 SYS_ITEM_ID = ${formSysItemId}
	</sql-template>

	<sql-template id="SEL_MST_ITEM_TEMPORARY_STOCK_NUM">
		SELECT
			TEMPORARY_STOCK_NUM
		FROM
			MST_ITEM
		WHERE
			DELETE_FLAG = '0'
		AND
			ITEM_CODE = ${itemCode}
	</sql-template>

	<sql-template id="SEL_MAX_SYS_ANNUAL_SALES_ID">
		SELECT
			COALESCE(MAX(SYS_ANNUAL_SALES_ID),0)
		FROM
			ANNUAL_SALES
	</sql-template>

	<sql-template id="INS_ANNUAL_SALES">
		INSERT INTO ANNUAL_SALES(
			SYS_ANNUAL_SALES_ID
			,SYS_ITEM_ID
			,ANNUAL_AVERAGE_SALES_NUM
			,ONE_MONTH_AGO
			,TWO_MONTH_AGO
			,THREE_MONTH_AGO
			,FOUR_MONTH_AGO
			,FIVE_MONTH_AGO
			,SIX_MONTH_AGO
			,SEVEN_MONTH_AGO
			,EIGHT_MONTH_AGO
			,NINE_MONTH_AGO
			,TEN_MONTH_AGO
			,ELEVEN_MONTH_AGO
			,TWELVE_MONTH_AGO
			,DELETE_FLAG)
		VALUES
			(${sysAnnualSalesId}
			,${sysItemId}
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,0
			,'0')
	</sql-template>

	<sql-template id="DEL_ANNUAL_SALES">
		UPDATE
			ANNUAL_SALES
		SET
			DELETE_FLAG = '1'
		WHERE
			SYS_ITEM_ID = ${sysItemId}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="DEL_FOREIGN_ITEM">
		UPDATE
			FOREIGN_ITEM
		SET
			DELETE_FLAG = '1'
			,UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ITEM_ID = ${sysItemId}
		AND
			DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="UPD_UPDATE_INFO">
		UPDATE
			MST_ITEM
		SET
			UPDATE_DATE = current_timestamp
			,UPDATE_USER_ID = ${updateUserId}
		WHERE
			SYS_ITEM_ID = ${sysItemId}
			AND DELETE_FLAG = '0'
	</sql-template>

	<sql-template id="SEL_WAREHOUSE_STOCK_INFO">
		SELECT
			SYS_WAREHOUSE_STOCK_ID
			,SYS_ITEM_ID
			,SYS_WAREHOUSE_ID
			,STOCK_NUM
			,STOCK_NUM AS BEFORE_STOCK_NUM
			,LOCATION_NO
			,PRIORITY
			,TO_NUMBER(PRIORITY,
			'000')AS PRIORITY_NUMBER
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
		FROM
			WAREHOUSE_STOCK
		WHERE
			DELETE_FLAG = '0'
		AND SYS_WAREHOUSE_STOCK_ID = ${sysWarehouseStockId}
	</sql-template>
	<sql-template id="SUM_SET_ITEM_COST">
		SELECT
			COALESCE(SUM(COST.COST * COALESCE(ITEM_NUM,0)),0) AS COST
			,COST.SYS_CORPORATION_ID
			,M_CORPORATION.CORPORATION_NM
		FROM
			ITEM_COST COST
			LEFT JOIN MST_CORPORATION M_CORPORATION
			ON (M_CORPORATION.SYS_CORPORATION_ID = COST.SYS_CORPORATION_ID
				AND M_CORPORATION.DELETE_FLAG = '0')
			LEFT JOIN SET_ITEM SI
			ON (COST.SYS_ITEM_ID = SI.FORM_SYS_ITEM_ID
			AND SI.SYS_ITEM_ID = ${sysItemId}
			AND SI.DELETE_FLAG = '0')
		WHERE
			COST.DELETE_FLAG = '0'
		GROUP BY
			COST.SYS_CORPORATION_ID
			,M_CORPORATION.CORPORATION_NM
		ORDER BY
			SYS_CORPORATION_ID DESC
	</sql-template>

	<sql-template id="SUM_SET_ITEM_PRICE">
		SELECT
			SUM(PRICE) AS PRICE
			,PRICE.SYS_CORPORATION_ID
			,M_CORPORATION.CORPORATION_NM
		FROM
			ITEM_PRICE PRICE
				LEFT JOIN MST_CORPORATION M_CORPORATION
			ON M_CORPORATION.SYS_CORPORATION_ID = PRICE.SYS_CORPORATION_ID
		WHERE
			SYS_ITEM_ID IN (SELECT
						FORM_SYS_ITEM_ID
					FROM
						SET_ITEM
					WHERE
						SYS_ITEM_ID = ${sysItemId}
						AND DELETE_FLAG = '0')
		GROUP BY
			PRICE.SYS_CORPORATION_ID
			,M_CORPORATION.CORPORATION_NM
		ORDER BY
			SYS_CORPORATION_ID
	</sql-template>

	<sql-template id="SEL_SUM_PURCHAR_COST">
		SELECT
			 COALESCE(SUM(PURCHACE_PRICE * SI.ITEM_NUM),0) AS PURCHACE_PRICE
			,COALESCE(SUM(LOADING * SI.ITEM_NUM),0) AS LOADING
			,COALESCE(SUM(PURCHACE_COST * SI.ITEM_NUM),0) AS PURCHACE_COST
		FROM
			MST_ITEM MI
			INNER JOIN SET_ITEM SI
				ON (MI.SYS_ITEM_ID = SI.FORM_SYS_ITEM_ID
				AND SI.SYS_ITEM_ID = ${sysItemId}
				AND SI.DELETE_FLAG = '0')
		WHERE
			MI.DELETE_FLAG = '0'
	</sql-template>

	<!-- 在庫キープCSVインポートテーブル最大PK取得 -->
	<sql-template id="SEL_MAX_KEEP_IMPORT_ID">
		SELECT
			COALESCE(MAX(SYS_KEEP_IMPORT_ID),0)
		FROM
			KEEP_CSV_IMPORT
	</sql-template>

	<!-- 国内CSVインポートテーブル最大PK取得 -->
	<sql-template id="SEL_MAX_DOMESTIC_IMPORT_ID">
		SELECT
			COALESCE(MAX(SYS_DOMESTIC_IMPORT_ID),0)
		FROM
			DOMESTIC_CSV_IMPORT
	</sql-template>

	<!-- 国内CSVインポート情報取得 -->
	<sql-template id="SEL_DOMESTIC_CSV_IMPORT">
		SELECT
			SYS_DOMESTIC_IMPORT_ID
			,SYS_CORPORATION_ID
			,DATA_DIVISION
			,ORDER_ROUTE
			,FILE_NM
			,ORDER_NO
			,ORDER_DATE
			,ORDER_TIME
			,ORDER_FAMILY_NM
			,ORDER_FIRST_NM
			,ORDER_FAMILY_NM_KANA
			,ORDER_FIRST_NM_KANA
			,ORDER_MAIL_ADDRESS
			,ORDER_ZIP
			,ORDER_PREFECTURES
			,ORDER_MUNICIPALITY
			,ORDER_ADDRESS
			,ORDER_BUILDING_NM
			,ORDER_COMPANY_NM
			,ORDER_QUARTER
			,ORDER_TEL
			,ACCOUNT_METHOD
			,ACCOUNT_COMMISSION
			,USED_POINT
			,GET_POINT
			,ORDER_REMARKS
			,ORDER_MEMO
			,SUM_CLAIM_PRICE
			,MENBER_NO
			,DEPOSIT_DATE
			,REGISTRY_STAFF
			,DESTINATION_DIVISION
			,DESTINATION_FAMILY_NM
			,DESTINATION_FIRST_NM
			,DESTINATION_FAMILY_NM_KANA
			,DESTINATION_FIRST_NM_KANA
			,DESTINATION_ZIP
			,DESTINATION_PREFECTURES
			,DESTINATION_MUNICIPALITY
			,DESTINATION_ADDRESS
			,DESTINATION_BUILDING_NM
			,DESTINATION_COMPANY_NM
			,DESTINATION_QUARTER
			,DESTINATION_TEL
			,SENDER_DIVISION
			,SENDER_FAMILY_NM
			,SENDER_FIRST_NM
			,SENDER_FAMILY_NM_KANA
			,SENDER_FIRST_NM_KANA
			,SENDER_ZIP
			,SENDER_PREFECTURES
			,SENDER_MUNICIPALITY
			,SENDER_ADDRESS
			,SENDER_BUILDING_NM
			,SENDER_COMPANY_NM
			,SENDER_QUARTER
			,SENDER_TEL
			,SENDER_REMARKS
			,SENDER_MEMO
			,GIFT_MESSAGE
			,SLIP_DIVISION
			,INVOICE_CLASSIFICATION
			,SLIP_NO
			,CASH_ON_DELIVERY_COMMISSION
			,TEMPERATURE_DIVISION
			,DESTINATION_APPOINT_DATE
			,DESTINATION_APPOINT_TIME
			,SHIPMENT_PLAN_DATE
			,TRANSPORT_CORPORATION_SYSTEM
			,SLIP_MEMO
			,LAST_STATUS
			,RESERVATION_STATUS
			,COMBINE_SOURCE
			,COMBINE_POINT
			,ITEM_DIVISION
			,ITEM_CLASSIFICATION
			,SHOP_ITEM_CD
			,ITEM_NM
			,ITEM_NUM
			,PIECE_RATE
			,OPTION_SUKENEKO_ONE
			,OPTION_SUKENEKO_TWO
			,SUKENEKO_ITEM_CD
			,UNPAID_PRICE
			,INVOICE_ARTICLE
			,SLIP_MANAGEMENT_NO
			,DISPOSAL_ROUTE
			,DISPOSAL_DATE
			,OWN_COMPANY_CD
			,BUY_COUNT
			,DELETE_FLAG
		FROM
			DOMESTIC_CSV_IMPORT
		WHERE
		DELETE_FLAG = '0'
		<if-not-null varName="fileNm">
			AND
			FILE_NM = ${fileNm}
		</if-not-null>
		<if-not-null varName="orderNo">
			AND
			ORDER_NO = ${orderNo}
		</if-not-null>
	</sql-template>

	<!-- 国内CSVインポート情報取得 -->
	<sql-template id="SEL_DOMESTIC_CSV_IMPORT_BY_IMPORT_ID">
		SELECT
			SYS_DOMESTIC_IMPORT_ID
			,SYS_CORPORATION_ID
			,DATA_DIVISION
			,ORDER_ROUTE
			,FILE_NM
			,ORDER_NO
			,ORDER_DATE
			,ORDER_TIME
			,ORDER_FAMILY_NM
			,ORDER_FIRST_NM
			,ORDER_FAMILY_NM_KANA
			,ORDER_FIRST_NM_KANA
			,ORDER_MAIL_ADDRESS
			,ORDER_ZIP
			,ORDER_PREFECTURES
			,ORDER_MUNICIPALITY
			,ORDER_ADDRESS
			,ORDER_BUILDING_NM
			,ORDER_COMPANY_NM
			,ORDER_QUARTER
			,ORDER_TEL
			,ACCOUNT_METHOD
			,ACCOUNT_COMMISSION
			,USED_POINT
			,GET_POINT
			,ORDER_REMARKS
			,ORDER_MEMO
			,SUM_CLAIM_PRICE
			,MENBER_NO
			,DEPOSIT_DATE
			,REGISTRY_STAFF
			,DESTINATION_DIVISION
			,DESTINATION_FAMILY_NM
			,DESTINATION_FIRST_NM
			,DESTINATION_FAMILY_NM_KANA
			,DESTINATION_FIRST_NM_KANA
			,DESTINATION_ZIP
			,DESTINATION_PREFECTURES
			,DESTINATION_MUNICIPALITY
			,DESTINATION_ADDRESS
			,DESTINATION_BUILDING_NM
			,DESTINATION_COMPANY_NM
			,DESTINATION_QUARTER
			,DESTINATION_TEL
			,SENDER_DIVISION
			,SENDER_FAMILY_NM
			,SENDER_FIRST_NM
			,SENDER_FAMILY_NM_KANA
			,SENDER_FIRST_NM_KANA
			,SENDER_ZIP
			,SENDER_PREFECTURES
			,SENDER_MUNICIPALITY
			,SENDER_ADDRESS
			,SENDER_BUILDING_NM
			,SENDER_COMPANY_NM
			,SENDER_QUARTER
			,SENDER_TEL
			,SENDER_REMARKS
			,SENDER_MEMO
			,GIFT_MESSAGE
			,SLIP_DIVISION
			,INVOICE_CLASSIFICATION
			,SLIP_NO
			,CASH_ON_DELIVERY_COMMISSION
			,TEMPERATURE_DIVISION
			,DESTINATION_APPOINT_DATE
			,DESTINATION_APPOINT_TIME
			,SHIPMENT_PLAN_DATE
			,TRANSPORT_CORPORATION_SYSTEM
			,SLIP_MEMO
			,LAST_STATUS
			,RESERVATION_STATUS
			,COMBINE_SOURCE
			,COMBINE_POINT
			,ITEM_DIVISION
			,ITEM_CLASSIFICATION
			,SHOP_ITEM_CD
			,ITEM_NM
			,ITEM_NUM
			,PIECE_RATE
			,OPTION_SUKENEKO_ONE
			,OPTION_SUKENEKO_TWO
			,SUKENEKO_ITEM_CD
			,UNPAID_PRICE
			,INVOICE_ARTICLE
			,SLIP_MANAGEMENT_NO
			,DISPOSAL_ROUTE
			,DISPOSAL_DATE
			,OWN_COMPANY_CD
			,BUY_COUNT
			,DELETE_FLAG
		FROM
			DOMESTIC_CSV_IMPORT
		WHERE
		DELETE_FLAG = '0'
		<if-not-equals value="0" varName="sysImportId">
			AND
			SYS_DOMESTIC_IMPORT_ID = ${sysImportId}
		</if-not-equals>
	</sql-template>

	<sql-template id="INS_DOMESTIC_CSV_IMPORT">
		INSERT INTO DOMESTIC_CSV_IMPORT(
			SYS_DOMESTIC_IMPORT_ID
			,SYS_CORPORATION_ID
			,DATA_DIVISION
			,ORDER_ROUTE
			,FILE_NM
			,ORDER_NO
			,ORDER_DATE
			,ORDER_TIME
			,ORDER_FAMILY_NM
			,ORDER_FIRST_NM
			,ORDER_FAMILY_NM_KANA
			,ORDER_FIRST_NM_KANA
			,ORDER_MAIL_ADDRESS
			,ORDER_ZIP
			,ORDER_PREFECTURES
			,ORDER_MUNICIPALITY
			,ORDER_ADDRESS
			,ORDER_BUILDING_NM
			,ORDER_COMPANY_NM
			,ORDER_QUARTER
			,ORDER_TEL
			,ACCOUNT_METHOD
			,ACCOUNT_COMMISSION
			,USED_POINT
			,GET_POINT
			,ORDER_REMARKS
			,ORDER_MEMO
			,ORDER_REMARKS_MEMO
			,SUM_CLAIM_PRICE
			,MENBER_NO
			,DEPOSIT_DATE
			,REGISTRY_STAFF
			,DESTINATION_DIVISION
			,DESTINATION_FAMILY_NM
			,DESTINATION_FIRST_NM
			,DESTINATION_FAMILY_NM_KANA
			,DESTINATION_FIRST_NM_KANA
			,DESTINATION_ZIP
			,DESTINATION_PREFECTURES
			,DESTINATION_MUNICIPALITY
			,DESTINATION_ADDRESS
			,DESTINATION_BUILDING_NM
			,DESTINATION_COMPANY_NM
			,DESTINATION_QUARTER
			,DESTINATION_TEL
			,SENDER_DIVISION
			,SENDER_FAMILY_NM
			,SENDER_FIRST_NM
			,SENDER_FAMILY_NM_KANA
			,SENDER_FIRST_NM_KANA
			,SENDER_ZIP
			,SENDER_PREFECTURES
			,SENDER_MUNICIPALITY
			,SENDER_ADDRESS
			,SENDER_BUILDING_NM
			,SENDER_COMPANY_NM
			,SENDER_QUARTER
			,SENDER_TEL
			,SENDER_REMARKS
			,SENDER_MEMO
			,GIFT_MESSAGE
			,SLIP_DIVISION
			,INVOICE_CLASSIFICATION
			,SLIP_NO
			,CASH_ON_DELIVERY_COMMISSION
			,TEMPERATURE_DIVISION
			,DESTINATION_APPOINT_DATE
			,DESTINATION_APPOINT_TIME
			,SHIPMENT_PLAN_DATE
			,TRANSPORT_CORPORATION_SYSTEM
			,SLIP_MEMO
			,LAST_STATUS
			,RESERVATION_STATUS
			,COMBINE_SOURCE
			,COMBINE_POINT
			,ITEM_DIVISION
			,ITEM_CLASSIFICATION
			,SHOP_ITEM_CD
			,ITEM_NM
			,ITEM_NUM
			,PIECE_RATE
			,OPTION_SUKENEKO_ONE
			,OPTION_SUKENEKO_TWO
			,SUKENEKO_ITEM_CD
			,UNPAID_PRICE
			,INVOICE_ARTICLE
			,SLIP_MANAGEMENT_NO
			,DISPOSAL_ROUTE
			,DISPOSAL_DATE
			,OWN_COMPANY_CD
			,BUY_COUNT
			,DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID)
		VALUES(
			${sysDomesticImportId}
			,${sysCorporationId}
			,${dataDivision}
			,${orderRoute}
			,${fileNm}
			,${orderNo}
			,${orderDate}
			,${orderTime}
			,${orderFamilyNm}
			,${orderFirstNm}
			,${orderFamilyNmKana}
			,${orderFirstNmKana}
			,${orderMailAddress}
			,${orderZip}
			,${orderPrefectures}
			,${orderMunicipality}
			,${orderAddress}
			,${orderBuildingNm}
			,${orderCompanyNm}
			,${orderQuarter}
			,${orderTel}
			,${accountMethod}
			,${accountCommission}
			,${usedPoint}
			,${getPoint}
			,${orderRemarks}
			,${orderMemo}
			,${orderRemarksMemo}
			,${sumClaimPrice}
			,${menberNo}
			,${depositDate}
			,${registryStaff}
			,${destinationDivision}
			,${destinationFamilyNm}
			,${destinationFirstNm}
			,${destinationFamilyNmKana}
			,${destinationFirstNmKana}
			,${destinationZip}
			,${destinationPrefectures}
			,${destinationMunicipality}
			,${destinationAddress}
			,${destinationBuildingNm}
			,${destinationCompanyNm}
			,${destinationQuarter}
			,${destinationTel}
			,${senderDivision}
			,${senderFamilyNm}
			,${senderFirstNm}
			,${senderFamilyNmKana}
			,${senderFirstNmKana}
			,${senderZip}
			,${senderPrefectures}
			,${senderMunicipality}
			,${senderAddress}
			,${senderBuildingNm}
			,${senderCompanyNm}
			,${senderQuarter}
			,${senderTel}
			,${senderRemarks}
			,${senderMemo}
			,${giftMessage}
			,${slipDivision}
			,${invoiceClassification}
			,${slipNo}
			,${cashOnDeliveryCommission}
			,${temperatureDivision}
			,${destinationAppointDate}
			,${destinationAppointTime}
			,${shipmentPlanDate}
			,${transportCorporationSystem}
			,${slipMemo}
			,${lastStatus}
			,${reservationStatus}
			,${combineSource}
			,${combinePoint}
			,${itemDivision}
			,${itemClassification}
			,${shopItemCd}
			,${itemNm}
			,${itemNum}
			,${pieceRate}
			,${optionSukenekoOne}
			,${optionSukenekoTwo}
			,${sukenekoItemCd}
			,${unpaidPrice}
			,${invoiceArticle}
			,${slipManagementNo}
			,${disposalRoute}
			,${disposalDate}
			,${ownCompanyCd}
			,${buyCount}
			,'0'
			,current_timestamp
			,${createUserId}
			,current_timestamp
			,${updateUserId})
	</sql-template>

	<sql-template id="SEL_SALE_SEARCH_DOMESTIC_ITEM">
		SELECT
			DI.MANAGEMENT_CODE AS ITEM_CODE
			,DI.ORDER_NUM
			,DI.ITEM_NM
			,DI.PURCHASING_COST
			,DI.LIST_PRICE
			,EM.ITEM_RATE_OVER
			,DS.SYS_CORPORATION_ID
		FROM
			DOMESTIC_ITEM DI
				INNER JOIN DOMESTIC_SLIP DS
				ON (DI.SYS_DOMESTIC_SLIP_ID = DS.SYS_DOMESTIC_SLIP_ID
					<if-not-empty varName="orderNo">
						AND DS.ORDER_NO = ${orderNo}
					</if-not-empty>)
				INNER JOIN EXHIBIT_MANAGE EM
				ON(DI.MANAGEMENT_CODE = EM.MANAGEMENT_CODE)
		WHERE
			DI.DELETE_FLAG = '0'
			AND EM.DELETE_FLAG = '0'
			<if-not-empty varName="managementCode">
				AND DI.MANAGEMENT_CODE LIKE ${managementCode}
			</if-not-empty>
			<if-not-empty varName="itemNm">
				AND DI.ITEM_NM LIKE ${itemNm}
			</if-not-empty>
		ORDER BY
			SYS_DOMESTIC_ITEM_ID ASC
	</sql-template>
	<sql-template id="SEL_INVOICE_MST_ITEM">
	SELECT
			MST_ITEM.SYS_ITEM_ID
			,MST_ITEM.ASSEMBLY_NUM
			,ITEM_CODE ,ITEM_CODE AS BEFORE_ITEM_CODE
			,OLD_ITEM_CODE
			,ITEM_NM
			,CAR_MODEL
			,MODEL
			,MAKER_NM
			,ITEM_LEAD_TIME
			,MONTH_AVG_ORDER_NUM
			,PACKING_SIZE
			,WEIGHT
			,MINIMUM_ORDER_QUANTITY
			,FACTORY_ITEM_CODE
			,PURCHACE_COST
			,PURCHACE_PRICE
			,LOADING
			,FOREIGN_ITEM_NM
			,SYS_SUPPLIER_ID
			,DEAD_STOCK_FLAG
			,DOCUMENT_REMARKS
			,PURCHACE_COUNTRY
			,SYS_GROUP_NM_ID
			,TOTAL_STOCK_NUM
			,ORDER_ALERT_NUM
			,MANUAL_FLG
			,PLAN_SHEET_FLG
			,OTHER_DOCUMENT_FLG
			,SPEC_MEMO
			,SET_ITEM_FLG
			,LEAVE_CLASS_FLG
			,MST_ITEM.DELETE_FLAG
			,CREATE_DATE
			,CREATE_USER_ID
			,UPDATE_DATE
			,UPDATE_USER_ID
			,TEMPORARY_STOCK_NUM
			,ITEM_COST.COST
			,KIND_COST_TBL.KIND_COST
			,KIND_COST_TBL.KIND_COST_ID
			,ITEM_PRICE.PRICE
			,ASSEMBLY_NUM
		FROM
			MST_ITEM
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID AS COST_SYS_ITEM_ID
					,COST
				FROM
					ITEM_COST
				WHERE
					 SYS_CORPORATION_ID = (SELECT
													SYS_CORPORATION_ID
												FROM
													MST_CORPORATION
												WHERE
													FILE_CORPORATION_NM ILIKE 'kts') )ITEM_COST
				ON MST_ITEM.SYS_ITEM_ID = ITEM_COST.COST_SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID
					,SYS_ITEM_COST_ID AS KIND_COST_ID
					,COST AS KIND_COST
				FROM
					ITEM_COST
				WHERE

					 SYS_CORPORATION_ID = 99)KIND_COST_TBL
			ON MST_ITEM.SYS_ITEM_ID = KIND_COST_TBL.SYS_ITEM_ID
			LEFT JOIN
				(SELECT
					SYS_ITEM_ID AS PRICE_SYS_ITEM_ID
					,PRICE
				FROM
					ITEM_PRICE
				WHERE

					SYS_CORPORATION_ID = (SELECT
												SYS_CORPORATION_ID
											FROM
												MST_CORPORATION
											WHERE
												FILE_CORPORATION_NM ILIKE 'kts') )ITEM_PRICE
				ON MST_ITEM.SYS_ITEM_ID = ITEM_PRICE.PRICE_SYS_ITEM_ID
		WHERE

			MST_ITEM.SYS_ITEM_ID = ${sysItemId} ORDER BY
			TO_NUMBER(ITEM_CODE, '00000000000')
	</sql-template>

<!-- 請求書作成画面検索ボタン押下時 -->
	<sql-template id="SEL_SEARCH_CORPBILL_ID_LIST">
		SELECT
			CD.SYS_CORPORATE_BILL_ID
		FROM
			CORPORATE_BILL CD
		<!-- 得意先番号は請求書とは別のテーブルから取得するため表結合する。 -->
		<if-not-empty varName="clientNo">
			,(SELECT DISTINCT SYS_CORPORATION_ID,  CLIENT_NM FROM MST_CLIENT WHERE CLIENT_NO LIKE ${clientNo}) MC
		</if-not-empty>
		WHERE
		<if-not-empty varName="clientNo">
			CD.CLIENT_BILLING_NM = MC.CLIENT_NM
			AND
		</if-not-empty>

		CD.DELETE_FLAG = '0'

		<if-not-empty varName="searchExportMonthFrom">
			AND CD.DEMAND_MONTH &gt;= ${searchExportMonthFrom}
		</if-not-empty>
		<if-not-empty varName="searchExportMonthTo">
			AND CD.DEMAND_MONTH &lt;= ${searchExportMonthTo}
		</if-not-empty>
		<if-not-empty varName="corporateBillNo">
			AND CD.CORPORATE_BILL_NO LIKE ${corporateBillNo}
		</if-not-empty>
		<if-not-equals value="0" varName="sysCorporationId">
			AND CD.SYS_CORPORATION_ID = ${sysCorporationId}
		</if-not-equals>
		<if-not-empty varName="clientNm">
			AND CD.CLIENT_BILLING_NM ILIKE ${clientNm}
		</if-not-empty>
		<if-not-empty varName="searchBillingAmountFrom">
			AND BILL_AMOUNT &gt;= ${searchBillingAmountFrom}
		</if-not-empty>
		<if-not-empty varName="searchBillingAmountTo">
			AND BILL_AMOUNT &lt;= ${searchBillingAmountTo}
		</if-not-empty>
		ORDER BY
		CD.BILLDATA_CREATE_DATE
		<if-equals value="2" varName="sortOrder">DESC</if-equals>
		<if-equals value="1" varName="sortOrder">ASC</if-equals>
		,
		CD.SYS_CORPORATION_ID ASC, CD.CORPORATE_BILL_NO DESC;
	</sql-template>


</sql-templates>
